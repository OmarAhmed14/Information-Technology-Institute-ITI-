
Smart_Home1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003046  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00003046  000030da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800180  00800180  000031fa  2**0
                  ALLOC
  3 .stab         00002808  00000000  00000000  000031fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010cf  00000000  00000000  00005a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006e65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009270  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a5f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b7cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000bc82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 67 12 	jmp	0x24ce	; 0x24ce <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 17 	call	0x2eec	; 0x2eec <main>
      8a:	0c 94 21 18 	jmp	0x3042	; 0x3042 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 06 18 	jmp	0x300c	; 0x300c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fa 17 	jmp	0x2ff4	; 0x2ff4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 16 18 	jmp	0x302c	; 0x302c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 0e 18 	jmp	0x301c	; 0x301c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_voidInit>:

#include "ADC_Registers.h"
#include "ADC_Interface.h"

void ADC_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	ADMUX=AREF<<6;
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	10 82       	st	Z, r1
	ADMUX|=ADCLEFT_ADJUSTMENT_OFF<<5;
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e7 e2       	ldi	r30, 0x27	; 39
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADATE);
     e48:	a6 e2       	ldi	r26, 0x26	; 38
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e6 e2       	ldi	r30, 0x26	; 38
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	80 62       	ori	r24, 0x20	; 32
     e54:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADEN);
     e56:	a6 e2       	ldi	r26, 0x26	; 38
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	e6 e2       	ldi	r30, 0x26	; 38
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	80 68       	ori	r24, 0x80	; 128
     e62:	8c 93       	st	X, r24
	ADCSRA|=DIV_64<<0;
     e64:	a6 e2       	ldi	r26, 0x26	; 38
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e6 e2       	ldi	r30, 0x26	; 38
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	86 60       	ori	r24, 0x06	; 6
     e70:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADIF);
     e72:	a6 e2       	ldi	r26, 0x26	; 38
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e6 e2       	ldi	r30, 0x26	; 38
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	80 61       	ori	r24, 0x10	; 16
     e7e:	8c 93       	st	X, r24
}
     e80:	cf 91       	pop	r28
     e82:	df 91       	pop	r29
     e84:	08 95       	ret

00000e86 <ADC_u16Read>:

u16 ADC_u16Read(ADC_CHANALS_options_t Copy_u8ADCchannel)
{
     e86:	df 93       	push	r29
     e88:	cf 93       	push	r28
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	89 83       	std	Y+1, r24	; 0x01
	ADMUX|=Copy_u8ADCchannel<<0;
     e92:	a7 e2       	ldi	r26, 0x27	; 39
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e7 e2       	ldi	r30, 0x27	; 39
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	90 81       	ld	r25, Z
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	89 2b       	or	r24, r25
     ea0:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADSC);
     ea2:	a6 e2       	ldi	r26, 0x26	; 38
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e6 e2       	ldi	r30, 0x26	; 38
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	80 64       	ori	r24, 0x40	; 64
     eae:	8c 93       	st	X, r24
	while (!Get_Bit(ADCSRA,ADCSRA_ADIF));
     eb0:	e6 e2       	ldi	r30, 0x26	; 38
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	82 95       	swap	r24
     eb8:	8f 70       	andi	r24, 0x0F	; 15
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	81 70       	andi	r24, 0x01	; 1
     ec0:	90 70       	andi	r25, 0x00	; 0
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	a9 f3       	breq	.-22     	; 0xeb0 <ADC_u16Read+0x2a>
	Set_Bit(ADCSRA,ADCSRA_ADIF);
     ec6:	a6 e2       	ldi	r26, 0x26	; 38
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e6 e2       	ldi	r30, 0x26	; 38
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	80 61       	ori	r24, 0x10	; 16
     ed2:	8c 93       	st	X, r24
	return ADCLH;
     ed4:	e4 e2       	ldi	r30, 0x24	; 36
     ed6:	f0 e0       	ldi	r31, 0x00	; 0
     ed8:	80 81       	ld	r24, Z
     eda:	91 81       	ldd	r25, Z+1	; 0x01
}
     edc:	0f 90       	pop	r0
     ede:	cf 91       	pop	r28
     ee0:	df 91       	pop	r29
     ee2:	08 95       	ret

00000ee4 <ADC_f32ADCtoVolt>:

f32 ADC_f32ADCtoVolt(u16 Copy_u16ADCVal)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <ADC_f32ADCtoVolt+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <ADC_f32ADCtoVolt+0x8>
     eec:	00 d0       	rcall	.+0      	; 0xeee <ADC_f32ADCtoVolt+0xa>
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	9e 83       	std	Y+6, r25	; 0x06
     ef4:	8d 83       	std	Y+5, r24	; 0x05
	f32 ADC_Localf32Volt = (Copy_u16ADCVal/1024.0)*VREF;
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	9e 81       	ldd	r25, Y+6	; 0x06
     efa:	cc 01       	movw	r24, r24
     efc:	a0 e0       	ldi	r26, 0x00	; 0
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	bc 01       	movw	r22, r24
     f0e:	cd 01       	movw	r24, r26
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	40 e8       	ldi	r20, 0x80	; 128
     f16:	54 e4       	ldi	r21, 0x44	; 68
     f18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	bc 01       	movw	r22, r24
     f22:	cd 01       	movw	r24, r26
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	40 ea       	ldi	r20, 0xA0	; 160
     f2a:	50 e4       	ldi	r21, 0x40	; 64
     f2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f30:	dc 01       	movw	r26, r24
     f32:	cb 01       	movw	r24, r22
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	ab 83       	std	Y+3, r26	; 0x03
     f3a:	bc 83       	std	Y+4, r27	; 0x04
	return ADC_Localf32Volt;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
     f40:	ab 81       	ldd	r26, Y+3	; 0x03
     f42:	bc 81       	ldd	r27, Y+4	; 0x04
}
     f44:	bc 01       	movw	r22, r24
     f46:	cd 01       	movw	r24, r26
     f48:	26 96       	adiw	r28, 0x06	; 6
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <APP_voidPass_User_checker>:
#include "KeyPad_Interface.h"

#include "util/delay.h"

void APP_voidPass_User_checker (void)
{
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	df 93       	push	r29
     f60:	cf 93       	push	r28
     f62:	cd b7       	in	r28, 0x3d	; 61
     f64:	de b7       	in	r29, 0x3e	; 62
     f66:	cf 58       	subi	r28, 0x8F	; 143
     f68:	d0 40       	sbci	r29, 0x00	; 0
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PassNumber = KeyPad_u8GetPress();
     f74:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <KeyPad_u8GetPress>
     f78:	fe 01       	movw	r30, r28
     f7a:	e3 57       	subi	r30, 0x73	; 115
     f7c:	ff 4f       	sbci	r31, 0xFF	; 255
     f7e:	80 83       	st	Z, r24
     f80:	06 c0       	rjmp	.+12     	; 0xf8e <APP_voidPass_User_checker+0x34>

	while (Local_u8PassNumber<'0' || Local_u8PassNumber>'9')
	{
		Local_u8PassNumber = KeyPad_u8GetPress();
     f82:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <KeyPad_u8GetPress>
     f86:	fe 01       	movw	r30, r28
     f88:	e3 57       	subi	r30, 0x73	; 115
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 83       	st	Z, r24

void APP_voidPass_User_checker (void)
{
	u8 Local_u8PassNumber = KeyPad_u8GetPress();

	while (Local_u8PassNumber<'0' || Local_u8PassNumber>'9')
     f8e:	fe 01       	movw	r30, r28
     f90:	e3 57       	subi	r30, 0x73	; 115
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	80 81       	ld	r24, Z
     f96:	80 33       	cpi	r24, 0x30	; 48
     f98:	a0 f3       	brcs	.-24     	; 0xf82 <APP_voidPass_User_checker+0x28>
     f9a:	fe 01       	movw	r30, r28
     f9c:	e3 57       	subi	r30, 0x73	; 115
     f9e:	ff 4f       	sbci	r31, 0xFF	; 255
     fa0:	80 81       	ld	r24, Z
     fa2:	8a 33       	cpi	r24, 0x3A	; 58
     fa4:	70 f7       	brcc	.-36     	; 0xf82 <APP_voidPass_User_checker+0x28>
	{
		Local_u8PassNumber = KeyPad_u8GetPress();
	}

	switch (Local_u8PassNumber)
     fa6:	fe 01       	movw	r30, r28
     fa8:	e3 57       	subi	r30, 0x73	; 115
     faa:	ff 4f       	sbci	r31, 0xFF	; 255
     fac:	80 81       	ld	r24, Z
     fae:	28 2f       	mov	r18, r24
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	c2 57       	subi	r28, 0x72	; 114
     fb4:	df 4f       	sbci	r29, 0xFF	; 255
     fb6:	39 83       	std	Y+1, r19	; 0x01
     fb8:	28 83       	st	Y, r18
     fba:	ce 58       	subi	r28, 0x8E	; 142
     fbc:	d0 40       	sbci	r29, 0x00	; 0
     fbe:	c2 57       	subi	r28, 0x72	; 114
     fc0:	df 4f       	sbci	r29, 0xFF	; 255
     fc2:	88 81       	ld	r24, Y
     fc4:	99 81       	ldd	r25, Y+1	; 0x01
     fc6:	ce 58       	subi	r28, 0x8E	; 142
     fc8:	d0 40       	sbci	r29, 0x00	; 0
     fca:	84 33       	cpi	r24, 0x34	; 52
     fcc:	91 05       	cpc	r25, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <APP_voidPass_User_checker+0x78>
     fd0:	59 c3       	rjmp	.+1714   	; 0x1684 <APP_voidPass_User_checker+0x72a>
     fd2:	c2 57       	subi	r28, 0x72	; 114
     fd4:	df 4f       	sbci	r29, 0xFF	; 255
     fd6:	e8 81       	ld	r30, Y
     fd8:	f9 81       	ldd	r31, Y+1	; 0x01
     fda:	ce 58       	subi	r28, 0x8E	; 142
     fdc:	d0 40       	sbci	r29, 0x00	; 0
     fde:	e5 33       	cpi	r30, 0x35	; 53
     fe0:	f1 05       	cpc	r31, r1
     fe2:	9c f5       	brge	.+102    	; 0x104a <APP_voidPass_User_checker+0xf0>
     fe4:	c2 57       	subi	r28, 0x72	; 114
     fe6:	df 4f       	sbci	r29, 0xFF	; 255
     fe8:	28 81       	ld	r18, Y
     fea:	39 81       	ldd	r19, Y+1	; 0x01
     fec:	ce 58       	subi	r28, 0x8E	; 142
     fee:	d0 40       	sbci	r29, 0x00	; 0
     ff0:	21 33       	cpi	r18, 0x31	; 49
     ff2:	31 05       	cpc	r19, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <APP_voidPass_User_checker+0x9e>
     ff6:	1e c1       	rjmp	.+572    	; 0x1234 <APP_voidPass_User_checker+0x2da>
     ff8:	c2 57       	subi	r28, 0x72	; 114
     ffa:	df 4f       	sbci	r29, 0xFF	; 255
     ffc:	88 81       	ld	r24, Y
     ffe:	99 81       	ldd	r25, Y+1	; 0x01
    1000:	ce 58       	subi	r28, 0x8E	; 142
    1002:	d0 40       	sbci	r29, 0x00	; 0
    1004:	82 33       	cpi	r24, 0x32	; 50
    1006:	91 05       	cpc	r25, r1
    1008:	5c f4       	brge	.+22     	; 0x1020 <APP_voidPass_User_checker+0xc6>
    100a:	c2 57       	subi	r28, 0x72	; 114
    100c:	df 4f       	sbci	r29, 0xFF	; 255
    100e:	e8 81       	ld	r30, Y
    1010:	f9 81       	ldd	r31, Y+1	; 0x01
    1012:	ce 58       	subi	r28, 0x8E	; 142
    1014:	d0 40       	sbci	r29, 0x00	; 0
    1016:	e0 33       	cpi	r30, 0x30	; 48
    1018:	f1 05       	cpc	r31, r1
    101a:	09 f4       	brne	.+2      	; 0x101e <APP_voidPass_User_checker+0xc4>
    101c:	53 c0       	rjmp	.+166    	; 0x10c4 <APP_voidPass_User_checker+0x16a>
    101e:	4a c6       	rjmp	.+3220   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
    1020:	c2 57       	subi	r28, 0x72	; 114
    1022:	df 4f       	sbci	r29, 0xFF	; 255
    1024:	28 81       	ld	r18, Y
    1026:	39 81       	ldd	r19, Y+1	; 0x01
    1028:	ce 58       	subi	r28, 0x8E	; 142
    102a:	d0 40       	sbci	r29, 0x00	; 0
    102c:	22 33       	cpi	r18, 0x32	; 50
    102e:	31 05       	cpc	r19, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <APP_voidPass_User_checker+0xda>
    1032:	b8 c1       	rjmp	.+880    	; 0x13a4 <APP_voidPass_User_checker+0x44a>
    1034:	c2 57       	subi	r28, 0x72	; 114
    1036:	df 4f       	sbci	r29, 0xFF	; 255
    1038:	88 81       	ld	r24, Y
    103a:	99 81       	ldd	r25, Y+1	; 0x01
    103c:	ce 58       	subi	r28, 0x8E	; 142
    103e:	d0 40       	sbci	r29, 0x00	; 0
    1040:	83 33       	cpi	r24, 0x33	; 51
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <APP_voidPass_User_checker+0xee>
    1046:	66 c2       	rjmp	.+1228   	; 0x1514 <APP_voidPass_User_checker+0x5ba>
    1048:	35 c6       	rjmp	.+3178   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
    104a:	c2 57       	subi	r28, 0x72	; 114
    104c:	df 4f       	sbci	r29, 0xFF	; 255
    104e:	e8 81       	ld	r30, Y
    1050:	f9 81       	ldd	r31, Y+1	; 0x01
    1052:	ce 58       	subi	r28, 0x8E	; 142
    1054:	d0 40       	sbci	r29, 0x00	; 0
    1056:	e7 33       	cpi	r30, 0x37	; 55
    1058:	f1 05       	cpc	r31, r1
    105a:	09 f4       	brne	.+2      	; 0x105e <APP_voidPass_User_checker+0x104>
    105c:	ca c4       	rjmp	.+2452   	; 0x19f2 <APP_voidPass_User_checker+0xa98>
    105e:	c2 57       	subi	r28, 0x72	; 114
    1060:	df 4f       	sbci	r29, 0xFF	; 255
    1062:	28 81       	ld	r18, Y
    1064:	39 81       	ldd	r19, Y+1	; 0x01
    1066:	ce 58       	subi	r28, 0x8E	; 142
    1068:	d0 40       	sbci	r29, 0x00	; 0
    106a:	28 33       	cpi	r18, 0x38	; 56
    106c:	31 05       	cpc	r19, r1
    106e:	ac f4       	brge	.+42     	; 0x109a <APP_voidPass_User_checker+0x140>
    1070:	c2 57       	subi	r28, 0x72	; 114
    1072:	df 4f       	sbci	r29, 0xFF	; 255
    1074:	88 81       	ld	r24, Y
    1076:	99 81       	ldd	r25, Y+1	; 0x01
    1078:	ce 58       	subi	r28, 0x8E	; 142
    107a:	d0 40       	sbci	r29, 0x00	; 0
    107c:	85 33       	cpi	r24, 0x35	; 53
    107e:	91 05       	cpc	r25, r1
    1080:	09 f4       	brne	.+2      	; 0x1084 <APP_voidPass_User_checker+0x12a>
    1082:	b8 c3       	rjmp	.+1904   	; 0x17f4 <APP_voidPass_User_checker+0x89a>
    1084:	c2 57       	subi	r28, 0x72	; 114
    1086:	df 4f       	sbci	r29, 0xFF	; 255
    1088:	e8 81       	ld	r30, Y
    108a:	f9 81       	ldd	r31, Y+1	; 0x01
    108c:	ce 58       	subi	r28, 0x8E	; 142
    108e:	d0 40       	sbci	r29, 0x00	; 0
    1090:	e6 33       	cpi	r30, 0x36	; 54
    1092:	f1 05       	cpc	r31, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <APP_voidPass_User_checker+0x13e>
    1096:	37 c4       	rjmp	.+2158   	; 0x1906 <APP_voidPass_User_checker+0x9ac>
    1098:	0d c6       	rjmp	.+3098   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
    109a:	c2 57       	subi	r28, 0x72	; 114
    109c:	df 4f       	sbci	r29, 0xFF	; 255
    109e:	28 81       	ld	r18, Y
    10a0:	39 81       	ldd	r19, Y+1	; 0x01
    10a2:	ce 58       	subi	r28, 0x8E	; 142
    10a4:	d0 40       	sbci	r29, 0x00	; 0
    10a6:	28 33       	cpi	r18, 0x38	; 56
    10a8:	31 05       	cpc	r19, r1
    10aa:	09 f4       	brne	.+2      	; 0x10ae <APP_voidPass_User_checker+0x154>
    10ac:	18 c5       	rjmp	.+2608   	; 0x1ade <APP_voidPass_User_checker+0xb84>
    10ae:	c2 57       	subi	r28, 0x72	; 114
    10b0:	df 4f       	sbci	r29, 0xFF	; 255
    10b2:	88 81       	ld	r24, Y
    10b4:	99 81       	ldd	r25, Y+1	; 0x01
    10b6:	ce 58       	subi	r28, 0x8E	; 142
    10b8:	d0 40       	sbci	r29, 0x00	; 0
    10ba:	89 33       	cpi	r24, 0x39	; 57
    10bc:	91 05       	cpc	r25, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <APP_voidPass_User_checker+0x168>
    10c0:	84 c5       	rjmp	.+2824   	; 0x1bca <APP_voidPass_User_checker+0xc70>
    10c2:	f8 c5       	rjmp	.+3056   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
	{
	case '0':
		USART_voidWriteData('0');
    10c4:	80 e3       	ldi	r24, 0x30	; 48
    10c6:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    10ca:	fe 01       	movw	r30, r28
    10cc:	e7 57       	subi	r30, 0x77	; 119
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 ef       	ldi	r26, 0xF0	; 240
    10d6:	b1 e4       	ldi	r27, 0x41	; 65
    10d8:	80 83       	st	Z, r24
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	a2 83       	std	Z+2, r26	; 0x02
    10de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e0:	8e 01       	movw	r16, r28
    10e2:	0b 57       	subi	r16, 0x7B	; 123
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	fe 01       	movw	r30, r28
    10e8:	e7 57       	subi	r30, 0x77	; 119
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a ef       	ldi	r20, 0xFA	; 250
    10fa:	54 e4       	ldi	r21, 0x44	; 68
    10fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	f8 01       	movw	r30, r16
    1106:	80 83       	st	Z, r24
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	a2 83       	std	Z+2, r26	; 0x02
    110c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    110e:	fe 01       	movw	r30, r28
    1110:	eb 57       	subi	r30, 0x7B	; 123
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	60 81       	ld	r22, Z
    1116:	71 81       	ldd	r23, Z+1	; 0x01
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	93 81       	ldd	r25, Z+3	; 0x03
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e8       	ldi	r20, 0x80	; 128
    1122:	5f e3       	ldi	r21, 0x3F	; 63
    1124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1128:	88 23       	and	r24, r24
    112a:	44 f4       	brge	.+16     	; 0x113c <APP_voidPass_User_checker+0x1e2>
		__ticks = 1;
    112c:	fe 01       	movw	r30, r28
    112e:	ed 57       	subi	r30, 0x7D	; 125
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	80 83       	st	Z, r24
    113a:	64 c0       	rjmp	.+200    	; 0x1204 <APP_voidPass_User_checker+0x2aa>
	else if (__tmp > 65535)
    113c:	fe 01       	movw	r30, r28
    113e:	eb 57       	subi	r30, 0x7B	; 123
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	60 81       	ld	r22, Z
    1144:	71 81       	ldd	r23, Z+1	; 0x01
    1146:	82 81       	ldd	r24, Z+2	; 0x02
    1148:	93 81       	ldd	r25, Z+3	; 0x03
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	3f ef       	ldi	r19, 0xFF	; 255
    114e:	4f e7       	ldi	r20, 0x7F	; 127
    1150:	57 e4       	ldi	r21, 0x47	; 71
    1152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1156:	18 16       	cp	r1, r24
    1158:	0c f0       	brlt	.+2      	; 0x115c <APP_voidPass_User_checker+0x202>
    115a:	43 c0       	rjmp	.+134    	; 0x11e2 <APP_voidPass_User_checker+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    115c:	fe 01       	movw	r30, r28
    115e:	e7 57       	subi	r30, 0x77	; 119
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	60 81       	ld	r22, Z
    1164:	71 81       	ldd	r23, Z+1	; 0x01
    1166:	82 81       	ldd	r24, Z+2	; 0x02
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	20 e0       	ldi	r18, 0x00	; 0
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	40 e2       	ldi	r20, 0x20	; 32
    1170:	51 e4       	ldi	r21, 0x41	; 65
    1172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	8e 01       	movw	r16, r28
    117c:	0d 57       	subi	r16, 0x7D	; 125
    117e:	1f 4f       	sbci	r17, 0xFF	; 255
    1180:	bc 01       	movw	r22, r24
    1182:	cd 01       	movw	r24, r26
    1184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	f8 01       	movw	r30, r16
    118e:	91 83       	std	Z+1, r25	; 0x01
    1190:	80 83       	st	Z, r24
    1192:	1f c0       	rjmp	.+62     	; 0x11d2 <APP_voidPass_User_checker+0x278>
    1194:	fe 01       	movw	r30, r28
    1196:	ef 57       	subi	r30, 0x7F	; 127
    1198:	ff 4f       	sbci	r31, 0xFF	; 255
    119a:	88 ec       	ldi	r24, 0xC8	; 200
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11a2:	fe 01       	movw	r30, r28
    11a4:	ef 57       	subi	r30, 0x7F	; 127
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	91 81       	ldd	r25, Z+1	; 0x01
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <APP_voidPass_User_checker+0x252>
    11b0:	fe 01       	movw	r30, r28
    11b2:	ef 57       	subi	r30, 0x7F	; 127
    11b4:	ff 4f       	sbci	r31, 0xFF	; 255
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ba:	de 01       	movw	r26, r28
    11bc:	ad 57       	subi	r26, 0x7D	; 125
    11be:	bf 4f       	sbci	r27, 0xFF	; 255
    11c0:	fe 01       	movw	r30, r28
    11c2:	ed 57       	subi	r30, 0x7D	; 125
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	80 81       	ld	r24, Z
    11c8:	91 81       	ldd	r25, Z+1	; 0x01
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	11 96       	adiw	r26, 0x01	; 1
    11ce:	9c 93       	st	X, r25
    11d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11d2:	fe 01       	movw	r30, r28
    11d4:	ed 57       	subi	r30, 0x7D	; 125
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	d1 f6       	brne	.-76     	; 0x1194 <APP_voidPass_User_checker+0x23a>
    11e0:	69 c5       	rjmp	.+2770   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e2:	8e 01       	movw	r16, r28
    11e4:	0d 57       	subi	r16, 0x7D	; 125
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	fe 01       	movw	r30, r28
    11ea:	eb 57       	subi	r30, 0x7B	; 123
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	f8 01       	movw	r30, r16
    1200:	91 83       	std	Z+1, r25	; 0x01
    1202:	80 83       	st	Z, r24
    1204:	de 01       	movw	r26, r28
    1206:	a1 58       	subi	r26, 0x81	; 129
    1208:	bf 4f       	sbci	r27, 0xFF	; 255
    120a:	fe 01       	movw	r30, r28
    120c:	ed 57       	subi	r30, 0x7D	; 125
    120e:	ff 4f       	sbci	r31, 0xFF	; 255
    1210:	80 81       	ld	r24, Z
    1212:	91 81       	ldd	r25, Z+1	; 0x01
    1214:	11 96       	adiw	r26, 0x01	; 1
    1216:	9c 93       	st	X, r25
    1218:	8e 93       	st	-X, r24
    121a:	fe 01       	movw	r30, r28
    121c:	e1 58       	subi	r30, 0x81	; 129
    121e:	ff 4f       	sbci	r31, 0xFF	; 255
    1220:	80 81       	ld	r24, Z
    1222:	91 81       	ldd	r25, Z+1	; 0x01
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <APP_voidPass_User_checker+0x2ca>
    1228:	fe 01       	movw	r30, r28
    122a:	e1 58       	subi	r30, 0x81	; 129
    122c:	ff 4f       	sbci	r31, 0xFF	; 255
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	80 83       	st	Z, r24
    1232:	40 c5       	rjmp	.+2688   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(30);
		break;
	case '1':
		USART_voidWriteData('1');
    1234:	81 e3       	ldi	r24, 0x31	; 49
    1236:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    123a:	fe 01       	movw	r30, r28
    123c:	e5 58       	subi	r30, 0x85	; 133
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	a0 ea       	ldi	r26, 0xA0	; 160
    1246:	b1 e4       	ldi	r27, 0x41	; 65
    1248:	80 83       	st	Z, r24
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	a2 83       	std	Z+2, r26	; 0x02
    124e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	8e 01       	movw	r16, r28
    1252:	09 58       	subi	r16, 0x89	; 137
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	fe 01       	movw	r30, r28
    1258:	e5 58       	subi	r30, 0x85	; 133
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	4a ef       	ldi	r20, 0xFA	; 250
    126a:	54 e4       	ldi	r21, 0x44	; 68
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	a2 83       	std	Z+2, r26	; 0x02
    127c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127e:	fe 01       	movw	r30, r28
    1280:	e9 58       	subi	r30, 0x89	; 137
    1282:	ff 4f       	sbci	r31, 0xFF	; 255
    1284:	60 81       	ld	r22, Z
    1286:	71 81       	ldd	r23, Z+1	; 0x01
    1288:	82 81       	ldd	r24, Z+2	; 0x02
    128a:	93 81       	ldd	r25, Z+3	; 0x03
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1298:	88 23       	and	r24, r24
    129a:	44 f4       	brge	.+16     	; 0x12ac <APP_voidPass_User_checker+0x352>
		__ticks = 1;
    129c:	fe 01       	movw	r30, r28
    129e:	eb 58       	subi	r30, 0x8B	; 139
    12a0:	ff 4f       	sbci	r31, 0xFF	; 255
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	91 83       	std	Z+1, r25	; 0x01
    12a8:	80 83       	st	Z, r24
    12aa:	64 c0       	rjmp	.+200    	; 0x1374 <APP_voidPass_User_checker+0x41a>
	else if (__tmp > 65535)
    12ac:	fe 01       	movw	r30, r28
    12ae:	e9 58       	subi	r30, 0x89	; 137
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	4f e7       	ldi	r20, 0x7F	; 127
    12c0:	57 e4       	ldi	r21, 0x47	; 71
    12c2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12c6:	18 16       	cp	r1, r24
    12c8:	0c f0       	brlt	.+2      	; 0x12cc <APP_voidPass_User_checker+0x372>
    12ca:	43 c0       	rjmp	.+134    	; 0x1352 <APP_voidPass_User_checker+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12cc:	fe 01       	movw	r30, r28
    12ce:	e5 58       	subi	r30, 0x85	; 133
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	60 81       	ld	r22, Z
    12d4:	71 81       	ldd	r23, Z+1	; 0x01
    12d6:	82 81       	ldd	r24, Z+2	; 0x02
    12d8:	93 81       	ldd	r25, Z+3	; 0x03
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	40 e2       	ldi	r20, 0x20	; 32
    12e0:	51 e4       	ldi	r21, 0x41	; 65
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	8e 01       	movw	r16, r28
    12ec:	0b 58       	subi	r16, 0x8B	; 139
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	bc 01       	movw	r22, r24
    12f2:	cd 01       	movw	r24, r26
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	f8 01       	movw	r30, r16
    12fe:	91 83       	std	Z+1, r25	; 0x01
    1300:	80 83       	st	Z, r24
    1302:	1f c0       	rjmp	.+62     	; 0x1342 <APP_voidPass_User_checker+0x3e8>
    1304:	fe 01       	movw	r30, r28
    1306:	ed 58       	subi	r30, 0x8D	; 141
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	88 ec       	ldi	r24, 0xC8	; 200
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	91 83       	std	Z+1, r25	; 0x01
    1310:	80 83       	st	Z, r24
    1312:	fe 01       	movw	r30, r28
    1314:	ed 58       	subi	r30, 0x8D	; 141
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 81       	ld	r24, Z
    131a:	91 81       	ldd	r25, Z+1	; 0x01
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	f1 f7       	brne	.-4      	; 0x131c <APP_voidPass_User_checker+0x3c2>
    1320:	fe 01       	movw	r30, r28
    1322:	ed 58       	subi	r30, 0x8D	; 141
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	91 83       	std	Z+1, r25	; 0x01
    1328:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    132a:	de 01       	movw	r26, r28
    132c:	ab 58       	subi	r26, 0x8B	; 139
    132e:	bf 4f       	sbci	r27, 0xFF	; 255
    1330:	fe 01       	movw	r30, r28
    1332:	eb 58       	subi	r30, 0x8B	; 139
    1334:	ff 4f       	sbci	r31, 0xFF	; 255
    1336:	80 81       	ld	r24, Z
    1338:	91 81       	ldd	r25, Z+1	; 0x01
    133a:	01 97       	sbiw	r24, 0x01	; 1
    133c:	11 96       	adiw	r26, 0x01	; 1
    133e:	9c 93       	st	X, r25
    1340:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1342:	fe 01       	movw	r30, r28
    1344:	eb 58       	subi	r30, 0x8B	; 139
    1346:	ff 4f       	sbci	r31, 0xFF	; 255
    1348:	80 81       	ld	r24, Z
    134a:	91 81       	ldd	r25, Z+1	; 0x01
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	d1 f6       	brne	.-76     	; 0x1304 <APP_voidPass_User_checker+0x3aa>
    1350:	b1 c4       	rjmp	.+2402   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1352:	8e 01       	movw	r16, r28
    1354:	0b 58       	subi	r16, 0x8B	; 139
    1356:	1f 4f       	sbci	r17, 0xFF	; 255
    1358:	fe 01       	movw	r30, r28
    135a:	e9 58       	subi	r30, 0x89	; 137
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	f8 01       	movw	r30, r16
    1370:	91 83       	std	Z+1, r25	; 0x01
    1372:	80 83       	st	Z, r24
    1374:	de 01       	movw	r26, r28
    1376:	af 58       	subi	r26, 0x8F	; 143
    1378:	bf 4f       	sbci	r27, 0xFF	; 255
    137a:	fe 01       	movw	r30, r28
    137c:	eb 58       	subi	r30, 0x8B	; 139
    137e:	ff 4f       	sbci	r31, 0xFF	; 255
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	11 96       	adiw	r26, 0x01	; 1
    1386:	9c 93       	st	X, r25
    1388:	8e 93       	st	-X, r24
    138a:	fe 01       	movw	r30, r28
    138c:	ef 58       	subi	r30, 0x8F	; 143
    138e:	ff 4f       	sbci	r31, 0xFF	; 255
    1390:	80 81       	ld	r24, Z
    1392:	91 81       	ldd	r25, Z+1	; 0x01
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <APP_voidPass_User_checker+0x43a>
    1398:	fe 01       	movw	r30, r28
    139a:	ef 58       	subi	r30, 0x8F	; 143
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	91 83       	std	Z+1, r25	; 0x01
    13a0:	80 83       	st	Z, r24
    13a2:	88 c4       	rjmp	.+2320   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(20);
		break;
	case '2':
		USART_voidWriteData('2');
    13a4:	82 e3       	ldi	r24, 0x32	; 50
    13a6:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    13aa:	fe 01       	movw	r30, r28
    13ac:	e3 59       	subi	r30, 0x93	; 147
    13ae:	ff 4f       	sbci	r31, 0xFF	; 255
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	a0 ef       	ldi	r26, 0xF0	; 240
    13b6:	b1 e4       	ldi	r27, 0x41	; 65
    13b8:	80 83       	st	Z, r24
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	a2 83       	std	Z+2, r26	; 0x02
    13be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c0:	8e 01       	movw	r16, r28
    13c2:	07 59       	subi	r16, 0x97	; 151
    13c4:	1f 4f       	sbci	r17, 0xFF	; 255
    13c6:	fe 01       	movw	r30, r28
    13c8:	e3 59       	subi	r30, 0x93	; 147
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	60 81       	ld	r22, Z
    13ce:	71 81       	ldd	r23, Z+1	; 0x01
    13d0:	82 81       	ldd	r24, Z+2	; 0x02
    13d2:	93 81       	ldd	r25, Z+3	; 0x03
    13d4:	20 e0       	ldi	r18, 0x00	; 0
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	4a ef       	ldi	r20, 0xFA	; 250
    13da:	54 e4       	ldi	r21, 0x44	; 68
    13dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e0:	dc 01       	movw	r26, r24
    13e2:	cb 01       	movw	r24, r22
    13e4:	f8 01       	movw	r30, r16
    13e6:	80 83       	st	Z, r24
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	a2 83       	std	Z+2, r26	; 0x02
    13ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    13ee:	fe 01       	movw	r30, r28
    13f0:	e7 59       	subi	r30, 0x97	; 151
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e8       	ldi	r20, 0x80	; 128
    1402:	5f e3       	ldi	r21, 0x3F	; 63
    1404:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1408:	88 23       	and	r24, r24
    140a:	44 f4       	brge	.+16     	; 0x141c <APP_voidPass_User_checker+0x4c2>
		__ticks = 1;
    140c:	fe 01       	movw	r30, r28
    140e:	e9 59       	subi	r30, 0x99	; 153
    1410:	ff 4f       	sbci	r31, 0xFF	; 255
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	91 83       	std	Z+1, r25	; 0x01
    1418:	80 83       	st	Z, r24
    141a:	64 c0       	rjmp	.+200    	; 0x14e4 <APP_voidPass_User_checker+0x58a>
	else if (__tmp > 65535)
    141c:	fe 01       	movw	r30, r28
    141e:	e7 59       	subi	r30, 0x97	; 151
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	3f ef       	ldi	r19, 0xFF	; 255
    142e:	4f e7       	ldi	r20, 0x7F	; 127
    1430:	57 e4       	ldi	r21, 0x47	; 71
    1432:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1436:	18 16       	cp	r1, r24
    1438:	0c f0       	brlt	.+2      	; 0x143c <APP_voidPass_User_checker+0x4e2>
    143a:	43 c0       	rjmp	.+134    	; 0x14c2 <APP_voidPass_User_checker+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143c:	fe 01       	movw	r30, r28
    143e:	e3 59       	subi	r30, 0x93	; 147
    1440:	ff 4f       	sbci	r31, 0xFF	; 255
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	40 e2       	ldi	r20, 0x20	; 32
    1450:	51 e4       	ldi	r21, 0x41	; 65
    1452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	8e 01       	movw	r16, r28
    145c:	09 59       	subi	r16, 0x99	; 153
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	f8 01       	movw	r30, r16
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24
    1472:	1f c0       	rjmp	.+62     	; 0x14b2 <APP_voidPass_User_checker+0x558>
    1474:	fe 01       	movw	r30, r28
    1476:	eb 59       	subi	r30, 0x9B	; 155
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	88 ec       	ldi	r24, 0xC8	; 200
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	91 83       	std	Z+1, r25	; 0x01
    1480:	80 83       	st	Z, r24
    1482:	fe 01       	movw	r30, r28
    1484:	eb 59       	subi	r30, 0x9B	; 155
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 81       	ld	r24, Z
    148a:	91 81       	ldd	r25, Z+1	; 0x01
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <APP_voidPass_User_checker+0x532>
    1490:	fe 01       	movw	r30, r28
    1492:	eb 59       	subi	r30, 0x9B	; 155
    1494:	ff 4f       	sbci	r31, 0xFF	; 255
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    149a:	de 01       	movw	r26, r28
    149c:	a9 59       	subi	r26, 0x99	; 153
    149e:	bf 4f       	sbci	r27, 0xFF	; 255
    14a0:	fe 01       	movw	r30, r28
    14a2:	e9 59       	subi	r30, 0x99	; 153
    14a4:	ff 4f       	sbci	r31, 0xFF	; 255
    14a6:	80 81       	ld	r24, Z
    14a8:	91 81       	ldd	r25, Z+1	; 0x01
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	11 96       	adiw	r26, 0x01	; 1
    14ae:	9c 93       	st	X, r25
    14b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14b2:	fe 01       	movw	r30, r28
    14b4:	e9 59       	subi	r30, 0x99	; 153
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	80 81       	ld	r24, Z
    14ba:	91 81       	ldd	r25, Z+1	; 0x01
    14bc:	00 97       	sbiw	r24, 0x00	; 0
    14be:	d1 f6       	brne	.-76     	; 0x1474 <APP_voidPass_User_checker+0x51a>
    14c0:	f9 c3       	rjmp	.+2034   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14c2:	8e 01       	movw	r16, r28
    14c4:	09 59       	subi	r16, 0x99	; 153
    14c6:	1f 4f       	sbci	r17, 0xFF	; 255
    14c8:	fe 01       	movw	r30, r28
    14ca:	e7 59       	subi	r30, 0x97	; 151
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	60 81       	ld	r22, Z
    14d0:	71 81       	ldd	r23, Z+1	; 0x01
    14d2:	82 81       	ldd	r24, Z+2	; 0x02
    14d4:	93 81       	ldd	r25, Z+3	; 0x03
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	f8 01       	movw	r30, r16
    14e0:	91 83       	std	Z+1, r25	; 0x01
    14e2:	80 83       	st	Z, r24
    14e4:	de 01       	movw	r26, r28
    14e6:	ad 59       	subi	r26, 0x9D	; 157
    14e8:	bf 4f       	sbci	r27, 0xFF	; 255
    14ea:	fe 01       	movw	r30, r28
    14ec:	e9 59       	subi	r30, 0x99	; 153
    14ee:	ff 4f       	sbci	r31, 0xFF	; 255
    14f0:	80 81       	ld	r24, Z
    14f2:	91 81       	ldd	r25, Z+1	; 0x01
    14f4:	11 96       	adiw	r26, 0x01	; 1
    14f6:	9c 93       	st	X, r25
    14f8:	8e 93       	st	-X, r24
    14fa:	fe 01       	movw	r30, r28
    14fc:	ed 59       	subi	r30, 0x9D	; 157
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	91 81       	ldd	r25, Z+1	; 0x01
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	f1 f7       	brne	.-4      	; 0x1504 <APP_voidPass_User_checker+0x5aa>
    1508:	fe 01       	movw	r30, r28
    150a:	ed 59       	subi	r30, 0x9D	; 157
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	91 83       	std	Z+1, r25	; 0x01
    1510:	80 83       	st	Z, r24
    1512:	d0 c3       	rjmp	.+1952   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(30);
		break;
	case '3':
		USART_voidWriteData('3');
    1514:	83 e3       	ldi	r24, 0x33	; 51
    1516:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    151a:	fe 01       	movw	r30, r28
    151c:	e1 5a       	subi	r30, 0xA1	; 161
    151e:	ff 4f       	sbci	r31, 0xFF	; 255
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a0 ef       	ldi	r26, 0xF0	; 240
    1526:	b1 e4       	ldi	r27, 0x41	; 65
    1528:	80 83       	st	Z, r24
    152a:	91 83       	std	Z+1, r25	; 0x01
    152c:	a2 83       	std	Z+2, r26	; 0x02
    152e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1530:	8e 01       	movw	r16, r28
    1532:	05 5a       	subi	r16, 0xA5	; 165
    1534:	1f 4f       	sbci	r17, 0xFF	; 255
    1536:	fe 01       	movw	r30, r28
    1538:	e1 5a       	subi	r30, 0xA1	; 161
    153a:	ff 4f       	sbci	r31, 0xFF	; 255
    153c:	60 81       	ld	r22, Z
    153e:	71 81       	ldd	r23, Z+1	; 0x01
    1540:	82 81       	ldd	r24, Z+2	; 0x02
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	4a ef       	ldi	r20, 0xFA	; 250
    154a:	54 e4       	ldi	r21, 0x44	; 68
    154c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1550:	dc 01       	movw	r26, r24
    1552:	cb 01       	movw	r24, r22
    1554:	f8 01       	movw	r30, r16
    1556:	80 83       	st	Z, r24
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	a2 83       	std	Z+2, r26	; 0x02
    155c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    155e:	fe 01       	movw	r30, r28
    1560:	e5 5a       	subi	r30, 0xA5	; 165
    1562:	ff 4f       	sbci	r31, 0xFF	; 255
    1564:	60 81       	ld	r22, Z
    1566:	71 81       	ldd	r23, Z+1	; 0x01
    1568:	82 81       	ldd	r24, Z+2	; 0x02
    156a:	93 81       	ldd	r25, Z+3	; 0x03
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	5f e3       	ldi	r21, 0x3F	; 63
    1574:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1578:	88 23       	and	r24, r24
    157a:	44 f4       	brge	.+16     	; 0x158c <APP_voidPass_User_checker+0x632>
		__ticks = 1;
    157c:	fe 01       	movw	r30, r28
    157e:	e7 5a       	subi	r30, 0xA7	; 167
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	91 83       	std	Z+1, r25	; 0x01
    1588:	80 83       	st	Z, r24
    158a:	64 c0       	rjmp	.+200    	; 0x1654 <APP_voidPass_User_checker+0x6fa>
	else if (__tmp > 65535)
    158c:	fe 01       	movw	r30, r28
    158e:	e5 5a       	subi	r30, 0xA5	; 165
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	60 81       	ld	r22, Z
    1594:	71 81       	ldd	r23, Z+1	; 0x01
    1596:	82 81       	ldd	r24, Z+2	; 0x02
    1598:	93 81       	ldd	r25, Z+3	; 0x03
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	3f ef       	ldi	r19, 0xFF	; 255
    159e:	4f e7       	ldi	r20, 0x7F	; 127
    15a0:	57 e4       	ldi	r21, 0x47	; 71
    15a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15a6:	18 16       	cp	r1, r24
    15a8:	0c f0       	brlt	.+2      	; 0x15ac <APP_voidPass_User_checker+0x652>
    15aa:	43 c0       	rjmp	.+134    	; 0x1632 <APP_voidPass_User_checker+0x6d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ac:	fe 01       	movw	r30, r28
    15ae:	e1 5a       	subi	r30, 0xA1	; 161
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	60 81       	ld	r22, Z
    15b4:	71 81       	ldd	r23, Z+1	; 0x01
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	93 81       	ldd	r25, Z+3	; 0x03
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e2       	ldi	r20, 0x20	; 32
    15c0:	51 e4       	ldi	r21, 0x41	; 65
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	8e 01       	movw	r16, r28
    15cc:	07 5a       	subi	r16, 0xA7	; 167
    15ce:	1f 4f       	sbci	r17, 0xFF	; 255
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	f8 01       	movw	r30, r16
    15de:	91 83       	std	Z+1, r25	; 0x01
    15e0:	80 83       	st	Z, r24
    15e2:	1f c0       	rjmp	.+62     	; 0x1622 <APP_voidPass_User_checker+0x6c8>
    15e4:	fe 01       	movw	r30, r28
    15e6:	e9 5a       	subi	r30, 0xA9	; 169
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	88 ec       	ldi	r24, 0xC8	; 200
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	91 83       	std	Z+1, r25	; 0x01
    15f0:	80 83       	st	Z, r24
    15f2:	fe 01       	movw	r30, r28
    15f4:	e9 5a       	subi	r30, 0xA9	; 169
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	80 81       	ld	r24, Z
    15fa:	91 81       	ldd	r25, Z+1	; 0x01
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <APP_voidPass_User_checker+0x6a2>
    1600:	fe 01       	movw	r30, r28
    1602:	e9 5a       	subi	r30, 0xA9	; 169
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160a:	de 01       	movw	r26, r28
    160c:	a7 5a       	subi	r26, 0xA7	; 167
    160e:	bf 4f       	sbci	r27, 0xFF	; 255
    1610:	fe 01       	movw	r30, r28
    1612:	e7 5a       	subi	r30, 0xA7	; 167
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	80 81       	ld	r24, Z
    1618:	91 81       	ldd	r25, Z+1	; 0x01
    161a:	01 97       	sbiw	r24, 0x01	; 1
    161c:	11 96       	adiw	r26, 0x01	; 1
    161e:	9c 93       	st	X, r25
    1620:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1622:	fe 01       	movw	r30, r28
    1624:	e7 5a       	subi	r30, 0xA7	; 167
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 81       	ld	r24, Z
    162a:	91 81       	ldd	r25, Z+1	; 0x01
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	d1 f6       	brne	.-76     	; 0x15e4 <APP_voidPass_User_checker+0x68a>
    1630:	41 c3       	rjmp	.+1666   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1632:	8e 01       	movw	r16, r28
    1634:	07 5a       	subi	r16, 0xA7	; 167
    1636:	1f 4f       	sbci	r17, 0xFF	; 255
    1638:	fe 01       	movw	r30, r28
    163a:	e5 5a       	subi	r30, 0xA5	; 165
    163c:	ff 4f       	sbci	r31, 0xFF	; 255
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	f8 01       	movw	r30, r16
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	de 01       	movw	r26, r28
    1656:	ab 5a       	subi	r26, 0xAB	; 171
    1658:	bf 4f       	sbci	r27, 0xFF	; 255
    165a:	fe 01       	movw	r30, r28
    165c:	e7 5a       	subi	r30, 0xA7	; 167
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	80 81       	ld	r24, Z
    1662:	91 81       	ldd	r25, Z+1	; 0x01
    1664:	11 96       	adiw	r26, 0x01	; 1
    1666:	9c 93       	st	X, r25
    1668:	8e 93       	st	-X, r24
    166a:	fe 01       	movw	r30, r28
    166c:	eb 5a       	subi	r30, 0xAB	; 171
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <APP_voidPass_User_checker+0x71a>
    1678:	fe 01       	movw	r30, r28
    167a:	eb 5a       	subi	r30, 0xAB	; 171
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	91 83       	std	Z+1, r25	; 0x01
    1680:	80 83       	st	Z, r24
    1682:	18 c3       	rjmp	.+1584   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(30);
		break;
	case '4':
		USART_voidWriteData('4');
    1684:	84 e3       	ldi	r24, 0x34	; 52
    1686:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    168a:	fe 01       	movw	r30, r28
    168c:	ef 5a       	subi	r30, 0xAF	; 175
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	a0 ef       	ldi	r26, 0xF0	; 240
    1696:	b1 e4       	ldi	r27, 0x41	; 65
    1698:	80 83       	st	Z, r24
    169a:	91 83       	std	Z+1, r25	; 0x01
    169c:	a2 83       	std	Z+2, r26	; 0x02
    169e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a0:	8e 01       	movw	r16, r28
    16a2:	03 5b       	subi	r16, 0xB3	; 179
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	fe 01       	movw	r30, r28
    16a8:	ef 5a       	subi	r30, 0xAF	; 175
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	60 81       	ld	r22, Z
    16ae:	71 81       	ldd	r23, Z+1	; 0x01
    16b0:	82 81       	ldd	r24, Z+2	; 0x02
    16b2:	93 81       	ldd	r25, Z+3	; 0x03
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	f8 01       	movw	r30, r16
    16c6:	80 83       	st	Z, r24
    16c8:	91 83       	std	Z+1, r25	; 0x01
    16ca:	a2 83       	std	Z+2, r26	; 0x02
    16cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16ce:	fe 01       	movw	r30, r28
    16d0:	e3 5b       	subi	r30, 0xB3	; 179
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	60 81       	ld	r22, Z
    16d6:	71 81       	ldd	r23, Z+1	; 0x01
    16d8:	82 81       	ldd	r24, Z+2	; 0x02
    16da:	93 81       	ldd	r25, Z+3	; 0x03
    16dc:	20 e0       	ldi	r18, 0x00	; 0
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	40 e8       	ldi	r20, 0x80	; 128
    16e2:	5f e3       	ldi	r21, 0x3F	; 63
    16e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16e8:	88 23       	and	r24, r24
    16ea:	44 f4       	brge	.+16     	; 0x16fc <APP_voidPass_User_checker+0x7a2>
		__ticks = 1;
    16ec:	fe 01       	movw	r30, r28
    16ee:	e5 5b       	subi	r30, 0xB5	; 181
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	81 e0       	ldi	r24, 0x01	; 1
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	91 83       	std	Z+1, r25	; 0x01
    16f8:	80 83       	st	Z, r24
    16fa:	64 c0       	rjmp	.+200    	; 0x17c4 <APP_voidPass_User_checker+0x86a>
	else if (__tmp > 65535)
    16fc:	fe 01       	movw	r30, r28
    16fe:	e3 5b       	subi	r30, 0xB3	; 179
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	60 81       	ld	r22, Z
    1704:	71 81       	ldd	r23, Z+1	; 0x01
    1706:	82 81       	ldd	r24, Z+2	; 0x02
    1708:	93 81       	ldd	r25, Z+3	; 0x03
    170a:	20 e0       	ldi	r18, 0x00	; 0
    170c:	3f ef       	ldi	r19, 0xFF	; 255
    170e:	4f e7       	ldi	r20, 0x7F	; 127
    1710:	57 e4       	ldi	r21, 0x47	; 71
    1712:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1716:	18 16       	cp	r1, r24
    1718:	0c f0       	brlt	.+2      	; 0x171c <APP_voidPass_User_checker+0x7c2>
    171a:	43 c0       	rjmp	.+134    	; 0x17a2 <APP_voidPass_User_checker+0x848>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    171c:	fe 01       	movw	r30, r28
    171e:	ef 5a       	subi	r30, 0xAF	; 175
    1720:	ff 4f       	sbci	r31, 0xFF	; 255
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	40 e2       	ldi	r20, 0x20	; 32
    1730:	51 e4       	ldi	r21, 0x41	; 65
    1732:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	8e 01       	movw	r16, r28
    173c:	05 5b       	subi	r16, 0xB5	; 181
    173e:	1f 4f       	sbci	r17, 0xFF	; 255
    1740:	bc 01       	movw	r22, r24
    1742:	cd 01       	movw	r24, r26
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	f8 01       	movw	r30, r16
    174e:	91 83       	std	Z+1, r25	; 0x01
    1750:	80 83       	st	Z, r24
    1752:	1f c0       	rjmp	.+62     	; 0x1792 <APP_voidPass_User_checker+0x838>
    1754:	fe 01       	movw	r30, r28
    1756:	e7 5b       	subi	r30, 0xB7	; 183
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	88 ec       	ldi	r24, 0xC8	; 200
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	91 83       	std	Z+1, r25	; 0x01
    1760:	80 83       	st	Z, r24
    1762:	fe 01       	movw	r30, r28
    1764:	e7 5b       	subi	r30, 0xB7	; 183
    1766:	ff 4f       	sbci	r31, 0xFF	; 255
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <APP_voidPass_User_checker+0x812>
    1770:	fe 01       	movw	r30, r28
    1772:	e7 5b       	subi	r30, 0xB7	; 183
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177a:	de 01       	movw	r26, r28
    177c:	a5 5b       	subi	r26, 0xB5	; 181
    177e:	bf 4f       	sbci	r27, 0xFF	; 255
    1780:	fe 01       	movw	r30, r28
    1782:	e5 5b       	subi	r30, 0xB5	; 181
    1784:	ff 4f       	sbci	r31, 0xFF	; 255
    1786:	80 81       	ld	r24, Z
    1788:	91 81       	ldd	r25, Z+1	; 0x01
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	11 96       	adiw	r26, 0x01	; 1
    178e:	9c 93       	st	X, r25
    1790:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1792:	fe 01       	movw	r30, r28
    1794:	e5 5b       	subi	r30, 0xB5	; 181
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	80 81       	ld	r24, Z
    179a:	91 81       	ldd	r25, Z+1	; 0x01
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	d1 f6       	brne	.-76     	; 0x1754 <APP_voidPass_User_checker+0x7fa>
    17a0:	89 c2       	rjmp	.+1298   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a2:	8e 01       	movw	r16, r28
    17a4:	05 5b       	subi	r16, 0xB5	; 181
    17a6:	1f 4f       	sbci	r17, 0xFF	; 255
    17a8:	fe 01       	movw	r30, r28
    17aa:	e3 5b       	subi	r30, 0xB3	; 179
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	60 81       	ld	r22, Z
    17b0:	71 81       	ldd	r23, Z+1	; 0x01
    17b2:	82 81       	ldd	r24, Z+2	; 0x02
    17b4:	93 81       	ldd	r25, Z+3	; 0x03
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	f8 01       	movw	r30, r16
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	de 01       	movw	r26, r28
    17c6:	a9 5b       	subi	r26, 0xB9	; 185
    17c8:	bf 4f       	sbci	r27, 0xFF	; 255
    17ca:	fe 01       	movw	r30, r28
    17cc:	e5 5b       	subi	r30, 0xB5	; 181
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	91 81       	ldd	r25, Z+1	; 0x01
    17d4:	11 96       	adiw	r26, 0x01	; 1
    17d6:	9c 93       	st	X, r25
    17d8:	8e 93       	st	-X, r24
    17da:	fe 01       	movw	r30, r28
    17dc:	e9 5b       	subi	r30, 0xB9	; 185
    17de:	ff 4f       	sbci	r31, 0xFF	; 255
    17e0:	80 81       	ld	r24, Z
    17e2:	91 81       	ldd	r25, Z+1	; 0x01
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <APP_voidPass_User_checker+0x88a>
    17e8:	fe 01       	movw	r30, r28
    17ea:	e9 5b       	subi	r30, 0xB9	; 185
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	91 83       	std	Z+1, r25	; 0x01
    17f0:	80 83       	st	Z, r24
    17f2:	60 c2       	rjmp	.+1216   	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(30);
		break;
	case '5':
		USART_voidWriteData('5');
    17f4:	85 e3       	ldi	r24, 0x35	; 53
    17f6:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    17fa:	fe 01       	movw	r30, r28
    17fc:	ed 5b       	subi	r30, 0xBD	; 189
    17fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a0 ef       	ldi	r26, 0xF0	; 240
    1806:	b1 e4       	ldi	r27, 0x41	; 65
    1808:	80 83       	st	Z, r24
    180a:	91 83       	std	Z+1, r25	; 0x01
    180c:	a2 83       	std	Z+2, r26	; 0x02
    180e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1810:	8e 01       	movw	r16, r28
    1812:	01 5c       	subi	r16, 0xC1	; 193
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	fe 01       	movw	r30, r28
    1818:	ed 5b       	subi	r30, 0xBD	; 189
    181a:	ff 4f       	sbci	r31, 0xFF	; 255
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	4a ef       	ldi	r20, 0xFA	; 250
    182a:	54 e4       	ldi	r21, 0x44	; 68
    182c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	f8 01       	movw	r30, r16
    1836:	80 83       	st	Z, r24
    1838:	91 83       	std	Z+1, r25	; 0x01
    183a:	a2 83       	std	Z+2, r26	; 0x02
    183c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    183e:	fe 01       	movw	r30, r28
    1840:	ff 96       	adiw	r30, 0x3f	; 63
    1842:	60 81       	ld	r22, Z
    1844:	71 81       	ldd	r23, Z+1	; 0x01
    1846:	82 81       	ldd	r24, Z+2	; 0x02
    1848:	93 81       	ldd	r25, Z+3	; 0x03
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e8       	ldi	r20, 0x80	; 128
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1856:	88 23       	and	r24, r24
    1858:	2c f4       	brge	.+10     	; 0x1864 <APP_voidPass_User_checker+0x90a>
		__ticks = 1;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	9e af       	std	Y+62, r25	; 0x3e
    1860:	8d af       	std	Y+61, r24	; 0x3d
    1862:	46 c0       	rjmp	.+140    	; 0x18f0 <APP_voidPass_User_checker+0x996>
	else if (__tmp > 65535)
    1864:	fe 01       	movw	r30, r28
    1866:	ff 96       	adiw	r30, 0x3f	; 63
    1868:	60 81       	ld	r22, Z
    186a:	71 81       	ldd	r23, Z+1	; 0x01
    186c:	82 81       	ldd	r24, Z+2	; 0x02
    186e:	93 81       	ldd	r25, Z+3	; 0x03
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	64 f5       	brge	.+88     	; 0x18d8 <APP_voidPass_User_checker+0x97e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	fe 01       	movw	r30, r28
    1882:	ed 5b       	subi	r30, 0xBD	; 189
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	40 e2       	ldi	r20, 0x20	; 32
    1894:	51 e4       	ldi	r21, 0x41	; 65
    1896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189a:	dc 01       	movw	r26, r24
    189c:	cb 01       	movw	r24, r22
    189e:	bc 01       	movw	r22, r24
    18a0:	cd 01       	movw	r24, r26
    18a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	9e af       	std	Y+62, r25	; 0x3e
    18ac:	8d af       	std	Y+61, r24	; 0x3d
    18ae:	0f c0       	rjmp	.+30     	; 0x18ce <APP_voidPass_User_checker+0x974>
    18b0:	88 ec       	ldi	r24, 0xC8	; 200
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9c af       	std	Y+60, r25	; 0x3c
    18b6:	8b af       	std	Y+59, r24	; 0x3b
    18b8:	8b ad       	ldd	r24, Y+59	; 0x3b
    18ba:	9c ad       	ldd	r25, Y+60	; 0x3c
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <APP_voidPass_User_checker+0x962>
    18c0:	9c af       	std	Y+60, r25	; 0x3c
    18c2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    18c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	9e af       	std	Y+62, r25	; 0x3e
    18cc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    18d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	69 f7       	brne	.-38     	; 0x18b0 <APP_voidPass_User_checker+0x956>
    18d6:	ee c1       	rjmp	.+988    	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d8:	fe 01       	movw	r30, r28
    18da:	ff 96       	adiw	r30, 0x3f	; 63
    18dc:	60 81       	ld	r22, Z
    18de:	71 81       	ldd	r23, Z+1	; 0x01
    18e0:	82 81       	ldd	r24, Z+2	; 0x02
    18e2:	93 81       	ldd	r25, Z+3	; 0x03
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9e af       	std	Y+62, r25	; 0x3e
    18ee:	8d af       	std	Y+61, r24	; 0x3d
    18f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    18f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    18f4:	9a af       	std	Y+58, r25	; 0x3a
    18f6:	89 af       	std	Y+57, r24	; 0x39
    18f8:	89 ad       	ldd	r24, Y+57	; 0x39
    18fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <APP_voidPass_User_checker+0x9a2>
    1900:	9a af       	std	Y+58, r25	; 0x3a
    1902:	89 af       	std	Y+57, r24	; 0x39
    1904:	d7 c1       	rjmp	.+942    	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(30);
		break;
	case '6':
		USART_voidWriteData('6');
    1906:	86 e3       	ldi	r24, 0x36	; 54
    1908:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	a0 ef       	ldi	r26, 0xF0	; 240
    1912:	b1 e4       	ldi	r27, 0x41	; 65
    1914:	8d ab       	std	Y+53, r24	; 0x35
    1916:	9e ab       	std	Y+54, r25	; 0x36
    1918:	af ab       	std	Y+55, r26	; 0x37
    191a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    191c:	6d a9       	ldd	r22, Y+53	; 0x35
    191e:	7e a9       	ldd	r23, Y+54	; 0x36
    1920:	8f a9       	ldd	r24, Y+55	; 0x37
    1922:	98 ad       	ldd	r25, Y+56	; 0x38
    1924:	20 e0       	ldi	r18, 0x00	; 0
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	4a ef       	ldi	r20, 0xFA	; 250
    192a:	54 e4       	ldi	r21, 0x44	; 68
    192c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	89 ab       	std	Y+49, r24	; 0x31
    1936:	9a ab       	std	Y+50, r25	; 0x32
    1938:	ab ab       	std	Y+51, r26	; 0x33
    193a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    193c:	69 a9       	ldd	r22, Y+49	; 0x31
    193e:	7a a9       	ldd	r23, Y+50	; 0x32
    1940:	8b a9       	ldd	r24, Y+51	; 0x33
    1942:	9c a9       	ldd	r25, Y+52	; 0x34
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e8       	ldi	r20, 0x80	; 128
    194a:	5f e3       	ldi	r21, 0x3F	; 63
    194c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1950:	88 23       	and	r24, r24
    1952:	2c f4       	brge	.+10     	; 0x195e <APP_voidPass_User_checker+0xa04>
		__ticks = 1;
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	98 ab       	std	Y+48, r25	; 0x30
    195a:	8f a7       	std	Y+47, r24	; 0x2f
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <APP_voidPass_User_checker+0xa82>
	else if (__tmp > 65535)
    195e:	69 a9       	ldd	r22, Y+49	; 0x31
    1960:	7a a9       	ldd	r23, Y+50	; 0x32
    1962:	8b a9       	ldd	r24, Y+51	; 0x33
    1964:	9c a9       	ldd	r25, Y+52	; 0x34
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	3f ef       	ldi	r19, 0xFF	; 255
    196a:	4f e7       	ldi	r20, 0x7F	; 127
    196c:	57 e4       	ldi	r21, 0x47	; 71
    196e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1972:	18 16       	cp	r1, r24
    1974:	4c f5       	brge	.+82     	; 0x19c8 <APP_voidPass_User_checker+0xa6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1976:	6d a9       	ldd	r22, Y+53	; 0x35
    1978:	7e a9       	ldd	r23, Y+54	; 0x36
    197a:	8f a9       	ldd	r24, Y+55	; 0x37
    197c:	98 ad       	ldd	r25, Y+56	; 0x38
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e2       	ldi	r20, 0x20	; 32
    1984:	51 e4       	ldi	r21, 0x41	; 65
    1986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	bc 01       	movw	r22, r24
    1990:	cd 01       	movw	r24, r26
    1992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	98 ab       	std	Y+48, r25	; 0x30
    199c:	8f a7       	std	Y+47, r24	; 0x2f
    199e:	0f c0       	rjmp	.+30     	; 0x19be <APP_voidPass_User_checker+0xa64>
    19a0:	88 ec       	ldi	r24, 0xC8	; 200
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9e a7       	std	Y+46, r25	; 0x2e
    19a6:	8d a7       	std	Y+45, r24	; 0x2d
    19a8:	8d a5       	ldd	r24, Y+45	; 0x2d
    19aa:	9e a5       	ldd	r25, Y+46	; 0x2e
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <APP_voidPass_User_checker+0xa52>
    19b0:	9e a7       	std	Y+46, r25	; 0x2e
    19b2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19b6:	98 a9       	ldd	r25, Y+48	; 0x30
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	98 ab       	std	Y+48, r25	; 0x30
    19bc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19be:	8f a5       	ldd	r24, Y+47	; 0x2f
    19c0:	98 a9       	ldd	r25, Y+48	; 0x30
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	69 f7       	brne	.-38     	; 0x19a0 <APP_voidPass_User_checker+0xa46>
    19c6:	76 c1       	rjmp	.+748    	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19c8:	69 a9       	ldd	r22, Y+49	; 0x31
    19ca:	7a a9       	ldd	r23, Y+50	; 0x32
    19cc:	8b a9       	ldd	r24, Y+51	; 0x33
    19ce:	9c a9       	ldd	r25, Y+52	; 0x34
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	98 ab       	std	Y+48, r25	; 0x30
    19da:	8f a7       	std	Y+47, r24	; 0x2f
    19dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    19de:	98 a9       	ldd	r25, Y+48	; 0x30
    19e0:	9c a7       	std	Y+44, r25	; 0x2c
    19e2:	8b a7       	std	Y+43, r24	; 0x2b
    19e4:	8b a5       	ldd	r24, Y+43	; 0x2b
    19e6:	9c a5       	ldd	r25, Y+44	; 0x2c
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	f1 f7       	brne	.-4      	; 0x19e8 <APP_voidPass_User_checker+0xa8e>
    19ec:	9c a7       	std	Y+44, r25	; 0x2c
    19ee:	8b a7       	std	Y+43, r24	; 0x2b
    19f0:	61 c1       	rjmp	.+706    	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(30);
		break;
	case '7':
		USART_voidWriteData('7');
    19f2:	87 e3       	ldi	r24, 0x37	; 55
    19f4:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	a0 ef       	ldi	r26, 0xF0	; 240
    19fe:	b1 e4       	ldi	r27, 0x41	; 65
    1a00:	8f a3       	std	Y+39, r24	; 0x27
    1a02:	98 a7       	std	Y+40, r25	; 0x28
    1a04:	a9 a7       	std	Y+41, r26	; 0x29
    1a06:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a08:	6f a1       	ldd	r22, Y+39	; 0x27
    1a0a:	78 a5       	ldd	r23, Y+40	; 0x28
    1a0c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a0e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a10:	20 e0       	ldi	r18, 0x00	; 0
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	4a ef       	ldi	r20, 0xFA	; 250
    1a16:	54 e4       	ldi	r21, 0x44	; 68
    1a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	8b a3       	std	Y+35, r24	; 0x23
    1a22:	9c a3       	std	Y+36, r25	; 0x24
    1a24:	ad a3       	std	Y+37, r26	; 0x25
    1a26:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a28:	6b a1       	ldd	r22, Y+35	; 0x23
    1a2a:	7c a1       	ldd	r23, Y+36	; 0x24
    1a2c:	8d a1       	ldd	r24, Y+37	; 0x25
    1a2e:	9e a1       	ldd	r25, Y+38	; 0x26
    1a30:	20 e0       	ldi	r18, 0x00	; 0
    1a32:	30 e0       	ldi	r19, 0x00	; 0
    1a34:	40 e8       	ldi	r20, 0x80	; 128
    1a36:	5f e3       	ldi	r21, 0x3F	; 63
    1a38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a3c:	88 23       	and	r24, r24
    1a3e:	2c f4       	brge	.+10     	; 0x1a4a <APP_voidPass_User_checker+0xaf0>
		__ticks = 1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	9a a3       	std	Y+34, r25	; 0x22
    1a46:	89 a3       	std	Y+33, r24	; 0x21
    1a48:	3f c0       	rjmp	.+126    	; 0x1ac8 <APP_voidPass_User_checker+0xb6e>
	else if (__tmp > 65535)
    1a4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1a4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1a50:	9e a1       	ldd	r25, Y+38	; 0x26
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	3f ef       	ldi	r19, 0xFF	; 255
    1a56:	4f e7       	ldi	r20, 0x7F	; 127
    1a58:	57 e4       	ldi	r21, 0x47	; 71
    1a5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5e:	18 16       	cp	r1, r24
    1a60:	4c f5       	brge	.+82     	; 0x1ab4 <APP_voidPass_User_checker+0xb5a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a62:	6f a1       	ldd	r22, Y+39	; 0x27
    1a64:	78 a5       	ldd	r23, Y+40	; 0x28
    1a66:	89 a5       	ldd	r24, Y+41	; 0x29
    1a68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e2       	ldi	r20, 0x20	; 32
    1a70:	51 e4       	ldi	r21, 0x41	; 65
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	bc 01       	movw	r22, r24
    1a7c:	cd 01       	movw	r24, r26
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9a a3       	std	Y+34, r25	; 0x22
    1a88:	89 a3       	std	Y+33, r24	; 0x21
    1a8a:	0f c0       	rjmp	.+30     	; 0x1aaa <APP_voidPass_User_checker+0xb50>
    1a8c:	88 ec       	ldi	r24, 0xC8	; 200
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	98 a3       	std	Y+32, r25	; 0x20
    1a92:	8f 8f       	std	Y+31, r24	; 0x1f
    1a94:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a96:	98 a1       	ldd	r25, Y+32	; 0x20
    1a98:	01 97       	sbiw	r24, 0x01	; 1
    1a9a:	f1 f7       	brne	.-4      	; 0x1a98 <APP_voidPass_User_checker+0xb3e>
    1a9c:	98 a3       	std	Y+32, r25	; 0x20
    1a9e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa0:	89 a1       	ldd	r24, Y+33	; 0x21
    1aa2:	9a a1       	ldd	r25, Y+34	; 0x22
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	9a a3       	std	Y+34, r25	; 0x22
    1aa8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aaa:	89 a1       	ldd	r24, Y+33	; 0x21
    1aac:	9a a1       	ldd	r25, Y+34	; 0x22
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	69 f7       	brne	.-38     	; 0x1a8c <APP_voidPass_User_checker+0xb32>
    1ab2:	00 c1       	rjmp	.+512    	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aba:	9e a1       	ldd	r25, Y+38	; 0x26
    1abc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	9a a3       	std	Y+34, r25	; 0x22
    1ac6:	89 a3       	std	Y+33, r24	; 0x21
    1ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    1aca:	9a a1       	ldd	r25, Y+34	; 0x22
    1acc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ace:	8d 8f       	std	Y+29, r24	; 0x1d
    1ad0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ad2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <APP_voidPass_User_checker+0xb7a>
    1ad8:	9e 8f       	std	Y+30, r25	; 0x1e
    1ada:	8d 8f       	std	Y+29, r24	; 0x1d
    1adc:	eb c0       	rjmp	.+470    	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(30);
		break;
	case '8':
		USART_voidWriteData('8');
    1ade:	88 e3       	ldi	r24, 0x38	; 56
    1ae0:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	a0 ef       	ldi	r26, 0xF0	; 240
    1aea:	b1 e4       	ldi	r27, 0x41	; 65
    1aec:	89 8f       	std	Y+25, r24	; 0x19
    1aee:	9a 8f       	std	Y+26, r25	; 0x1a
    1af0:	ab 8f       	std	Y+27, r26	; 0x1b
    1af2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1af4:	69 8d       	ldd	r22, Y+25	; 0x19
    1af6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1afc:	20 e0       	ldi	r18, 0x00	; 0
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	4a ef       	ldi	r20, 0xFA	; 250
    1b02:	54 e4       	ldi	r21, 0x44	; 68
    1b04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	8d 8b       	std	Y+21, r24	; 0x15
    1b0e:	9e 8b       	std	Y+22, r25	; 0x16
    1b10:	af 8b       	std	Y+23, r26	; 0x17
    1b12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b14:	6d 89       	ldd	r22, Y+21	; 0x15
    1b16:	7e 89       	ldd	r23, Y+22	; 0x16
    1b18:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	40 e8       	ldi	r20, 0x80	; 128
    1b22:	5f e3       	ldi	r21, 0x3F	; 63
    1b24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b28:	88 23       	and	r24, r24
    1b2a:	2c f4       	brge	.+10     	; 0x1b36 <APP_voidPass_User_checker+0xbdc>
		__ticks = 1;
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	9c 8b       	std	Y+20, r25	; 0x14
    1b32:	8b 8b       	std	Y+19, r24	; 0x13
    1b34:	3f c0       	rjmp	.+126    	; 0x1bb4 <APP_voidPass_User_checker+0xc5a>
	else if (__tmp > 65535)
    1b36:	6d 89       	ldd	r22, Y+21	; 0x15
    1b38:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	3f ef       	ldi	r19, 0xFF	; 255
    1b42:	4f e7       	ldi	r20, 0x7F	; 127
    1b44:	57 e4       	ldi	r21, 0x47	; 71
    1b46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4a:	18 16       	cp	r1, r24
    1b4c:	4c f5       	brge	.+82     	; 0x1ba0 <APP_voidPass_User_checker+0xc46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	40 e2       	ldi	r20, 0x20	; 32
    1b5c:	51 e4       	ldi	r21, 0x41	; 65
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	bc 01       	movw	r22, r24
    1b68:	cd 01       	movw	r24, r26
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	9c 8b       	std	Y+20, r25	; 0x14
    1b74:	8b 8b       	std	Y+19, r24	; 0x13
    1b76:	0f c0       	rjmp	.+30     	; 0x1b96 <APP_voidPass_User_checker+0xc3c>
    1b78:	88 ec       	ldi	r24, 0xC8	; 200
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	9a 8b       	std	Y+18, r25	; 0x12
    1b7e:	89 8b       	std	Y+17, r24	; 0x11
    1b80:	89 89       	ldd	r24, Y+17	; 0x11
    1b82:	9a 89       	ldd	r25, Y+18	; 0x12
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <APP_voidPass_User_checker+0xc2a>
    1b88:	9a 8b       	std	Y+18, r25	; 0x12
    1b8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b96:	8b 89       	ldd	r24, Y+19	; 0x13
    1b98:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	69 f7       	brne	.-38     	; 0x1b78 <APP_voidPass_User_checker+0xc1e>
    1b9e:	8a c0       	rjmp	.+276    	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9c 8b       	std	Y+20, r25	; 0x14
    1bb2:	8b 8b       	std	Y+19, r24	; 0x13
    1bb4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bb6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bb8:	98 8b       	std	Y+16, r25	; 0x10
    1bba:	8f 87       	std	Y+15, r24	; 0x0f
    1bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bbe:	98 89       	ldd	r25, Y+16	; 0x10
    1bc0:	01 97       	sbiw	r24, 0x01	; 1
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <APP_voidPass_User_checker+0xc66>
    1bc4:	98 8b       	std	Y+16, r25	; 0x10
    1bc6:	8f 87       	std	Y+15, r24	; 0x0f
    1bc8:	75 c0       	rjmp	.+234    	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
		_delay_ms(30);
		break;
	case '9':
		USART_voidWriteData('9');
    1bca:	89 e3       	ldi	r24, 0x39	; 57
    1bcc:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	90 e0       	ldi	r25, 0x00	; 0
    1bd4:	a0 ef       	ldi	r26, 0xF0	; 240
    1bd6:	b1 e4       	ldi	r27, 0x41	; 65
    1bd8:	8b 87       	std	Y+11, r24	; 0x0b
    1bda:	9c 87       	std	Y+12, r25	; 0x0c
    1bdc:	ad 87       	std	Y+13, r26	; 0x0d
    1bde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	4a ef       	ldi	r20, 0xFA	; 250
    1bee:	54 e4       	ldi	r21, 0x44	; 68
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	8f 83       	std	Y+7, r24	; 0x07
    1bfa:	98 87       	std	Y+8, r25	; 0x08
    1bfc:	a9 87       	std	Y+9, r26	; 0x09
    1bfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c00:	6f 81       	ldd	r22, Y+7	; 0x07
    1c02:	78 85       	ldd	r23, Y+8	; 0x08
    1c04:	89 85       	ldd	r24, Y+9	; 0x09
    1c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e8       	ldi	r20, 0x80	; 128
    1c0e:	5f e3       	ldi	r21, 0x3F	; 63
    1c10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c14:	88 23       	and	r24, r24
    1c16:	2c f4       	brge	.+10     	; 0x1c22 <APP_voidPass_User_checker+0xcc8>
		__ticks = 1;
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9e 83       	std	Y+6, r25	; 0x06
    1c1e:	8d 83       	std	Y+5, r24	; 0x05
    1c20:	3f c0       	rjmp	.+126    	; 0x1ca0 <APP_voidPass_User_checker+0xd46>
	else if (__tmp > 65535)
    1c22:	6f 81       	ldd	r22, Y+7	; 0x07
    1c24:	78 85       	ldd	r23, Y+8	; 0x08
    1c26:	89 85       	ldd	r24, Y+9	; 0x09
    1c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	3f ef       	ldi	r19, 0xFF	; 255
    1c2e:	4f e7       	ldi	r20, 0x7F	; 127
    1c30:	57 e4       	ldi	r21, 0x47	; 71
    1c32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c36:	18 16       	cp	r1, r24
    1c38:	4c f5       	brge	.+82     	; 0x1c8c <APP_voidPass_User_checker+0xd32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e2       	ldi	r20, 0x20	; 32
    1c48:	51 e4       	ldi	r21, 0x41	; 65
    1c4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	bc 01       	movw	r22, r24
    1c54:	cd 01       	movw	r24, r26
    1c56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	cb 01       	movw	r24, r22
    1c5e:	9e 83       	std	Y+6, r25	; 0x06
    1c60:	8d 83       	std	Y+5, r24	; 0x05
    1c62:	0f c0       	rjmp	.+30     	; 0x1c82 <APP_voidPass_User_checker+0xd28>
    1c64:	88 ec       	ldi	r24, 0xC8	; 200
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9c 83       	std	Y+4, r25	; 0x04
    1c6a:	8b 83       	std	Y+3, r24	; 0x03
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	01 97       	sbiw	r24, 0x01	; 1
    1c72:	f1 f7       	brne	.-4      	; 0x1c70 <APP_voidPass_User_checker+0xd16>
    1c74:	9c 83       	std	Y+4, r25	; 0x04
    1c76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c78:	8d 81       	ldd	r24, Y+5	; 0x05
    1c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	9e 83       	std	Y+6, r25	; 0x06
    1c80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	69 f7       	brne	.-38     	; 0x1c64 <APP_voidPass_User_checker+0xd0a>
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <APP_voidPass_User_checker+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	9e 83       	std	Y+6, r25	; 0x06
    1c9e:	8d 83       	std	Y+5, r24	; 0x05
    1ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca4:	9a 83       	std	Y+2, r25	; 0x02
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	89 81       	ldd	r24, Y+1	; 0x01
    1caa:	9a 81       	ldd	r25, Y+2	; 0x02
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <APP_voidPass_User_checker+0xd52>
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30);
		break;
	}
}
    1cb4:	c1 57       	subi	r28, 0x71	; 113
    1cb6:	df 4f       	sbci	r29, 0xFF	; 255
    1cb8:	0f b6       	in	r0, 0x3f	; 63
    1cba:	f8 94       	cli
    1cbc:	de bf       	out	0x3e, r29	; 62
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cd bf       	out	0x3d, r28	; 61
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	08 95       	ret

00001ccc <DIO_voidSetPortDitection>:

#include "DIO_Registers.h"
#include "DIO_Interface.h"

void DIO_voidSetPortDitection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	00 d0       	rcall	.+0      	; 0x1cd2 <DIO_voidSetPortDitection+0x6>
    1cd2:	00 d0       	rcall	.+0      	; 0x1cd4 <DIO_voidSetPortDitection+0x8>
    1cd4:	cd b7       	in	r28, 0x3d	; 61
    1cd6:	de b7       	in	r29, 0x3e	; 62
    1cd8:	89 83       	std	Y+1, r24	; 0x01
    1cda:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	3c 83       	std	Y+4, r19	; 0x04
    1ce4:	2b 83       	std	Y+3, r18	; 0x03
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	91 05       	cpc	r25, r1
    1cee:	d1 f0       	breq	.+52     	; 0x1d24 <DIO_voidSetPortDitection+0x58>
    1cf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf4:	22 30       	cpi	r18, 0x02	; 2
    1cf6:	31 05       	cpc	r19, r1
    1cf8:	2c f4       	brge	.+10     	; 0x1d04 <DIO_voidSetPortDitection+0x38>
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfe:	00 97       	sbiw	r24, 0x00	; 0
    1d00:	61 f0       	breq	.+24     	; 0x1d1a <DIO_voidSetPortDitection+0x4e>
    1d02:	1e c0       	rjmp	.+60     	; 0x1d40 <DIO_voidSetPortDitection+0x74>
    1d04:	2b 81       	ldd	r18, Y+3	; 0x03
    1d06:	3c 81       	ldd	r19, Y+4	; 0x04
    1d08:	22 30       	cpi	r18, 0x02	; 2
    1d0a:	31 05       	cpc	r19, r1
    1d0c:	81 f0       	breq	.+32     	; 0x1d2e <DIO_voidSetPortDitection+0x62>
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	9c 81       	ldd	r25, Y+4	; 0x04
    1d12:	83 30       	cpi	r24, 0x03	; 3
    1d14:	91 05       	cpc	r25, r1
    1d16:	81 f0       	breq	.+32     	; 0x1d38 <DIO_voidSetPortDitection+0x6c>
    1d18:	13 c0       	rjmp	.+38     	; 0x1d40 <DIO_voidSetPortDitection+0x74>
	{
		case DIO_PORTA:
			DDRA = Copy_u8Direction;
    1d1a:	ea e3       	ldi	r30, 0x3A	; 58
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	80 83       	st	Z, r24
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <DIO_voidSetPortDitection+0x74>
			break;

		case DIO_PORTB:
			DDRB = Copy_u8Direction;
    1d24:	e7 e3       	ldi	r30, 0x37	; 55
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	80 83       	st	Z, r24
    1d2c:	09 c0       	rjmp	.+18     	; 0x1d40 <DIO_voidSetPortDitection+0x74>
			break;

		case DIO_PORTC:
			DDRC = Copy_u8Direction;
    1d2e:	e4 e3       	ldi	r30, 0x34	; 52
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	80 83       	st	Z, r24
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <DIO_voidSetPortDitection+0x74>
			break;

		case DIO_PORTD:
			DDRD = Copy_u8Direction;
    1d38:	e1 e3       	ldi	r30, 0x31	; 49
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3e:	80 83       	st	Z, r24

		default:
			break;
	}

}
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	0f 90       	pop	r0
    1d46:	0f 90       	pop	r0
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	08 95       	ret

00001d4e <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1d4e:	df 93       	push	r29
    1d50:	cf 93       	push	r28
    1d52:	cd b7       	in	r28, 0x3d	; 61
    1d54:	de b7       	in	r29, 0x3e	; 62
    1d56:	27 97       	sbiw	r28, 0x07	; 7
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	6a 83       	std	Y+2, r22	; 0x02
    1d66:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == OUTPUT_PIN)
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	81 30       	cpi	r24, 0x01	; 1
    1d6c:	09 f0       	breq	.+2      	; 0x1d70 <DIO_voidSetPinDirection+0x22>
    1d6e:	6f c0       	rjmp	.+222    	; 0x1e4e <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	3f 83       	std	Y+7, r19	; 0x07
    1d78:	2e 83       	std	Y+6, r18	; 0x06
    1d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d7e:	81 30       	cpi	r24, 0x01	; 1
    1d80:	91 05       	cpc	r25, r1
    1d82:	49 f1       	breq	.+82     	; 0x1dd6 <DIO_voidSetPinDirection+0x88>
    1d84:	2e 81       	ldd	r18, Y+6	; 0x06
    1d86:	3f 81       	ldd	r19, Y+7	; 0x07
    1d88:	22 30       	cpi	r18, 0x02	; 2
    1d8a:	31 05       	cpc	r19, r1
    1d8c:	2c f4       	brge	.+10     	; 0x1d98 <DIO_voidSetPinDirection+0x4a>
    1d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d90:	9f 81       	ldd	r25, Y+7	; 0x07
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	61 f0       	breq	.+24     	; 0x1dae <DIO_voidSetPinDirection+0x60>
    1d96:	d2 c0       	rjmp	.+420    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
    1d98:	2e 81       	ldd	r18, Y+6	; 0x06
    1d9a:	3f 81       	ldd	r19, Y+7	; 0x07
    1d9c:	22 30       	cpi	r18, 0x02	; 2
    1d9e:	31 05       	cpc	r19, r1
    1da0:	71 f1       	breq	.+92     	; 0x1dfe <DIO_voidSetPinDirection+0xb0>
    1da2:	8e 81       	ldd	r24, Y+6	; 0x06
    1da4:	9f 81       	ldd	r25, Y+7	; 0x07
    1da6:	83 30       	cpi	r24, 0x03	; 3
    1da8:	91 05       	cpc	r25, r1
    1daa:	e9 f1       	breq	.+122    	; 0x1e26 <DIO_voidSetPinDirection+0xd8>
    1dac:	c7 c0       	rjmp	.+398    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
		Set_Bit (DDRA,Copy_u8Pin);
    1dae:	aa e3       	ldi	r26, 0x3A	; 58
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	ea e3       	ldi	r30, 0x3A	; 58
    1db4:	f0 e0       	ldi	r31, 0x00	; 0
    1db6:	80 81       	ld	r24, Z
    1db8:	48 2f       	mov	r20, r24
    1dba:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	02 2e       	mov	r0, r18
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <DIO_voidSetPinDirection+0x7e>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	0a 94       	dec	r0
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <DIO_voidSetPinDirection+0x7a>
    1dd0:	84 2b       	or	r24, r20
    1dd2:	8c 93       	st	X, r24
    1dd4:	b3 c0       	rjmp	.+358    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
		break;

		case DIO_PORTB:
			Set_Bit (DDRB,Copy_u8Pin);
    1dd6:	a7 e3       	ldi	r26, 0x37	; 55
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e7 e3       	ldi	r30, 0x37	; 55
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	48 2f       	mov	r20, r24
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	28 2f       	mov	r18, r24
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	02 2e       	mov	r0, r18
    1dee:	02 c0       	rjmp	.+4      	; 0x1df4 <DIO_voidSetPinDirection+0xa6>
    1df0:	88 0f       	add	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	0a 94       	dec	r0
    1df6:	e2 f7       	brpl	.-8      	; 0x1df0 <DIO_voidSetPinDirection+0xa2>
    1df8:	84 2b       	or	r24, r20
    1dfa:	8c 93       	st	X, r24
    1dfc:	9f c0       	rjmp	.+318    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTC:
			Set_Bit (DDRC,Copy_u8Pin);
    1dfe:	a4 e3       	ldi	r26, 0x34	; 52
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e4 e3       	ldi	r30, 0x34	; 52
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	48 2f       	mov	r20, r24
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	28 2f       	mov	r18, r24
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	90 e0       	ldi	r25, 0x00	; 0
    1e14:	02 2e       	mov	r0, r18
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <DIO_voidSetPinDirection+0xce>
    1e18:	88 0f       	add	r24, r24
    1e1a:	99 1f       	adc	r25, r25
    1e1c:	0a 94       	dec	r0
    1e1e:	e2 f7       	brpl	.-8      	; 0x1e18 <DIO_voidSetPinDirection+0xca>
    1e20:	84 2b       	or	r24, r20
    1e22:	8c 93       	st	X, r24
    1e24:	8b c0       	rjmp	.+278    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTD:
			Set_Bit (DDRD,Copy_u8Pin);
    1e26:	a1 e3       	ldi	r26, 0x31	; 49
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e1 e3       	ldi	r30, 0x31	; 49
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	80 81       	ld	r24, Z
    1e30:	48 2f       	mov	r20, r24
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	28 2f       	mov	r18, r24
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	81 e0       	ldi	r24, 0x01	; 1
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	02 2e       	mov	r0, r18
    1e3e:	02 c0       	rjmp	.+4      	; 0x1e44 <DIO_voidSetPinDirection+0xf6>
    1e40:	88 0f       	add	r24, r24
    1e42:	99 1f       	adc	r25, r25
    1e44:	0a 94       	dec	r0
    1e46:	e2 f7       	brpl	.-8      	; 0x1e40 <DIO_voidSetPinDirection+0xf2>
    1e48:	84 2b       	or	r24, r20
    1e4a:	8c 93       	st	X, r24
    1e4c:	77 c0       	rjmp	.+238    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>

		default:
			break;
		}
	}
	else if (Copy_u8Direction == INPUT_PIN)
    1e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e50:	88 23       	and	r24, r24
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <DIO_voidSetPinDirection+0x108>
    1e54:	73 c0       	rjmp	.+230    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	28 2f       	mov	r18, r24
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	3d 83       	std	Y+5, r19	; 0x05
    1e5e:	2c 83       	std	Y+4, r18	; 0x04
    1e60:	8c 81       	ldd	r24, Y+4	; 0x04
    1e62:	9d 81       	ldd	r25, Y+5	; 0x05
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	91 05       	cpc	r25, r1
    1e68:	59 f1       	breq	.+86     	; 0x1ec0 <DIO_voidSetPinDirection+0x172>
    1e6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6e:	22 30       	cpi	r18, 0x02	; 2
    1e70:	31 05       	cpc	r19, r1
    1e72:	2c f4       	brge	.+10     	; 0x1e7e <DIO_voidSetPinDirection+0x130>
    1e74:	8c 81       	ldd	r24, Y+4	; 0x04
    1e76:	9d 81       	ldd	r25, Y+5	; 0x05
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f0       	breq	.+26     	; 0x1e96 <DIO_voidSetPinDirection+0x148>
    1e7c:	5f c0       	rjmp	.+190    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
    1e7e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e80:	3d 81       	ldd	r19, Y+5	; 0x05
    1e82:	22 30       	cpi	r18, 0x02	; 2
    1e84:	31 05       	cpc	r19, r1
    1e86:	89 f1       	breq	.+98     	; 0x1eea <DIO_voidSetPinDirection+0x19c>
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	91 05       	cpc	r25, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <DIO_voidSetPinDirection+0x146>
    1e92:	40 c0       	rjmp	.+128    	; 0x1f14 <DIO_voidSetPinDirection+0x1c6>
    1e94:	53 c0       	rjmp	.+166    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
			Clear_Bit (DDRA,Copy_u8Pin);
    1e96:	aa e3       	ldi	r26, 0x3A	; 58
    1e98:	b0 e0       	ldi	r27, 0x00	; 0
    1e9a:	ea e3       	ldi	r30, 0x3A	; 58
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	48 2f       	mov	r20, r24
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	28 2f       	mov	r18, r24
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	02 2e       	mov	r0, r18
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <DIO_voidSetPinDirection+0x166>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	0a 94       	dec	r0
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <DIO_voidSetPinDirection+0x162>
    1eb8:	80 95       	com	r24
    1eba:	84 23       	and	r24, r20
    1ebc:	8c 93       	st	X, r24
    1ebe:	3e c0       	rjmp	.+124    	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTB:
			Clear_Bit (DDRB,Copy_u8Pin);
    1ec0:	a7 e3       	ldi	r26, 0x37	; 55
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e7 e3       	ldi	r30, 0x37	; 55
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_voidSetPinDirection+0x190>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_voidSetPinDirection+0x18c>
    1ee2:	80 95       	com	r24
    1ee4:	84 23       	and	r24, r20
    1ee6:	8c 93       	st	X, r24
    1ee8:	29 c0       	rjmp	.+82     	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTC:
			Clear_Bit (DDRC,Copy_u8Pin);
    1eea:	a4 e3       	ldi	r26, 0x34	; 52
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e4 e3       	ldi	r30, 0x34	; 52
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <DIO_voidSetPinDirection+0x1ba>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <DIO_voidSetPinDirection+0x1b6>
    1f0c:	80 95       	com	r24
    1f0e:	84 23       	and	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	14 c0       	rjmp	.+40     	; 0x1f3c <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTD:
			Clear_Bit (DDRD,Copy_u8Pin);
    1f14:	a1 e3       	ldi	r26, 0x31	; 49
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e1 e3       	ldi	r30, 0x31	; 49
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <DIO_voidSetPinDirection+0x1e4>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <DIO_voidSetPinDirection+0x1e0>
    1f36:	80 95       	com	r24
    1f38:	84 23       	and	r24, r20
    1f3a:	8c 93       	st	X, r24
		default:
			break;
		}
	}

}
    1f3c:	27 96       	adiw	r28, 0x07	; 7
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	08 95       	ret

00001f4e <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    1f4e:	df 93       	push	r29
    1f50:	cf 93       	push	r28
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <DIO_voidSetPortValue+0x6>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <DIO_voidSetPortValue+0x8>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	3c 83       	std	Y+4, r19	; 0x04
    1f66:	2b 83       	std	Y+3, r18	; 0x03
    1f68:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6c:	81 30       	cpi	r24, 0x01	; 1
    1f6e:	91 05       	cpc	r25, r1
    1f70:	d1 f0       	breq	.+52     	; 0x1fa6 <DIO_voidSetPortValue+0x58>
    1f72:	2b 81       	ldd	r18, Y+3	; 0x03
    1f74:	3c 81       	ldd	r19, Y+4	; 0x04
    1f76:	22 30       	cpi	r18, 0x02	; 2
    1f78:	31 05       	cpc	r19, r1
    1f7a:	2c f4       	brge	.+10     	; 0x1f86 <DIO_voidSetPortValue+0x38>
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	00 97       	sbiw	r24, 0x00	; 0
    1f82:	61 f0       	breq	.+24     	; 0x1f9c <DIO_voidSetPortValue+0x4e>
    1f84:	1e c0       	rjmp	.+60     	; 0x1fc2 <DIO_voidSetPortValue+0x74>
    1f86:	2b 81       	ldd	r18, Y+3	; 0x03
    1f88:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8a:	22 30       	cpi	r18, 0x02	; 2
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	81 f0       	breq	.+32     	; 0x1fb0 <DIO_voidSetPortValue+0x62>
    1f90:	8b 81       	ldd	r24, Y+3	; 0x03
    1f92:	9c 81       	ldd	r25, Y+4	; 0x04
    1f94:	83 30       	cpi	r24, 0x03	; 3
    1f96:	91 05       	cpc	r25, r1
    1f98:	81 f0       	breq	.+32     	; 0x1fba <DIO_voidSetPortValue+0x6c>
    1f9a:	13 c0       	rjmp	.+38     	; 0x1fc2 <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA:
			PORTA = Copy_u8Value;
    1f9c:	eb e3       	ldi	r30, 0x3B	; 59
    1f9e:	f0 e0       	ldi	r31, 0x00	; 0
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	80 83       	st	Z, r24
    1fa4:	0e c0       	rjmp	.+28     	; 0x1fc2 <DIO_voidSetPortValue+0x74>
			break;

			case DIO_PORTB:
				PORTB = Copy_u8Value;
    1fa6:	e8 e3       	ldi	r30, 0x38	; 56
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	8a 81       	ldd	r24, Y+2	; 0x02
    1fac:	80 83       	st	Z, r24
    1fae:	09 c0       	rjmp	.+18     	; 0x1fc2 <DIO_voidSetPortValue+0x74>
				break;

			case DIO_PORTC:
				PORTC = Copy_u8Value;
    1fb0:	e5 e3       	ldi	r30, 0x35	; 53
    1fb2:	f0 e0       	ldi	r31, 0x00	; 0
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	80 83       	st	Z, r24
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <DIO_voidSetPortValue+0x74>
				break;

			case DIO_PORTD:
				PORTD = Copy_u8Value;
    1fba:	e2 e3       	ldi	r30, 0x32	; 50
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc0:	80 83       	st	Z, r24
				break;

			default:
				break;
		}
}
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Value)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	27 97       	sbiw	r28, 0x07	; 7
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	6a 83       	std	Y+2, r22	; 0x02
    1fe8:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == HIGH)
    1fea:	8b 81       	ldd	r24, Y+3	; 0x03
    1fec:	81 30       	cpi	r24, 0x01	; 1
    1fee:	09 f0       	breq	.+2      	; 0x1ff2 <DIO_voidSetPinValue+0x22>
    1ff0:	6f c0       	rjmp	.+222    	; 0x20d0 <DIO_voidSetPinValue+0x100>
		{
			switch (Copy_u8Port)
    1ff2:	89 81       	ldd	r24, Y+1	; 0x01
    1ff4:	28 2f       	mov	r18, r24
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	3f 83       	std	Y+7, r19	; 0x07
    1ffa:	2e 83       	std	Y+6, r18	; 0x06
    1ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ffe:	9f 81       	ldd	r25, Y+7	; 0x07
    2000:	81 30       	cpi	r24, 0x01	; 1
    2002:	91 05       	cpc	r25, r1
    2004:	49 f1       	breq	.+82     	; 0x2058 <DIO_voidSetPinValue+0x88>
    2006:	2e 81       	ldd	r18, Y+6	; 0x06
    2008:	3f 81       	ldd	r19, Y+7	; 0x07
    200a:	22 30       	cpi	r18, 0x02	; 2
    200c:	31 05       	cpc	r19, r1
    200e:	2c f4       	brge	.+10     	; 0x201a <DIO_voidSetPinValue+0x4a>
    2010:	8e 81       	ldd	r24, Y+6	; 0x06
    2012:	9f 81       	ldd	r25, Y+7	; 0x07
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	61 f0       	breq	.+24     	; 0x2030 <DIO_voidSetPinValue+0x60>
    2018:	d2 c0       	rjmp	.+420    	; 0x21be <DIO_voidSetPinValue+0x1ee>
    201a:	2e 81       	ldd	r18, Y+6	; 0x06
    201c:	3f 81       	ldd	r19, Y+7	; 0x07
    201e:	22 30       	cpi	r18, 0x02	; 2
    2020:	31 05       	cpc	r19, r1
    2022:	71 f1       	breq	.+92     	; 0x2080 <DIO_voidSetPinValue+0xb0>
    2024:	8e 81       	ldd	r24, Y+6	; 0x06
    2026:	9f 81       	ldd	r25, Y+7	; 0x07
    2028:	83 30       	cpi	r24, 0x03	; 3
    202a:	91 05       	cpc	r25, r1
    202c:	e9 f1       	breq	.+122    	; 0x20a8 <DIO_voidSetPinValue+0xd8>
    202e:	c7 c0       	rjmp	.+398    	; 0x21be <DIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA:
			Set_Bit (PORTA,Copy_u8Pin);
    2030:	ab e3       	ldi	r26, 0x3B	; 59
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	eb e3       	ldi	r30, 0x3B	; 59
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	48 2f       	mov	r20, r24
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	02 2e       	mov	r0, r18
    2048:	02 c0       	rjmp	.+4      	; 0x204e <DIO_voidSetPinValue+0x7e>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	0a 94       	dec	r0
    2050:	e2 f7       	brpl	.-8      	; 0x204a <DIO_voidSetPinValue+0x7a>
    2052:	84 2b       	or	r24, r20
    2054:	8c 93       	st	X, r24
    2056:	b3 c0       	rjmp	.+358    	; 0x21be <DIO_voidSetPinValue+0x1ee>
			break;

			case DIO_PORTB:
				Set_Bit (PORTB,Copy_u8Pin);
    2058:	a8 e3       	ldi	r26, 0x38	; 56
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e8 e3       	ldi	r30, 0x38	; 56
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	48 2f       	mov	r20, r24
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 2e       	mov	r0, r18
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <DIO_voidSetPinValue+0xa6>
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	0a 94       	dec	r0
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <DIO_voidSetPinValue+0xa2>
    207a:	84 2b       	or	r24, r20
    207c:	8c 93       	st	X, r24
    207e:	9f c0       	rjmp	.+318    	; 0x21be <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTC:
				Set_Bit (PORTC,Copy_u8Pin);
    2080:	a5 e3       	ldi	r26, 0x35	; 53
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e5 e3       	ldi	r30, 0x35	; 53
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	48 2f       	mov	r20, r24
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	02 2e       	mov	r0, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <DIO_voidSetPinValue+0xce>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	0a 94       	dec	r0
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <DIO_voidSetPinValue+0xca>
    20a2:	84 2b       	or	r24, r20
    20a4:	8c 93       	st	X, r24
    20a6:	8b c0       	rjmp	.+278    	; 0x21be <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTD:
				Set_Bit (PORTD,Copy_u8Pin);
    20a8:	a2 e3       	ldi	r26, 0x32	; 50
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e2 e3       	ldi	r30, 0x32	; 50
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	48 2f       	mov	r20, r24
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	28 2f       	mov	r18, r24
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	02 2e       	mov	r0, r18
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <DIO_voidSetPinValue+0xf6>
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	0a 94       	dec	r0
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <DIO_voidSetPinValue+0xf2>
    20ca:	84 2b       	or	r24, r20
    20cc:	8c 93       	st	X, r24
    20ce:	77 c0       	rjmp	.+238    	; 0x21be <DIO_voidSetPinValue+0x1ee>

			default:
				break;
			}
		}
		else if (Copy_u8Value == LOW)
    20d0:	8b 81       	ldd	r24, Y+3	; 0x03
    20d2:	88 23       	and	r24, r24
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <DIO_voidSetPinValue+0x108>
    20d6:	73 c0       	rjmp	.+230    	; 0x21be <DIO_voidSetPinValue+0x1ee>
		{
			switch (Copy_u8Port)
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	3d 83       	std	Y+5, r19	; 0x05
    20e0:	2c 83       	std	Y+4, r18	; 0x04
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	9d 81       	ldd	r25, Y+5	; 0x05
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	91 05       	cpc	r25, r1
    20ea:	59 f1       	breq	.+86     	; 0x2142 <DIO_voidSetPinValue+0x172>
    20ec:	2c 81       	ldd	r18, Y+4	; 0x04
    20ee:	3d 81       	ldd	r19, Y+5	; 0x05
    20f0:	22 30       	cpi	r18, 0x02	; 2
    20f2:	31 05       	cpc	r19, r1
    20f4:	2c f4       	brge	.+10     	; 0x2100 <DIO_voidSetPinValue+0x130>
    20f6:	8c 81       	ldd	r24, Y+4	; 0x04
    20f8:	9d 81       	ldd	r25, Y+5	; 0x05
    20fa:	00 97       	sbiw	r24, 0x00	; 0
    20fc:	69 f0       	breq	.+26     	; 0x2118 <DIO_voidSetPinValue+0x148>
    20fe:	5f c0       	rjmp	.+190    	; 0x21be <DIO_voidSetPinValue+0x1ee>
    2100:	2c 81       	ldd	r18, Y+4	; 0x04
    2102:	3d 81       	ldd	r19, Y+5	; 0x05
    2104:	22 30       	cpi	r18, 0x02	; 2
    2106:	31 05       	cpc	r19, r1
    2108:	89 f1       	breq	.+98     	; 0x216c <DIO_voidSetPinValue+0x19c>
    210a:	8c 81       	ldd	r24, Y+4	; 0x04
    210c:	9d 81       	ldd	r25, Y+5	; 0x05
    210e:	83 30       	cpi	r24, 0x03	; 3
    2110:	91 05       	cpc	r25, r1
    2112:	09 f4       	brne	.+2      	; 0x2116 <DIO_voidSetPinValue+0x146>
    2114:	40 c0       	rjmp	.+128    	; 0x2196 <DIO_voidSetPinValue+0x1c6>
    2116:	53 c0       	rjmp	.+166    	; 0x21be <DIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA:
				Clear_Bit (PORTA,Copy_u8Pin);
    2118:	ab e3       	ldi	r26, 0x3B	; 59
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	eb e3       	ldi	r30, 0x3B	; 59
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	48 2f       	mov	r20, r24
    2124:	8a 81       	ldd	r24, Y+2	; 0x02
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	02 2e       	mov	r0, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <DIO_voidSetPinValue+0x166>
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	0a 94       	dec	r0
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <DIO_voidSetPinValue+0x162>
    213a:	80 95       	com	r24
    213c:	84 23       	and	r24, r20
    213e:	8c 93       	st	X, r24
    2140:	3e c0       	rjmp	.+124    	; 0x21be <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTB:
				Clear_Bit (PORTB,Copy_u8Pin);
    2142:	a8 e3       	ldi	r26, 0x38	; 56
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e8 e3       	ldi	r30, 0x38	; 56
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	48 2f       	mov	r20, r24
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	02 2e       	mov	r0, r18
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <DIO_voidSetPinValue+0x190>
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	0a 94       	dec	r0
    2162:	e2 f7       	brpl	.-8      	; 0x215c <DIO_voidSetPinValue+0x18c>
    2164:	80 95       	com	r24
    2166:	84 23       	and	r24, r20
    2168:	8c 93       	st	X, r24
    216a:	29 c0       	rjmp	.+82     	; 0x21be <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTC:
				Clear_Bit (PORTC,Copy_u8Pin);
    216c:	a5 e3       	ldi	r26, 0x35	; 53
    216e:	b0 e0       	ldi	r27, 0x00	; 0
    2170:	e5 e3       	ldi	r30, 0x35	; 53
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	80 81       	ld	r24, Z
    2176:	48 2f       	mov	r20, r24
    2178:	8a 81       	ldd	r24, Y+2	; 0x02
    217a:	28 2f       	mov	r18, r24
    217c:	30 e0       	ldi	r19, 0x00	; 0
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	02 2e       	mov	r0, r18
    2184:	02 c0       	rjmp	.+4      	; 0x218a <DIO_voidSetPinValue+0x1ba>
    2186:	88 0f       	add	r24, r24
    2188:	99 1f       	adc	r25, r25
    218a:	0a 94       	dec	r0
    218c:	e2 f7       	brpl	.-8      	; 0x2186 <DIO_voidSetPinValue+0x1b6>
    218e:	80 95       	com	r24
    2190:	84 23       	and	r24, r20
    2192:	8c 93       	st	X, r24
    2194:	14 c0       	rjmp	.+40     	; 0x21be <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTD:
				Clear_Bit (PORTD,Copy_u8Pin);
    2196:	a2 e3       	ldi	r26, 0x32	; 50
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e2 e3       	ldi	r30, 0x32	; 50
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	48 2f       	mov	r20, r24
    21a2:	8a 81       	ldd	r24, Y+2	; 0x02
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 2e       	mov	r0, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <DIO_voidSetPinValue+0x1e4>
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	0a 94       	dec	r0
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <DIO_voidSetPinValue+0x1e0>
    21b8:	80 95       	com	r24
    21ba:	84 23       	and	r24, r20
    21bc:	8c 93       	st	X, r24

			default:
				break;
			}
		}
}
    21be:	27 96       	adiw	r28, 0x07	; 7
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <DIO_u8GetPinValue+0x6>
    21d6:	00 d0       	rcall	.+0      	; 0x21d8 <DIO_u8GetPinValue+0x8>
    21d8:	0f 92       	push	r0
    21da:	cd b7       	in	r28, 0x3d	; 61
    21dc:	de b7       	in	r29, 0x3e	; 62
    21de:	8a 83       	std	Y+2, r24	; 0x02
    21e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnValuePin;
	switch (Copy_u8Port)
    21e2:	8a 81       	ldd	r24, Y+2	; 0x02
    21e4:	28 2f       	mov	r18, r24
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	3d 83       	std	Y+5, r19	; 0x05
    21ea:	2c 83       	std	Y+4, r18	; 0x04
    21ec:	4c 81       	ldd	r20, Y+4	; 0x04
    21ee:	5d 81       	ldd	r21, Y+5	; 0x05
    21f0:	41 30       	cpi	r20, 0x01	; 1
    21f2:	51 05       	cpc	r21, r1
    21f4:	41 f1       	breq	.+80     	; 0x2246 <DIO_u8GetPinValue+0x76>
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	9d 81       	ldd	r25, Y+5	; 0x05
    21fa:	82 30       	cpi	r24, 0x02	; 2
    21fc:	91 05       	cpc	r25, r1
    21fe:	34 f4       	brge	.+12     	; 0x220c <DIO_u8GetPinValue+0x3c>
    2200:	2c 81       	ldd	r18, Y+4	; 0x04
    2202:	3d 81       	ldd	r19, Y+5	; 0x05
    2204:	21 15       	cp	r18, r1
    2206:	31 05       	cpc	r19, r1
    2208:	61 f0       	breq	.+24     	; 0x2222 <DIO_u8GetPinValue+0x52>
    220a:	52 c0       	rjmp	.+164    	; 0x22b0 <DIO_u8GetPinValue+0xe0>
    220c:	4c 81       	ldd	r20, Y+4	; 0x04
    220e:	5d 81       	ldd	r21, Y+5	; 0x05
    2210:	42 30       	cpi	r20, 0x02	; 2
    2212:	51 05       	cpc	r21, r1
    2214:	51 f1       	breq	.+84     	; 0x226a <DIO_u8GetPinValue+0x9a>
    2216:	8c 81       	ldd	r24, Y+4	; 0x04
    2218:	9d 81       	ldd	r25, Y+5	; 0x05
    221a:	83 30       	cpi	r24, 0x03	; 3
    221c:	91 05       	cpc	r25, r1
    221e:	b9 f1       	breq	.+110    	; 0x228e <DIO_u8GetPinValue+0xbe>
    2220:	47 c0       	rjmp	.+142    	; 0x22b0 <DIO_u8GetPinValue+0xe0>
		{
			case DIO_PORTA:
				Local_u8ReturnValuePin= Get_Bit(PINA,Copy_u8Pin);
    2222:	e9 e3       	ldi	r30, 0x39	; 57
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	80 81       	ld	r24, Z
    2228:	28 2f       	mov	r18, r24
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	8b 81       	ldd	r24, Y+3	; 0x03
    222e:	88 2f       	mov	r24, r24
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	a9 01       	movw	r20, r18
    2234:	02 c0       	rjmp	.+4      	; 0x223a <DIO_u8GetPinValue+0x6a>
    2236:	55 95       	asr	r21
    2238:	47 95       	ror	r20
    223a:	8a 95       	dec	r24
    223c:	e2 f7       	brpl	.-8      	; 0x2236 <DIO_u8GetPinValue+0x66>
    223e:	ca 01       	movw	r24, r20
    2240:	81 70       	andi	r24, 0x01	; 1
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	35 c0       	rjmp	.+106    	; 0x22b0 <DIO_u8GetPinValue+0xe0>
			break;

			case DIO_PORTB:
				Local_u8ReturnValuePin= Get_Bit(PINB,Copy_u8Pin);
    2246:	e6 e3       	ldi	r30, 0x36	; 54
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 81       	ld	r24, Z
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	a9 01       	movw	r20, r18
    2258:	02 c0       	rjmp	.+4      	; 0x225e <DIO_u8GetPinValue+0x8e>
    225a:	55 95       	asr	r21
    225c:	47 95       	ror	r20
    225e:	8a 95       	dec	r24
    2260:	e2 f7       	brpl	.-8      	; 0x225a <DIO_u8GetPinValue+0x8a>
    2262:	ca 01       	movw	r24, r20
    2264:	81 70       	andi	r24, 0x01	; 1
    2266:	89 83       	std	Y+1, r24	; 0x01
    2268:	23 c0       	rjmp	.+70     	; 0x22b0 <DIO_u8GetPinValue+0xe0>
				break;

			case DIO_PORTC:
				Local_u8ReturnValuePin= Get_Bit(PINC,Copy_u8Pin);
    226a:	e3 e3       	ldi	r30, 0x33	; 51
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	88 2f       	mov	r24, r24
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a9 01       	movw	r20, r18
    227c:	02 c0       	rjmp	.+4      	; 0x2282 <DIO_u8GetPinValue+0xb2>
    227e:	55 95       	asr	r21
    2280:	47 95       	ror	r20
    2282:	8a 95       	dec	r24
    2284:	e2 f7       	brpl	.-8      	; 0x227e <DIO_u8GetPinValue+0xae>
    2286:	ca 01       	movw	r24, r20
    2288:	81 70       	andi	r24, 0x01	; 1
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	11 c0       	rjmp	.+34     	; 0x22b0 <DIO_u8GetPinValue+0xe0>
				break;

			case DIO_PORTD:
				Local_u8ReturnValuePin= Get_Bit(PIND,Copy_u8Pin);
    228e:	e0 e3       	ldi	r30, 0x30	; 48
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	28 2f       	mov	r18, r24
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	8b 81       	ldd	r24, Y+3	; 0x03
    229a:	88 2f       	mov	r24, r24
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	a9 01       	movw	r20, r18
    22a0:	02 c0       	rjmp	.+4      	; 0x22a6 <DIO_u8GetPinValue+0xd6>
    22a2:	55 95       	asr	r21
    22a4:	47 95       	ror	r20
    22a6:	8a 95       	dec	r24
    22a8:	e2 f7       	brpl	.-8      	; 0x22a2 <DIO_u8GetPinValue+0xd2>
    22aa:	ca 01       	movw	r24, r20
    22ac:	81 70       	andi	r24, 0x01	; 1
    22ae:	89 83       	std	Y+1, r24	; 0x01
				break;

			default:
				break;
		}
	return Local_u8ReturnValuePin;
    22b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <DIO_voidPullUpPin>:

void DIO_voidPullUpPin(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <DIO_voidPullUpPin+0x6>
    22c8:	00 d0       	rcall	.+0      	; 0x22ca <DIO_voidPullUpPin+0x8>
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	3c 83       	std	Y+4, r19	; 0x04
    22da:	2b 83       	std	Y+3, r18	; 0x03
    22dc:	8b 81       	ldd	r24, Y+3	; 0x03
    22de:	9c 81       	ldd	r25, Y+4	; 0x04
    22e0:	81 30       	cpi	r24, 0x01	; 1
    22e2:	91 05       	cpc	r25, r1
    22e4:	49 f1       	breq	.+82     	; 0x2338 <DIO_voidPullUpPin+0x76>
    22e6:	2b 81       	ldd	r18, Y+3	; 0x03
    22e8:	3c 81       	ldd	r19, Y+4	; 0x04
    22ea:	22 30       	cpi	r18, 0x02	; 2
    22ec:	31 05       	cpc	r19, r1
    22ee:	2c f4       	brge	.+10     	; 0x22fa <DIO_voidPullUpPin+0x38>
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	9c 81       	ldd	r25, Y+4	; 0x04
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	61 f0       	breq	.+24     	; 0x2310 <DIO_voidPullUpPin+0x4e>
    22f8:	5a c0       	rjmp	.+180    	; 0x23ae <DIO_voidPullUpPin+0xec>
    22fa:	2b 81       	ldd	r18, Y+3	; 0x03
    22fc:	3c 81       	ldd	r19, Y+4	; 0x04
    22fe:	22 30       	cpi	r18, 0x02	; 2
    2300:	31 05       	cpc	r19, r1
    2302:	71 f1       	breq	.+92     	; 0x2360 <DIO_voidPullUpPin+0x9e>
    2304:	8b 81       	ldd	r24, Y+3	; 0x03
    2306:	9c 81       	ldd	r25, Y+4	; 0x04
    2308:	83 30       	cpi	r24, 0x03	; 3
    230a:	91 05       	cpc	r25, r1
    230c:	e9 f1       	breq	.+122    	; 0x2388 <DIO_voidPullUpPin+0xc6>
    230e:	4f c0       	rjmp	.+158    	; 0x23ae <DIO_voidPullUpPin+0xec>
			{
			case DIO_PORTA:
				Set_Bit (PORTA,Copy_u8Pin);
    2310:	ab e3       	ldi	r26, 0x3B	; 59
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	eb e3       	ldi	r30, 0x3B	; 59
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	48 2f       	mov	r20, r24
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	02 2e       	mov	r0, r18
    2328:	02 c0       	rjmp	.+4      	; 0x232e <DIO_voidPullUpPin+0x6c>
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	0a 94       	dec	r0
    2330:	e2 f7       	brpl	.-8      	; 0x232a <DIO_voidPullUpPin+0x68>
    2332:	84 2b       	or	r24, r20
    2334:	8c 93       	st	X, r24
    2336:	3b c0       	rjmp	.+118    	; 0x23ae <DIO_voidPullUpPin+0xec>
				break;

			case DIO_PORTB:
				Set_Bit (PORTB,Copy_u8Pin);;
    2338:	a8 e3       	ldi	r26, 0x38	; 56
    233a:	b0 e0       	ldi	r27, 0x00	; 0
    233c:	e8 e3       	ldi	r30, 0x38	; 56
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	48 2f       	mov	r20, r24
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	02 2e       	mov	r0, r18
    2350:	02 c0       	rjmp	.+4      	; 0x2356 <DIO_voidPullUpPin+0x94>
    2352:	88 0f       	add	r24, r24
    2354:	99 1f       	adc	r25, r25
    2356:	0a 94       	dec	r0
    2358:	e2 f7       	brpl	.-8      	; 0x2352 <DIO_voidPullUpPin+0x90>
    235a:	84 2b       	or	r24, r20
    235c:	8c 93       	st	X, r24
    235e:	27 c0       	rjmp	.+78     	; 0x23ae <DIO_voidPullUpPin+0xec>
				break;

			case DIO_PORTC:
				Set_Bit (PORTC,Copy_u8Pin);;
    2360:	a5 e3       	ldi	r26, 0x35	; 53
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	e5 e3       	ldi	r30, 0x35	; 53
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	48 2f       	mov	r20, r24
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	28 2f       	mov	r18, r24
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	02 2e       	mov	r0, r18
    2378:	02 c0       	rjmp	.+4      	; 0x237e <DIO_voidPullUpPin+0xbc>
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	0a 94       	dec	r0
    2380:	e2 f7       	brpl	.-8      	; 0x237a <DIO_voidPullUpPin+0xb8>
    2382:	84 2b       	or	r24, r20
    2384:	8c 93       	st	X, r24
    2386:	13 c0       	rjmp	.+38     	; 0x23ae <DIO_voidPullUpPin+0xec>
				break;

			case DIO_PORTD:
				Set_Bit (PORTD,Copy_u8Pin);;
    2388:	a2 e3       	ldi	r26, 0x32	; 50
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e2 e3       	ldi	r30, 0x32	; 50
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	48 2f       	mov	r20, r24
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	81 e0       	ldi	r24, 0x01	; 1
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	02 2e       	mov	r0, r18
    23a0:	02 c0       	rjmp	.+4      	; 0x23a6 <DIO_voidPullUpPin+0xe4>
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	0a 94       	dec	r0
    23a8:	e2 f7       	brpl	.-8      	; 0x23a2 <DIO_voidPullUpPin+0xe0>
    23aa:	84 2b       	or	r24, r20
    23ac:	8c 93       	st	X, r24
				break;

			default:
				break;
			}
}
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <EXTI_voidINT0Init>:
#include "EXTI_Interface.h"

void (*EXTI_pvCallBackFuncINT0) (void) = NULL;

void EXTI_voidINT0Init(void)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(MCUCR,MCUCR_ISC00);
    23c4:	a5 e5       	ldi	r26, 0x55	; 85
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	e5 e5       	ldi	r30, 0x55	; 85
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	8e 7f       	andi	r24, 0xFE	; 254
    23d0:	8c 93       	st	X, r24
	Set_Bit(MCUCR,MCUCR_ISC01);
    23d2:	a5 e5       	ldi	r26, 0x55	; 85
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	e5 e5       	ldi	r30, 0x55	; 85
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	80 81       	ld	r24, Z
    23dc:	82 60       	ori	r24, 0x02	; 2
    23de:	8c 93       	st	X, r24

	Set_Bit(GICR,GICR_INT0);
    23e0:	ab e5       	ldi	r26, 0x5B	; 91
    23e2:	b0 e0       	ldi	r27, 0x00	; 0
    23e4:	eb e5       	ldi	r30, 0x5B	; 91
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	80 81       	ld	r24, Z
    23ea:	80 64       	ori	r24, 0x40	; 64
    23ec:	8c 93       	st	X, r24
}
    23ee:	cf 91       	pop	r28
    23f0:	df 91       	pop	r29
    23f2:	08 95       	ret

000023f4 <EXTI_voidINT0End>:

void EXTI_voidINT0End(void)
{
    23f4:	df 93       	push	r29
    23f6:	cf 93       	push	r28
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR,GICR_INT0);
    23fc:	ab e5       	ldi	r26, 0x5B	; 91
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	eb e5       	ldi	r30, 0x5B	; 91
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	80 81       	ld	r24, Z
    2406:	8f 7b       	andi	r24, 0xBF	; 191
    2408:	8c 93       	st	X, r24
}
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <EXTI_voidINT1Init>:

void EXTI_voidINT1Init(void)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(MCUCR,MCUCR_ISC10);
    2418:	a5 e5       	ldi	r26, 0x55	; 85
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	e5 e5       	ldi	r30, 0x55	; 85
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	8b 7f       	andi	r24, 0xFB	; 251
    2424:	8c 93       	st	X, r24
	Set_Bit(MCUCR,MCUCR_ISC11);
    2426:	a5 e5       	ldi	r26, 0x55	; 85
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	e5 e5       	ldi	r30, 0x55	; 85
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	88 60       	ori	r24, 0x08	; 8
    2432:	8c 93       	st	X, r24

	Set_Bit(GICR,GICR_INT1);
    2434:	ab e5       	ldi	r26, 0x5B	; 91
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	eb e5       	ldi	r30, 0x5B	; 91
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	80 68       	ori	r24, 0x80	; 128
    2440:	8c 93       	st	X, r24
}
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <EXTI_voidINT2Init>:

void EXTI_voidINT2Init(void)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(MCUCSR,MCUCSR_ISC2);
    2450:	a4 e5       	ldi	r26, 0x54	; 84
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	e4 e5       	ldi	r30, 0x54	; 84
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8f 7b       	andi	r24, 0xBF	; 191
    245c:	8c 93       	st	X, r24
	Set_Bit(GICR,GICR_INT2);
    245e:	ab e5       	ldi	r26, 0x5B	; 91
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	eb e5       	ldi	r30, 0x5B	; 91
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	80 62       	ori	r24, 0x20	; 32
    246a:	8c 93       	st	X, r24
}
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <EXTI_voidGlobalEnable>:

void EXTI_voidGlobalEnable(void)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global Interrupt*/
	Set_Bit(SREG,SREG_I);
    247a:	af e5       	ldi	r26, 0x5F	; 95
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	ef e5       	ldi	r30, 0x5F	; 95
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	80 68       	ori	r24, 0x80	; 128
    2486:	8c 93       	st	X, r24
}
    2488:	cf 91       	pop	r28
    248a:	df 91       	pop	r29
    248c:	08 95       	ret

0000248e <EXTI_voidGlobalDisable>:

void EXTI_voidGlobalDisable(void)
{
    248e:	df 93       	push	r29
    2490:	cf 93       	push	r28
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
	/*Disable Global Interrupt*/
	Clear_Bit(SREG,SREG_I);
    2496:	af e5       	ldi	r26, 0x5F	; 95
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	ef e5       	ldi	r30, 0x5F	; 95
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	8f 77       	andi	r24, 0x7F	; 127
    24a2:	8c 93       	st	X, r24
}
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <EXTI_voidCallBackINT0>:

void EXTI_voidCallBackINT0(void(*Copy_pv0function)(void))
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <EXTI_voidCallBackINT0+0x6>
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	9a 83       	std	Y+2, r25	; 0x02
    24b6:	89 83       	std	Y+1, r24	; 0x01
    EXTI_pvCallBackFuncINT0 = Copy_pv0function;
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	9a 81       	ldd	r25, Y+2	; 0x02
    24bc:	90 93 81 01 	sts	0x0181, r25
    24c0:	80 93 80 01 	sts	0x0180, r24
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <__vector_1>:

void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    24ce:	1f 92       	push	r1
    24d0:	0f 92       	push	r0
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	0f 92       	push	r0
    24d6:	11 24       	eor	r1, r1
    24d8:	2f 93       	push	r18
    24da:	3f 93       	push	r19
    24dc:	4f 93       	push	r20
    24de:	5f 93       	push	r21
    24e0:	6f 93       	push	r22
    24e2:	7f 93       	push	r23
    24e4:	8f 93       	push	r24
    24e6:	9f 93       	push	r25
    24e8:	af 93       	push	r26
    24ea:	bf 93       	push	r27
    24ec:	ef 93       	push	r30
    24ee:	ff 93       	push	r31
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_pvCallBackFuncINT0 != NULL)
    24f8:	80 91 80 01 	lds	r24, 0x0180
    24fc:	90 91 81 01 	lds	r25, 0x0181
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	29 f0       	breq	.+10     	; 0x250e <__vector_1+0x40>
    {
        EXTI_pvCallBackFuncINT0();
    2504:	e0 91 80 01 	lds	r30, 0x0180
    2508:	f0 91 81 01 	lds	r31, 0x0181
    250c:	09 95       	icall
    }

}
    250e:	cf 91       	pop	r28
    2510:	df 91       	pop	r29
    2512:	ff 91       	pop	r31
    2514:	ef 91       	pop	r30
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	7f 91       	pop	r23
    2520:	6f 91       	pop	r22
    2522:	5f 91       	pop	r21
    2524:	4f 91       	pop	r20
    2526:	3f 91       	pop	r19
    2528:	2f 91       	pop	r18
    252a:	0f 90       	pop	r0
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	0f 90       	pop	r0
    2530:	1f 90       	pop	r1
    2532:	18 95       	reti

00002534 <KeyPad_voidInit>:
#include <util/delay.h>

u8 Rows[4] = {KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN, KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN};
u8 Cols[4] = {KEYPAD_COL1_PIN, KEYPAD_COL2_PIN, KEYPAD_COL3_PIN};

void KeyPad_voidInit(void){
    2534:	df 93       	push	r29
    2536:	cf 93       	push	r28
    2538:	00 d0       	rcall	.+0      	; 0x253a <KeyPad_voidInit+0x6>
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62

	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
    253e:	1a 82       	std	Y+2, r1	; 0x02
    2540:	1b c0       	rjmp	.+54     	; 0x2578 <KeyPad_voidInit+0x44>
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	fc 01       	movw	r30, r24
    254a:	e8 59       	subi	r30, 0x98	; 152
    254c:	fe 4f       	sbci	r31, 0xFE	; 254
    254e:	90 81       	ld	r25, Z
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	69 2f       	mov	r22, r25
    2554:	41 e0       	ldi	r20, 0x01	; 1
    2556:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	88 2f       	mov	r24, r24
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	fc 01       	movw	r30, r24
    2562:	e8 59       	subi	r30, 0x98	; 152
    2564:	fe 4f       	sbci	r31, 0xFE	; 254
    2566:	90 81       	ld	r25, Z
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	69 2f       	mov	r22, r25
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
u8 Rows[4] = {KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN, KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN};
u8 Cols[4] = {KEYPAD_COL1_PIN, KEYPAD_COL2_PIN, KEYPAD_COL3_PIN};

void KeyPad_voidInit(void){

	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	8f 5f       	subi	r24, 0xFF	; 255
    2576:	8a 83       	std	Y+2, r24	; 0x02
    2578:	8a 81       	ldd	r24, Y+2	; 0x02
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	10 f3       	brcs	.-60     	; 0x2542 <KeyPad_voidInit+0xe>
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
	}

	for(u8 colCounter = 0; colCounter<3;colCounter++){
    257e:	19 82       	std	Y+1, r1	; 0x01
    2580:	1b c0       	rjmp	.+54     	; 0x25b8 <KeyPad_voidInit+0x84>
		DIO_voidSetPinDirection(KEYPAD_PORT,Cols[colCounter],INPUT_PIN);
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	88 2f       	mov	r24, r24
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	fc 01       	movw	r30, r24
    258a:	e4 59       	subi	r30, 0x94	; 148
    258c:	fe 4f       	sbci	r31, 0xFE	; 254
    258e:	90 81       	ld	r25, Z
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	69 2f       	mov	r22, r25
    2594:	40 e0       	ldi	r20, 0x00	; 0
    2596:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KEYPAD_PORT,Cols[colCounter],HIGH);
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	fc 01       	movw	r30, r24
    25a2:	e4 59       	subi	r30, 0x94	; 148
    25a4:	fe 4f       	sbci	r31, 0xFE	; 254
    25a6:	90 81       	ld	r25, Z
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	69 2f       	mov	r22, r25
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
	}

	for(u8 colCounter = 0; colCounter<3;colCounter++){
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	8f 5f       	subi	r24, 0xFF	; 255
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	83 30       	cpi	r24, 0x03	; 3
    25bc:	10 f3       	brcs	.-60     	; 0x2582 <KeyPad_voidInit+0x4e>
		DIO_voidSetPinDirection(KEYPAD_PORT,Cols[colCounter],INPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Cols[colCounter],HIGH);
	}
}
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	cf 91       	pop	r28
    25c4:	df 91       	pop	r29
    25c6:	08 95       	ret

000025c8 <KeyPad_u8GetPress>:

u8 KeyPad_u8GetPress(void){
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	61 97       	sbiw	r28, 0x11	; 17
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Col;
	u8 x = KEYPAD_NOT_PRESSED;
    25dc:	8f ef       	ldi	r24, 0xFF	; 255
    25de:	88 8b       	std	Y+16, r24	; 0x10
	for(u8 rowCounter=0; rowCounter<4;rowCounter++){
    25e0:	1f 86       	std	Y+15, r1	; 0x0f
    25e2:	97 c0       	rjmp	.+302    	; 0x2712 <KeyPad_u8GetPress+0x14a>
		KeyPad_voidSelectLine(Rows[rowCounter]);
    25e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e6:	88 2f       	mov	r24, r24
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	fc 01       	movw	r30, r24
    25ec:	e8 59       	subi	r30, 0x98	; 152
    25ee:	fe 4f       	sbci	r31, 0xFE	; 254
    25f0:	80 81       	ld	r24, Z
    25f2:	0e 94 cf 13 	call	0x279e	; 0x279e <KeyPad_voidSelectLine>
		Local_u8Col = KeyPad_u8ReadButton(Rows[rowCounter]);
    25f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    25f8:	88 2f       	mov	r24, r24
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	fc 01       	movw	r30, r24
    25fe:	e8 59       	subi	r30, 0x98	; 152
    2600:	fe 4f       	sbci	r31, 0xFE	; 254
    2602:	80 81       	ld	r24, Z
    2604:	0e 94 9d 13 	call	0x273a	; 0x273a <KeyPad_u8ReadButton>
    2608:	89 8b       	std	Y+17, r24	; 0x11
		if(Local_u8Col != KEYPAD_NOT_PRESSED)
    260a:	89 89       	ldd	r24, Y+17	; 0x11
    260c:	8f 3f       	cpi	r24, 0xFF	; 255
    260e:	61 f0       	breq	.+24     	; 0x2628 <KeyPad_u8GetPress+0x60>
			x = (rowCounter*3)+Local_u8Col;
    2610:	8f 85       	ldd	r24, Y+15	; 0x0f
    2612:	28 2f       	mov	r18, r24
    2614:	30 e0       	ldi	r19, 0x00	; 0
    2616:	c9 01       	movw	r24, r18
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	82 0f       	add	r24, r18
    261e:	93 1f       	adc	r25, r19
    2620:	98 2f       	mov	r25, r24
    2622:	89 89       	ldd	r24, Y+17	; 0x11
    2624:	89 0f       	add	r24, r25
    2626:	88 8b       	std	Y+16, r24	; 0x10
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	a0 e0       	ldi	r26, 0x00	; 0
    262e:	b0 e4       	ldi	r27, 0x40	; 64
    2630:	8b 87       	std	Y+11, r24	; 0x0b
    2632:	9c 87       	std	Y+12, r25	; 0x0c
    2634:	ad 87       	std	Y+13, r26	; 0x0d
    2636:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2638:	6b 85       	ldd	r22, Y+11	; 0x0b
    263a:	7c 85       	ldd	r23, Y+12	; 0x0c
    263c:	8d 85       	ldd	r24, Y+13	; 0x0d
    263e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2640:	20 e0       	ldi	r18, 0x00	; 0
    2642:	30 e0       	ldi	r19, 0x00	; 0
    2644:	4a ef       	ldi	r20, 0xFA	; 250
    2646:	54 e4       	ldi	r21, 0x44	; 68
    2648:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	8f 83       	std	Y+7, r24	; 0x07
    2652:	98 87       	std	Y+8, r25	; 0x08
    2654:	a9 87       	std	Y+9, r26	; 0x09
    2656:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2658:	6f 81       	ldd	r22, Y+7	; 0x07
    265a:	78 85       	ldd	r23, Y+8	; 0x08
    265c:	89 85       	ldd	r24, Y+9	; 0x09
    265e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e8       	ldi	r20, 0x80	; 128
    2666:	5f e3       	ldi	r21, 0x3F	; 63
    2668:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    266c:	88 23       	and	r24, r24
    266e:	2c f4       	brge	.+10     	; 0x267a <KeyPad_u8GetPress+0xb2>
		__ticks = 1;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	9e 83       	std	Y+6, r25	; 0x06
    2676:	8d 83       	std	Y+5, r24	; 0x05
    2678:	3f c0       	rjmp	.+126    	; 0x26f8 <KeyPad_u8GetPress+0x130>
	else if (__tmp > 65535)
    267a:	6f 81       	ldd	r22, Y+7	; 0x07
    267c:	78 85       	ldd	r23, Y+8	; 0x08
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	3f ef       	ldi	r19, 0xFF	; 255
    2686:	4f e7       	ldi	r20, 0x7F	; 127
    2688:	57 e4       	ldi	r21, 0x47	; 71
    268a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    268e:	18 16       	cp	r1, r24
    2690:	4c f5       	brge	.+82     	; 0x26e4 <KeyPad_u8GetPress+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2692:	6b 85       	ldd	r22, Y+11	; 0x0b
    2694:	7c 85       	ldd	r23, Y+12	; 0x0c
    2696:	8d 85       	ldd	r24, Y+13	; 0x0d
    2698:	9e 85       	ldd	r25, Y+14	; 0x0e
    269a:	20 e0       	ldi	r18, 0x00	; 0
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	40 e2       	ldi	r20, 0x20	; 32
    26a0:	51 e4       	ldi	r21, 0x41	; 65
    26a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	bc 01       	movw	r22, r24
    26ac:	cd 01       	movw	r24, r26
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	0f c0       	rjmp	.+30     	; 0x26da <KeyPad_u8GetPress+0x112>
    26bc:	88 ec       	ldi	r24, 0xC8	; 200
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	9c 83       	std	Y+4, r25	; 0x04
    26c2:	8b 83       	std	Y+3, r24	; 0x03
    26c4:	8b 81       	ldd	r24, Y+3	; 0x03
    26c6:	9c 81       	ldd	r25, Y+4	; 0x04
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <KeyPad_u8GetPress+0x100>
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d0:	8d 81       	ldd	r24, Y+5	; 0x05
    26d2:	9e 81       	ldd	r25, Y+6	; 0x06
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	9e 83       	std	Y+6, r25	; 0x06
    26d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	9e 81       	ldd	r25, Y+6	; 0x06
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	69 f7       	brne	.-38     	; 0x26bc <KeyPad_u8GetPress+0xf4>
    26e2:	14 c0       	rjmp	.+40     	; 0x270c <KeyPad_u8GetPress+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26e4:	6f 81       	ldd	r22, Y+7	; 0x07
    26e6:	78 85       	ldd	r23, Y+8	; 0x08
    26e8:	89 85       	ldd	r24, Y+9	; 0x09
    26ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9e 83       	std	Y+6, r25	; 0x06
    26f6:	8d 83       	std	Y+5, r24	; 0x05
    26f8:	8d 81       	ldd	r24, Y+5	; 0x05
    26fa:	9e 81       	ldd	r25, Y+6	; 0x06
    26fc:	9a 83       	std	Y+2, r25	; 0x02
    26fe:	89 83       	std	Y+1, r24	; 0x01
    2700:	89 81       	ldd	r24, Y+1	; 0x01
    2702:	9a 81       	ldd	r25, Y+2	; 0x02
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	f1 f7       	brne	.-4      	; 0x2704 <KeyPad_u8GetPress+0x13c>
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
}

u8 KeyPad_u8GetPress(void){
	u8 Local_u8Col;
	u8 x = KEYPAD_NOT_PRESSED;
	for(u8 rowCounter=0; rowCounter<4;rowCounter++){
    270c:	8f 85       	ldd	r24, Y+15	; 0x0f
    270e:	8f 5f       	subi	r24, 0xFF	; 255
    2710:	8f 87       	std	Y+15, r24	; 0x0f
    2712:	8f 85       	ldd	r24, Y+15	; 0x0f
    2714:	84 30       	cpi	r24, 0x04	; 4
    2716:	08 f4       	brcc	.+2      	; 0x271a <KeyPad_u8GetPress+0x152>
    2718:	65 cf       	rjmp	.-310    	; 0x25e4 <KeyPad_u8GetPress+0x1c>
		Local_u8Col = KeyPad_u8ReadButton(Rows[rowCounter]);
		if(Local_u8Col != KEYPAD_NOT_PRESSED)
			x = (rowCounter*3)+Local_u8Col;
		_delay_ms(2);
	}
	return Keypad_Char[x];
    271a:	88 89       	ldd	r24, Y+16	; 0x10
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	fc 01       	movw	r30, r24
    2722:	e0 59       	subi	r30, 0x90	; 144
    2724:	fe 4f       	sbci	r31, 0xFE	; 254
    2726:	80 81       	ld	r24, Z
}
    2728:	61 96       	adiw	r28, 0x11	; 17
    272a:	0f b6       	in	r0, 0x3f	; 63
    272c:	f8 94       	cli
    272e:	de bf       	out	0x3e, r29	; 62
    2730:	0f be       	out	0x3f, r0	; 63
    2732:	cd bf       	out	0x3d, r28	; 61
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	08 95       	ret

0000273a <KeyPad_u8ReadButton>:

u8 KeyPad_u8ReadButton(u8 Copy_u8Line){
    273a:	df 93       	push	r29
    273c:	cf 93       	push	r28
    273e:	00 d0       	rcall	.+0      	; 0x2740 <KeyPad_u8ReadButton+0x6>
    2740:	0f 92       	push	r0
    2742:	cd b7       	in	r28, 0x3d	; 61
    2744:	de b7       	in	r29, 0x3e	; 62
    2746:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 colCounter=0; colCounter<3;colCounter++){
    2748:	19 82       	std	Y+1, r1	; 0x01
    274a:	18 c0       	rjmp	.+48     	; 0x277c <KeyPad_u8ReadButton+0x42>
		if(DIO_u8GetPinValue(KEYPAD_PORT, Cols[colCounter]) == LOW){
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	fc 01       	movw	r30, r24
    2754:	e4 59       	subi	r30, 0x94	; 148
    2756:	fe 4f       	sbci	r31, 0xFE	; 254
    2758:	90 81       	ld	r25, Z
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	69 2f       	mov	r22, r25
    275e:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <DIO_u8GetPinValue>
    2762:	88 23       	and	r24, r24
    2764:	41 f4       	brne	.+16     	; 0x2776 <KeyPad_u8ReadButton+0x3c>
			DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	6a 81       	ldd	r22, Y+2	; 0x02
    276a:	41 e0       	ldi	r20, 0x01	; 1
    276c:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
			return colCounter;
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	8b 83       	std	Y+3, r24	; 0x03
    2774:	0d c0       	rjmp	.+26     	; 0x2790 <KeyPad_u8ReadButton+0x56>
	return Keypad_Char[x];
}

u8 KeyPad_u8ReadButton(u8 Copy_u8Line){

	for(u8 colCounter=0; colCounter<3;colCounter++){
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	8f 5f       	subi	r24, 0xFF	; 255
    277a:	89 83       	std	Y+1, r24	; 0x01
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	83 30       	cpi	r24, 0x03	; 3
    2780:	28 f3       	brcs	.-54     	; 0x274c <KeyPad_u8ReadButton+0x12>
			DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
			return colCounter;
		}
	}

	DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	6a 81       	ldd	r22, Y+2	; 0x02
    2786:	41 e0       	ldi	r20, 0x01	; 1
    2788:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
	return KEYPAD_NOT_PRESSED;
    278c:	8f ef       	ldi	r24, 0xFF	; 255
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8b 81       	ldd	r24, Y+3	; 0x03


}
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	0f 90       	pop	r0
    2798:	cf 91       	pop	r28
    279a:	df 91       	pop	r29
    279c:	08 95       	ret

0000279e <KeyPad_voidSelectLine>:
void KeyPad_voidSelectLine(u8 Copy_u8Line){
    279e:	df 93       	push	r29
    27a0:	cf 93       	push	r28
    27a2:	0f 92       	push	r0
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, LOW);
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	69 81       	ldd	r22, Y+1	; 0x01
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
}
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <LCD_voidSendCommand>:

#include <util/delay.h>


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
    27c4:	2f 97       	sbiw	r28, 0x0f	; 15
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOW);
    27d2:	83 e0       	ldi	r24, 0x03	; 3
    27d4:	62 e0       	ldi	r22, 0x02	; 2
    27d6:	40 e0       	ldi	r20, 0x00	; 0
    27d8:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
	/* Set Rs for LOW for send command*/

	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    27dc:	83 e0       	ldi	r24, 0x03	; 3
    27de:	63 e0       	ldi	r22, 0x03	; 3
    27e0:	40 e0       	ldi	r20, 0x00	; 0
    27e2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
	/* Set Rw for LOW for write*/

	DIO_voidSetPortValue (LCD_DATA_PORT,Copy_u8Command);
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	6f 85       	ldd	r22, Y+15	; 0x0f
    27ea:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_voidSetPortValue>
	/*Send command*/

	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    27ee:	83 e0       	ldi	r24, 0x03	; 3
    27f0:	64 e0       	ldi	r22, 0x04	; 4
    27f2:	41 e0       	ldi	r20, 0x01	; 1
    27f4:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	a0 e0       	ldi	r26, 0x00	; 0
    27fe:	b0 e4       	ldi	r27, 0x40	; 64
    2800:	8b 87       	std	Y+11, r24	; 0x0b
    2802:	9c 87       	std	Y+12, r25	; 0x0c
    2804:	ad 87       	std	Y+13, r26	; 0x0d
    2806:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2808:	6b 85       	ldd	r22, Y+11	; 0x0b
    280a:	7c 85       	ldd	r23, Y+12	; 0x0c
    280c:	8d 85       	ldd	r24, Y+13	; 0x0d
    280e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4a ef       	ldi	r20, 0xFA	; 250
    2816:	54 e4       	ldi	r21, 0x44	; 68
    2818:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	8f 83       	std	Y+7, r24	; 0x07
    2822:	98 87       	std	Y+8, r25	; 0x08
    2824:	a9 87       	std	Y+9, r26	; 0x09
    2826:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2828:	6f 81       	ldd	r22, Y+7	; 0x07
    282a:	78 85       	ldd	r23, Y+8	; 0x08
    282c:	89 85       	ldd	r24, Y+9	; 0x09
    282e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2830:	20 e0       	ldi	r18, 0x00	; 0
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	40 e8       	ldi	r20, 0x80	; 128
    2836:	5f e3       	ldi	r21, 0x3F	; 63
    2838:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    283c:	88 23       	and	r24, r24
    283e:	2c f4       	brge	.+10     	; 0x284a <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	9e 83       	std	Y+6, r25	; 0x06
    2846:	8d 83       	std	Y+5, r24	; 0x05
    2848:	3f c0       	rjmp	.+126    	; 0x28c8 <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	3f ef       	ldi	r19, 0xFF	; 255
    2856:	4f e7       	ldi	r20, 0x7F	; 127
    2858:	57 e4       	ldi	r21, 0x47	; 71
    285a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    285e:	18 16       	cp	r1, r24
    2860:	4c f5       	brge	.+82     	; 0x28b4 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2862:	6b 85       	ldd	r22, Y+11	; 0x0b
    2864:	7c 85       	ldd	r23, Y+12	; 0x0c
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e2       	ldi	r20, 0x20	; 32
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	bc 01       	movw	r22, r24
    287c:	cd 01       	movw	r24, r26
    287e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	9e 83       	std	Y+6, r25	; 0x06
    2888:	8d 83       	std	Y+5, r24	; 0x05
    288a:	0f c0       	rjmp	.+30     	; 0x28aa <LCD_voidSendCommand+0xee>
    288c:	88 ec       	ldi	r24, 0xC8	; 200
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c 83       	std	Y+4, r25	; 0x04
    2892:	8b 83       	std	Y+3, r24	; 0x03
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <LCD_voidSendCommand+0xdc>
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	00 97       	sbiw	r24, 0x00	; 0
    28b0:	69 f7       	brne	.-38     	; 0x288c <LCD_voidSendCommand+0xd0>
    28b2:	14 c0       	rjmp	.+40     	; 0x28dc <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28b4:	6f 81       	ldd	r22, Y+7	; 0x07
    28b6:	78 85       	ldd	r23, Y+8	; 0x08
    28b8:	89 85       	ldd	r24, Y+9	; 0x09
    28ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    28bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	9a 83       	std	Y+2, r25	; 0x02
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	9a 81       	ldd	r25, Y+2	; 0x02
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	f1 f7       	brne	.-4      	; 0x28d4 <LCD_voidSendCommand+0x118>
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	 DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	64 e0       	ldi	r22, 0x04	; 4
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
	/*Enable LCD*/
}
    28e6:	2f 96       	adiw	r28, 0x0f	; 15
    28e8:	0f b6       	in	r0, 0x3f	; 63
    28ea:	f8 94       	cli
    28ec:	de bf       	out	0x3e, r29	; 62
    28ee:	0f be       	out	0x3f, r0	; 63
    28f0:	cd bf       	out	0x3d, r28	; 61
    28f2:	cf 91       	pop	r28
    28f4:	df 91       	pop	r29
    28f6:	08 95       	ret

000028f8 <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    28f8:	df 93       	push	r29
    28fa:	cf 93       	push	r28
    28fc:	cd b7       	in	r28, 0x3d	; 61
    28fe:	de b7       	in	r29, 0x3e	; 62
    2900:	2f 97       	sbiw	r28, 0x0f	; 15
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	f8 94       	cli
    2906:	de bf       	out	0x3e, r29	; 62
    2908:	0f be       	out	0x3f, r0	; 63
    290a:	cd bf       	out	0x3d, r28	; 61
    290c:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,HIGH);
    290e:	83 e0       	ldi	r24, 0x03	; 3
    2910:	62 e0       	ldi	r22, 0x02	; 2
    2912:	41 e0       	ldi	r20, 0x01	; 1
    2914:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
	/* Set Rs for HIGH for send Data*/

	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    2918:	83 e0       	ldi	r24, 0x03	; 3
    291a:	63 e0       	ldi	r22, 0x03	; 3
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
	/* Set Rw for LOW for write*/

	DIO_voidSetPortValue (LCD_DATA_PORT,Copy_u8Data);
    2922:	82 e0       	ldi	r24, 0x02	; 2
    2924:	6f 85       	ldd	r22, Y+15	; 0x0f
    2926:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_voidSetPortValue>
	/*Send DATA*/

	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    292a:	83 e0       	ldi	r24, 0x03	; 3
    292c:	64 e0       	ldi	r22, 0x04	; 4
    292e:	41 e0       	ldi	r20, 0x01	; 1
    2930:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	a0 e0       	ldi	r26, 0x00	; 0
    293a:	b0 e4       	ldi	r27, 0x40	; 64
    293c:	8b 87       	std	Y+11, r24	; 0x0b
    293e:	9c 87       	std	Y+12, r25	; 0x0c
    2940:	ad 87       	std	Y+13, r26	; 0x0d
    2942:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2944:	6b 85       	ldd	r22, Y+11	; 0x0b
    2946:	7c 85       	ldd	r23, Y+12	; 0x0c
    2948:	8d 85       	ldd	r24, Y+13	; 0x0d
    294a:	9e 85       	ldd	r25, Y+14	; 0x0e
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	30 e0       	ldi	r19, 0x00	; 0
    2950:	4a ef       	ldi	r20, 0xFA	; 250
    2952:	54 e4       	ldi	r21, 0x44	; 68
    2954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2958:	dc 01       	movw	r26, r24
    295a:	cb 01       	movw	r24, r22
    295c:	8f 83       	std	Y+7, r24	; 0x07
    295e:	98 87       	std	Y+8, r25	; 0x08
    2960:	a9 87       	std	Y+9, r26	; 0x09
    2962:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2964:	6f 81       	ldd	r22, Y+7	; 0x07
    2966:	78 85       	ldd	r23, Y+8	; 0x08
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e8       	ldi	r20, 0x80	; 128
    2972:	5f e3       	ldi	r21, 0x3F	; 63
    2974:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2978:	88 23       	and	r24, r24
    297a:	2c f4       	brge	.+10     	; 0x2986 <LCD_voidSendData+0x8e>
		__ticks = 1;
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	90 e0       	ldi	r25, 0x00	; 0
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
    2984:	3f c0       	rjmp	.+126    	; 0x2a04 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    2986:	6f 81       	ldd	r22, Y+7	; 0x07
    2988:	78 85       	ldd	r23, Y+8	; 0x08
    298a:	89 85       	ldd	r24, Y+9	; 0x09
    298c:	9a 85       	ldd	r25, Y+10	; 0x0a
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	3f ef       	ldi	r19, 0xFF	; 255
    2992:	4f e7       	ldi	r20, 0x7F	; 127
    2994:	57 e4       	ldi	r21, 0x47	; 71
    2996:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    299a:	18 16       	cp	r1, r24
    299c:	4c f5       	brge	.+82     	; 0x29f0 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299e:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	40 e2       	ldi	r20, 0x20	; 32
    29ac:	51 e4       	ldi	r21, 0x41	; 65
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	bc 01       	movw	r22, r24
    29b8:	cd 01       	movw	r24, r26
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	0f c0       	rjmp	.+30     	; 0x29e6 <LCD_voidSendData+0xee>
    29c8:	88 ec       	ldi	r24, 0xC8	; 200
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	9c 83       	std	Y+4, r25	; 0x04
    29ce:	8b 83       	std	Y+3, r24	; 0x03
    29d0:	8b 81       	ldd	r24, Y+3	; 0x03
    29d2:	9c 81       	ldd	r25, Y+4	; 0x04
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_voidSendData+0xdc>
    29d8:	9c 83       	std	Y+4, r25	; 0x04
    29da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29dc:	8d 81       	ldd	r24, Y+5	; 0x05
    29de:	9e 81       	ldd	r25, Y+6	; 0x06
    29e0:	01 97       	sbiw	r24, 0x01	; 1
    29e2:	9e 83       	std	Y+6, r25	; 0x06
    29e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	69 f7       	brne	.-38     	; 0x29c8 <LCD_voidSendData+0xd0>
    29ee:	14 c0       	rjmp	.+40     	; 0x2a18 <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f0:	6f 81       	ldd	r22, Y+7	; 0x07
    29f2:	78 85       	ldd	r23, Y+8	; 0x08
    29f4:	89 85       	ldd	r24, Y+9	; 0x09
    29f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	9e 83       	std	Y+6, r25	; 0x06
    2a02:	8d 83       	std	Y+5, r24	; 0x05
    2a04:	8d 81       	ldd	r24, Y+5	; 0x05
    2a06:	9e 81       	ldd	r25, Y+6	; 0x06
    2a08:	9a 83       	std	Y+2, r25	; 0x02
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	f1 f7       	brne	.-4      	; 0x2a10 <LCD_voidSendData+0x118>
    2a14:	9a 83       	std	Y+2, r25	; 0x02
    2a16:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    2a18:	83 e0       	ldi	r24, 0x03	; 3
    2a1a:	64 e0       	ldi	r22, 0x04	; 4
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_voidSetPinValue>
	/*Enable LCD*/

}
    2a22:	2f 96       	adiw	r28, 0x0f	; 15
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	cf 91       	pop	r28
    2a30:	df 91       	pop	r29
    2a32:	08 95       	ret

00002a34 <LCD_voidInit>:

void LCD_voidInit()
{
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	2e 97       	sbiw	r28, 0x0e	; 14
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	de bf       	out	0x3e, r29	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	cd bf       	out	0x3d, r28	; 61
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	ac e0       	ldi	r26, 0x0C	; 12
    2a4e:	b2 e4       	ldi	r27, 0x42	; 66
    2a50:	8b 87       	std	Y+11, r24	; 0x0b
    2a52:	9c 87       	std	Y+12, r25	; 0x0c
    2a54:	ad 87       	std	Y+13, r26	; 0x0d
    2a56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	4a ef       	ldi	r20, 0xFA	; 250
    2a66:	54 e4       	ldi	r21, 0x44	; 68
    2a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	8f 83       	std	Y+7, r24	; 0x07
    2a72:	98 87       	std	Y+8, r25	; 0x08
    2a74:	a9 87       	std	Y+9, r26	; 0x09
    2a76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a78:	6f 81       	ldd	r22, Y+7	; 0x07
    2a7a:	78 85       	ldd	r23, Y+8	; 0x08
    2a7c:	89 85       	ldd	r24, Y+9	; 0x09
    2a7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	40 e8       	ldi	r20, 0x80	; 128
    2a86:	5f e3       	ldi	r21, 0x3F	; 63
    2a88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a8c:	88 23       	and	r24, r24
    2a8e:	2c f4       	brge	.+10     	; 0x2a9a <LCD_voidInit+0x66>
		__ticks = 1;
    2a90:	81 e0       	ldi	r24, 0x01	; 1
    2a92:	90 e0       	ldi	r25, 0x00	; 0
    2a94:	9e 83       	std	Y+6, r25	; 0x06
    2a96:	8d 83       	std	Y+5, r24	; 0x05
    2a98:	3f c0       	rjmp	.+126    	; 0x2b18 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a9c:	78 85       	ldd	r23, Y+8	; 0x08
    2a9e:	89 85       	ldd	r24, Y+9	; 0x09
    2aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2aa2:	20 e0       	ldi	r18, 0x00	; 0
    2aa4:	3f ef       	ldi	r19, 0xFF	; 255
    2aa6:	4f e7       	ldi	r20, 0x7F	; 127
    2aa8:	57 e4       	ldi	r21, 0x47	; 71
    2aaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aae:	18 16       	cp	r1, r24
    2ab0:	4c f5       	brge	.+82     	; 0x2b04 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	51 e4       	ldi	r21, 0x41	; 65
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	bc 01       	movw	r22, r24
    2acc:	cd 01       	movw	r24, r26
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <LCD_voidInit+0xc6>
    2adc:	88 ec       	ldi	r24, 0xC8	; 200
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	9c 83       	std	Y+4, r25	; 0x04
    2ae2:	8b 83       	std	Y+3, r24	; 0x03
    2ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <LCD_voidInit+0xb4>
    2aec:	9c 83       	std	Y+4, r25	; 0x04
    2aee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af0:	8d 81       	ldd	r24, Y+5	; 0x05
    2af2:	9e 81       	ldd	r25, Y+6	; 0x06
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	9e 83       	std	Y+6, r25	; 0x06
    2af8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afa:	8d 81       	ldd	r24, Y+5	; 0x05
    2afc:	9e 81       	ldd	r25, Y+6	; 0x06
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	69 f7       	brne	.-38     	; 0x2adc <LCD_voidInit+0xa8>
    2b02:	14 c0       	rjmp	.+40     	; 0x2b2c <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b04:	6f 81       	ldd	r22, Y+7	; 0x07
    2b06:	78 85       	ldd	r23, Y+8	; 0x08
    2b08:	89 85       	ldd	r24, Y+9	; 0x09
    2b0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
    2b18:	8d 81       	ldd	r24, Y+5	; 0x05
    2b1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b1c:	9a 83       	std	Y+2, r25	; 0x02
    2b1e:	89 83       	std	Y+1, r24	; 0x01
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	9a 81       	ldd	r25, Y+2	; 0x02
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <LCD_voidInit+0xf0>
    2b28:	9a 83       	std	Y+2, r25	; 0x02
    2b2a:	89 83       	std	Y+1, r24	; 0x01
	/*Wait after the power on for 35 ms*/
	_delay_ms(35);

	/*Function set
	 * 2 lines *** 5*8 pixels size*/
	LCD_voidSendCommand(0b00111100);
    2b2c:	8c e3       	ldi	r24, 0x3C	; 60
    2b2e:	0e 94 de 13 	call	0x27bc	; 0x27bc <LCD_voidSendCommand>

	/*Display On/OFF
	 * Display ON *** cursor OFF *** Blink OFF*/
	LCD_voidSendCommand(0b00001100);
    2b32:	8c e0       	ldi	r24, 0x0C	; 12
    2b34:	0e 94 de 13 	call	0x27bc	; 0x27bc <LCD_voidSendCommand>

	/*Display Clear*/
	LCD_voidSendCommand(0b00000001);
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	0e 94 de 13 	call	0x27bc	; 0x27bc <LCD_voidSendCommand>

}
    2b3e:	2e 96       	adiw	r28, 0x0e	; 14
    2b40:	0f b6       	in	r0, 0x3f	; 63
    2b42:	f8 94       	cli
    2b44:	de bf       	out	0x3e, r29	; 62
    2b46:	0f be       	out	0x3f, r0	; 63
    2b48:	cd bf       	out	0x3d, r28	; 61
    2b4a:	cf 91       	pop	r28
    2b4c:	df 91       	pop	r29
    2b4e:	08 95       	ret

00002b50 <LCD_voidConfigDirection>:

void LCD_voidConfigDirection()
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
	/* PINS Ditection */
	DIO_voidSetPortDitection (LCD_DATA_PORT,OUTPUT_PORT);
    2b58:	82 e0       	ldi	r24, 0x02	; 2
    2b5a:	6f ef       	ldi	r22, 0xFF	; 255
    2b5c:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_voidSetPortDitection>
	DIO_voidSetPinDirection (LCD_CTRL_PORT,LCD_RS_PIN,HIGH);
    2b60:	83 e0       	ldi	r24, 0x03	; 3
    2b62:	62 e0       	ldi	r22, 0x02	; 2
    2b64:	41 e0       	ldi	r20, 0x01	; 1
    2b66:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CTRL_PORT,LCD_RW_PIN,HIGH);
    2b6a:	83 e0       	ldi	r24, 0x03	; 3
    2b6c:	63 e0       	ldi	r22, 0x03	; 3
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    2b74:	83 e0       	ldi	r24, 0x03	; 3
    2b76:	64 e0       	ldi	r22, 0x04	; 4
    2b78:	41 e0       	ldi	r20, 0x01	; 1
    2b7a:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_voidSetPinDirection>
}
    2b7e:	cf 91       	pop	r28
    2b80:	df 91       	pop	r29
    2b82:	08 95       	ret

00002b84 <LCD_voidWriteString>:

void LCD_voidWriteString(s8 *Copy_u8String)
{
    2b84:	df 93       	push	r29
    2b86:	cf 93       	push	r28
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <LCD_voidWriteString+0x6>
    2b8a:	0f 92       	push	r0
    2b8c:	cd b7       	in	r28, 0x3d	; 61
    2b8e:	de b7       	in	r29, 0x3e	; 62
    2b90:	9b 83       	std	Y+3, r25	; 0x03
    2b92:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Index =0;
    2b94:	19 82       	std	Y+1, r1	; 0x01
    2b96:	0e c0       	rjmp	.+28     	; 0x2bb4 <LCD_voidWriteString+0x30>
	while (Copy_u8String[Local_Index]!=0)
	{
		LCD_voidSendData (Copy_u8String[Local_Index]);
    2b98:	89 81       	ldd	r24, Y+1	; 0x01
    2b9a:	28 2f       	mov	r18, r24
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba2:	fc 01       	movw	r30, r24
    2ba4:	e2 0f       	add	r30, r18
    2ba6:	f3 1f       	adc	r31, r19
    2ba8:	80 81       	ld	r24, Z
    2baa:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
		Local_Index++;
    2bae:	89 81       	ldd	r24, Y+1	; 0x01
    2bb0:	8f 5f       	subi	r24, 0xFF	; 255
    2bb2:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(s8 *Copy_u8String)
{
	u8 Local_Index =0;
	while (Copy_u8String[Local_Index]!=0)
    2bb4:	89 81       	ldd	r24, Y+1	; 0x01
    2bb6:	28 2f       	mov	r18, r24
    2bb8:	30 e0       	ldi	r19, 0x00	; 0
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	e2 0f       	add	r30, r18
    2bc2:	f3 1f       	adc	r31, r19
    2bc4:	80 81       	ld	r24, Z
    2bc6:	88 23       	and	r24, r24
    2bc8:	39 f7       	brne	.-50     	; 0x2b98 <LCD_voidWriteString+0x14>
	{
		LCD_voidSendData (Copy_u8String[Local_Index]);
		Local_Index++;
	}
}
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u8 Copy_u8Number)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <LCD_voidWriteNumber+0x6>
    2bdc:	0f 92       	push	r0
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Number)
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	28 2f       	mov	r18, r24
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	3b 83       	std	Y+3, r19	; 0x03
    2bec:	2a 83       	std	Y+2, r18	; 0x02
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf2:	84 30       	cpi	r24, 0x04	; 4
    2bf4:	91 05       	cpc	r25, r1
    2bf6:	09 f4       	brne	.+2      	; 0x2bfa <LCD_voidWriteNumber+0x24>
    2bf8:	4f c0       	rjmp	.+158    	; 0x2c98 <LCD_voidWriteNumber+0xc2>
    2bfa:	2a 81       	ldd	r18, Y+2	; 0x02
    2bfc:	3b 81       	ldd	r19, Y+3	; 0x03
    2bfe:	25 30       	cpi	r18, 0x05	; 5
    2c00:	31 05       	cpc	r19, r1
    2c02:	d4 f4       	brge	.+52     	; 0x2c38 <LCD_voidWriteNumber+0x62>
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	9b 81       	ldd	r25, Y+3	; 0x03
    2c08:	81 30       	cpi	r24, 0x01	; 1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	c9 f1       	breq	.+114    	; 0x2c80 <LCD_voidWriteNumber+0xaa>
    2c0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c10:	3b 81       	ldd	r19, Y+3	; 0x03
    2c12:	22 30       	cpi	r18, 0x02	; 2
    2c14:	31 05       	cpc	r19, r1
    2c16:	2c f4       	brge	.+10     	; 0x2c22 <LCD_voidWriteNumber+0x4c>
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	61 f1       	breq	.+88     	; 0x2c78 <LCD_voidWriteNumber+0xa2>
    2c20:	52 c0       	rjmp	.+164    	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
    2c22:	2a 81       	ldd	r18, Y+2	; 0x02
    2c24:	3b 81       	ldd	r19, Y+3	; 0x03
    2c26:	22 30       	cpi	r18, 0x02	; 2
    2c28:	31 05       	cpc	r19, r1
    2c2a:	71 f1       	breq	.+92     	; 0x2c88 <LCD_voidWriteNumber+0xb2>
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c30:	83 30       	cpi	r24, 0x03	; 3
    2c32:	91 05       	cpc	r25, r1
    2c34:	69 f1       	breq	.+90     	; 0x2c90 <LCD_voidWriteNumber+0xba>
    2c36:	47 c0       	rjmp	.+142    	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
    2c38:	2a 81       	ldd	r18, Y+2	; 0x02
    2c3a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c3c:	27 30       	cpi	r18, 0x07	; 7
    2c3e:	31 05       	cpc	r19, r1
    2c40:	b9 f1       	breq	.+110    	; 0x2cb0 <LCD_voidWriteNumber+0xda>
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	9b 81       	ldd	r25, Y+3	; 0x03
    2c46:	88 30       	cpi	r24, 0x08	; 8
    2c48:	91 05       	cpc	r25, r1
    2c4a:	5c f4       	brge	.+22     	; 0x2c62 <LCD_voidWriteNumber+0x8c>
    2c4c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c4e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c50:	25 30       	cpi	r18, 0x05	; 5
    2c52:	31 05       	cpc	r19, r1
    2c54:	29 f1       	breq	.+74     	; 0x2ca0 <LCD_voidWriteNumber+0xca>
    2c56:	8a 81       	ldd	r24, Y+2	; 0x02
    2c58:	9b 81       	ldd	r25, Y+3	; 0x03
    2c5a:	86 30       	cpi	r24, 0x06	; 6
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	21 f1       	breq	.+72     	; 0x2ca8 <LCD_voidWriteNumber+0xd2>
    2c60:	32 c0       	rjmp	.+100    	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
    2c62:	2a 81       	ldd	r18, Y+2	; 0x02
    2c64:	3b 81       	ldd	r19, Y+3	; 0x03
    2c66:	28 30       	cpi	r18, 0x08	; 8
    2c68:	31 05       	cpc	r19, r1
    2c6a:	31 f1       	breq	.+76     	; 0x2cb8 <LCD_voidWriteNumber+0xe2>
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	89 30       	cpi	r24, 0x09	; 9
    2c72:	91 05       	cpc	r25, r1
    2c74:	29 f1       	breq	.+74     	; 0x2cc0 <LCD_voidWriteNumber+0xea>
    2c76:	27 c0       	rjmp	.+78     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
	{
	case 0:
		LCD_voidSendData('0');
    2c78:	80 e3       	ldi	r24, 0x30	; 48
    2c7a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2c7e:	23 c0       	rjmp	.+70     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 1:
		LCD_voidSendData('1');
    2c80:	81 e3       	ldi	r24, 0x31	; 49
    2c82:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2c86:	1f c0       	rjmp	.+62     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 2:
		LCD_voidSendData('2');
    2c88:	82 e3       	ldi	r24, 0x32	; 50
    2c8a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2c8e:	1b c0       	rjmp	.+54     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 3:
		LCD_voidSendData('3');
    2c90:	83 e3       	ldi	r24, 0x33	; 51
    2c92:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2c96:	17 c0       	rjmp	.+46     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 4:
		LCD_voidSendData('4');
    2c98:	84 e3       	ldi	r24, 0x34	; 52
    2c9a:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2c9e:	13 c0       	rjmp	.+38     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 5:
		LCD_voidSendData('5');
    2ca0:	85 e3       	ldi	r24, 0x35	; 53
    2ca2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2ca6:	0f c0       	rjmp	.+30     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 6:
		LCD_voidSendData('6');
    2ca8:	86 e3       	ldi	r24, 0x36	; 54
    2caa:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2cae:	0b c0       	rjmp	.+22     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 7:
		LCD_voidSendData('7');
    2cb0:	87 e3       	ldi	r24, 0x37	; 55
    2cb2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2cb6:	07 c0       	rjmp	.+14     	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 8:
		LCD_voidSendData('8');
    2cb8:	88 e3       	ldi	r24, 0x38	; 56
    2cba:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <LCD_voidWriteNumber+0xf0>
		break;
	case 9:
		LCD_voidSendData('9');
    2cc0:	89 e3       	ldi	r24, 0x39	; 57
    2cc2:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
		break;
	default:
		break;

	}
}
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	0f 90       	pop	r0
    2ccc:	cf 91       	pop	r28
    2cce:	df 91       	pop	r29
    2cd0:	08 95       	ret

00002cd2 <LCD_voidGoToXY>:

void LCD_voidGoToXY (u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    2cd2:	df 93       	push	r29
    2cd4:	cf 93       	push	r28
    2cd6:	00 d0       	rcall	.+0      	; 0x2cd8 <LCD_voidGoToXY+0x6>
    2cd8:	0f 92       	push	r0
    2cda:	cd b7       	in	r28, 0x3d	; 61
    2cdc:	de b7       	in	r29, 0x3e	; 62
    2cde:	8a 83       	std	Y+2, r24	; 0x02
    2ce0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAM_Address;

	if (Copy_u8YPos == LCD_LINE_ONE)
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	88 23       	and	r24, r24
    2ce6:	19 f4       	brne	.+6      	; 0x2cee <LCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAM_Address=Copy_u8XPos;
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	89 83       	std	Y+1, r24	; 0x01
    2cec:	06 c0       	rjmp	.+12     	; 0x2cfa <LCD_voidGoToXY+0x28>
	}
	else if (Copy_u8YPos == LCD_LINE_TWO)
    2cee:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf0:	81 30       	cpi	r24, 0x01	; 1
    2cf2:	19 f4       	brne	.+6      	; 0x2cfa <LCD_voidGoToXY+0x28>
	{
		Local_u8DDRAM_Address=Copy_u8XPos +0x40;
    2cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf6:	80 5c       	subi	r24, 0xC0	; 192
    2cf8:	89 83       	std	Y+1, r24	; 0x01
	}

	Local_u8DDRAM_Address=Local_u8DDRAM_Address +128;// 0b10000000 >> 128
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	80 58       	subi	r24, 0x80	; 128
    2cfe:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand (Local_u8DDRAM_Address);
    2d00:	89 81       	ldd	r24, Y+1	; 0x01
    2d02:	0e 94 de 13 	call	0x27bc	; 0x27bc <LCD_voidSendCommand>
}
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <LCD_voidWriteSpecialChar>:

void LCD_voidWriteSpecialChar (u8 *Copy_u8Pattern, u8 Copy_u8XPos,u8 Copy_u8YPos,u8 Copy_u8PatternNumber)
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
    2d1a:	27 97       	sbiw	r28, 0x07	; 7
    2d1c:	0f b6       	in	r0, 0x3f	; 63
    2d1e:	f8 94       	cli
    2d20:	de bf       	out	0x3e, r29	; 62
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	cd bf       	out	0x3d, r28	; 61
    2d26:	9c 83       	std	Y+4, r25	; 0x04
    2d28:	8b 83       	std	Y+3, r24	; 0x03
    2d2a:	6d 83       	std	Y+5, r22	; 0x05
    2d2c:	4e 83       	std	Y+6, r20	; 0x06
    2d2e:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAM_Address = Copy_u8PatternNumber *8 ;
    2d30:	8f 81       	ldd	r24, Y+7	; 0x07
    2d32:	88 2f       	mov	r24, r24
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidSendCommand (Local_u8CGRAM_Address+64); //0b01000000 >> 64
    2d44:	8a 81       	ldd	r24, Y+2	; 0x02
    2d46:	80 5c       	subi	r24, 0xC0	; 192
    2d48:	0e 94 de 13 	call	0x27bc	; 0x27bc <LCD_voidSendCommand>

	for (u8 Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    2d4c:	19 82       	std	Y+1, r1	; 0x01
    2d4e:	0e c0       	rjmp	.+28     	; 0x2d6c <LCD_voidWriteSpecialChar+0x5a>
	{
		LCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	8b 81       	ldd	r24, Y+3	; 0x03
    2d58:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e2 0f       	add	r30, r18
    2d5e:	f3 1f       	adc	r31, r19
    2d60:	80 81       	ld	r24, Z
    2d62:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
{
	u8 Local_u8CGRAM_Address = Copy_u8PatternNumber *8 ;

	LCD_voidSendCommand (Local_u8CGRAM_Address+64); //0b01000000 >> 64

	for (u8 Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	8f 5f       	subi	r24, 0xFF	; 255
    2d6a:	89 83       	std	Y+1, r24	; 0x01
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	88 30       	cpi	r24, 0x08	; 8
    2d70:	78 f3       	brcs	.-34     	; 0x2d50 <LCD_voidWriteSpecialChar+0x3e>
	{
		LCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
	}
	LCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    2d72:	8d 81       	ldd	r24, Y+5	; 0x05
    2d74:	6e 81       	ldd	r22, Y+6	; 0x06
    2d76:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <LCD_voidGoToXY>
	LCD_voidSendData(Copy_u8PatternNumber);
    2d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    2d7c:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <LCD_voidSendData>
}
    2d80:	27 96       	adiw	r28, 0x07	; 7
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <PWM_voidInitTimer1>:
#include "Timer1_Registers.h"
#include "Timer1_Interface.h"


void PWM_voidInitTimer1()
{
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
	/*Select PWM non Inverting*/

	Clear_Bit(TCCR1A,TCCR1A_COM1A0);
    2d9a:	af e4       	ldi	r26, 0x4F	; 79
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	ef e4       	ldi	r30, 0x4F	; 79
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	8f 7b       	andi	r24, 0xBF	; 191
    2da6:	8c 93       	st	X, r24
	Set_Bit(TCCR1A,TCCR1A_COM1A1);
    2da8:	af e4       	ldi	r26, 0x4F	; 79
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	ef e4       	ldi	r30, 0x4F	; 79
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	80 68       	ori	r24, 0x80	; 128
    2db4:	8c 93       	st	X, r24

	/*Select Mode 14*/

	Clear_Bit(TCCR1A,TCCR1A_WGM10);
    2db6:	af e4       	ldi	r26, 0x4F	; 79
    2db8:	b0 e0       	ldi	r27, 0x00	; 0
    2dba:	ef e4       	ldi	r30, 0x4F	; 79
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	8e 7f       	andi	r24, 0xFE	; 254
    2dc2:	8c 93       	st	X, r24
	Set_Bit(TCCR1A,TCCR1A_WGM11);
    2dc4:	af e4       	ldi	r26, 0x4F	; 79
    2dc6:	b0 e0       	ldi	r27, 0x00	; 0
    2dc8:	ef e4       	ldi	r30, 0x4F	; 79
    2dca:	f0 e0       	ldi	r31, 0x00	; 0
    2dcc:	80 81       	ld	r24, Z
    2dce:	82 60       	ori	r24, 0x02	; 2
    2dd0:	8c 93       	st	X, r24

	Set_Bit(TCC1RB,TCC1RB_WGM12);
    2dd2:	ae e4       	ldi	r26, 0x4E	; 78
    2dd4:	b0 e0       	ldi	r27, 0x00	; 0
    2dd6:	ee e4       	ldi	r30, 0x4E	; 78
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	80 81       	ld	r24, Z
    2ddc:	88 60       	ori	r24, 0x08	; 8
    2dde:	8c 93       	st	X, r24
	Set_Bit(TCC1RB,TCC1RB_WGM13);
    2de0:	ae e4       	ldi	r26, 0x4E	; 78
    2de2:	b0 e0       	ldi	r27, 0x00	; 0
    2de4:	ee e4       	ldi	r30, 0x4E	; 78
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	80 61       	ori	r24, 0x10	; 16
    2dec:	8c 93       	st	X, r24

	/*Select prescaler div_8 */

	TCC1RB&=0b11111000;
    2dee:	ae e4       	ldi	r26, 0x4E	; 78
    2df0:	b0 e0       	ldi	r27, 0x00	; 0
    2df2:	ee e4       	ldi	r30, 0x4E	; 78
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	80 81       	ld	r24, Z
    2df8:	88 7f       	andi	r24, 0xF8	; 248
    2dfa:	8c 93       	st	X, r24
	TCC1RB|=CLK_DIV_8<<TCC1RB_CS10_CS11_CS12;
    2dfc:	ae e4       	ldi	r26, 0x4E	; 78
    2dfe:	b0 e0       	ldi	r27, 0x00	; 0
    2e00:	ee e4       	ldi	r30, 0x4E	; 78
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	80 81       	ld	r24, Z
    2e06:	82 60       	ori	r24, 0x02	; 2
    2e08:	8c 93       	st	X, r24

	/*Set the number of ticks (Top)*/

	ICR1=20000;
    2e0a:	e6 e4       	ldi	r30, 0x46	; 70
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 e2       	ldi	r24, 0x20	; 32
    2e10:	9e e4       	ldi	r25, 0x4E	; 78
    2e12:	91 83       	std	Z+1, r25	; 0x01
    2e14:	80 83       	st	Z, r24

	/*Set the number of ticks of combare match (Compare Value)*/

	OCR1A=750;
    2e16:	ea e4       	ldi	r30, 0x4A	; 74
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	8e ee       	ldi	r24, 0xEE	; 238
    2e1c:	92 e0       	ldi	r25, 0x02	; 2
    2e1e:	91 83       	std	Z+1, r25	; 0x01
    2e20:	80 83       	st	Z, r24

}
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <PWM_voidSetCompareMatchValue>:

void PWM_voidSetCompareMatchValue(u16 Copy_u16value)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <PWM_voidSetCompareMatchValue+0x6>
    2e2e:	cd b7       	in	r28, 0x3d	; 61
    2e30:	de b7       	in	r29, 0x3e	; 62
    2e32:	9a 83       	std	Y+2, r25	; 0x02
    2e34:	89 83       	std	Y+1, r24	; 0x01

	/*Set the number of ticks of combare match (Compare Value)*/

	OCR1A=Copy_u16value;
    2e36:	ea e4       	ldi	r30, 0x4A	; 74
    2e38:	f0 e0       	ldi	r31, 0x00	; 0
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	80 83       	st	Z, r24
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <USART_voidInit>:

#include "USART_Interface.h"
#include "USART_Registers.h"

void USART_voidInit()
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
	/*Select Character Size in bit 2*/
	Clear_Bit(UCSRB,UCSRB_UCSZ2);
    2e54:	aa e2       	ldi	r26, 0x2A	; 42
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	ea e2       	ldi	r30, 0x2A	; 42
    2e5a:	f0 e0       	ldi	r31, 0x00	; 0
    2e5c:	80 81       	ld	r24, Z
    2e5e:	8b 7f       	andi	r24, 0xFB	; 251
    2e60:	8c 93       	st	X, r24
	 * select Asynchronous ,
	 * no parity ,
	 * 1 stop bit ,
	 * 8 bit data ,
	 * no clock Polarity*/
	 UCSRC = 0b10000110;
    2e62:	e0 e4       	ldi	r30, 0x40	; 64
    2e64:	f0 e0       	ldi	r31, 0x00	; 0
    2e66:	86 e8       	ldi	r24, 0x86	; 134
    2e68:	80 83       	st	Z, r24

	 /*Select Baud Rate 9600 bps*/
	 UBRRL=51;
    2e6a:	e9 e2       	ldi	r30, 0x29	; 41
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	83 e3       	ldi	r24, 0x33	; 51
    2e70:	80 83       	st	Z, r24

	 /*Enable Tx , Rx*/
	 Set_Bit(UCSRB,UCSRB_TXEN);
    2e72:	aa e2       	ldi	r26, 0x2A	; 42
    2e74:	b0 e0       	ldi	r27, 0x00	; 0
    2e76:	ea e2       	ldi	r30, 0x2A	; 42
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	80 81       	ld	r24, Z
    2e7c:	88 60       	ori	r24, 0x08	; 8
    2e7e:	8c 93       	st	X, r24
	 Set_Bit(UCSRB,UCSRB_RXEN);
    2e80:	aa e2       	ldi	r26, 0x2A	; 42
    2e82:	b0 e0       	ldi	r27, 0x00	; 0
    2e84:	ea e2       	ldi	r30, 0x2A	; 42
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	80 81       	ld	r24, Z
    2e8a:	80 61       	ori	r24, 0x10	; 16
    2e8c:	8c 93       	st	X, r24

}
    2e8e:	cf 91       	pop	r28
    2e90:	df 91       	pop	r29
    2e92:	08 95       	ret

00002e94 <USART_voidWriteData>:

void USART_voidWriteData(u8 Copy_u8Data)
{
    2e94:	df 93       	push	r29
    2e96:	cf 93       	push	r28
    2e98:	0f 92       	push	r0
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
    2e9e:	89 83       	std	Y+1, r24	; 0x01
	/*Waiting until Transmit Buffer will be empty and ready for new data*/
	while (Get_Bit(UCSRA,UCSRA_UDRE)!=1);
    2ea0:	eb e2       	ldi	r30, 0x2B	; 43
    2ea2:	f0 e0       	ldi	r31, 0x00	; 0
    2ea4:	80 81       	ld	r24, Z
    2ea6:	82 95       	swap	r24
    2ea8:	86 95       	lsr	r24
    2eaa:	87 70       	andi	r24, 0x07	; 7
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	81 70       	andi	r24, 0x01	; 1
    2eb2:	90 70       	andi	r25, 0x00	; 0
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	a1 f3       	breq	.-24     	; 0x2ea0 <USART_voidWriteData+0xc>

	/*Put New Data*/
		UDR=Copy_u8Data;
    2eb8:	ec e2       	ldi	r30, 0x2C	; 44
    2eba:	f0 e0       	ldi	r31, 0x00	; 0
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	80 83       	st	Z, r24
}
    2ec0:	0f 90       	pop	r0
    2ec2:	cf 91       	pop	r28
    2ec4:	df 91       	pop	r29
    2ec6:	08 95       	ret

00002ec8 <USART_u8ReadData>:

u8 USART_u8ReadData()
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
	/*Waiting until Receive Buffer to finish receiving and to be ready for new data*/
	while (Get_Bit(UCSRA,UCSRA_RXC)!=1);
    2ed0:	eb e2       	ldi	r30, 0x2B	; 43
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	88 1f       	adc	r24, r24
    2ed8:	88 27       	eor	r24, r24
    2eda:	88 1f       	adc	r24, r24
    2edc:	81 30       	cpi	r24, 0x01	; 1
    2ede:	c1 f7       	brne	.-16     	; 0x2ed0 <USART_u8ReadData+0x8>

	/*Read New Data*/
		return UDR;
    2ee0:	ec e2       	ldi	r30, 0x2C	; 44
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
}
    2ee6:	cf 91       	pop	r28
    2ee8:	df 91       	pop	r29
    2eea:	08 95       	ret

00002eec <main>:
#include "APP_Interface.h"

void Enable (void);

int main (void)
{
    2eec:	df 93       	push	r29
    2eee:	cf 93       	push	r28
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <main+0x6>
    2ef2:	cd b7       	in	r28, 0x3d	; 61
    2ef4:	de b7       	in	r29, 0x3e	; 62
	USART_voidInit();
    2ef6:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <USART_voidInit>

	EXTI_voidGlobalEnable();
    2efa:	0e 94 39 12 	call	0x2472	; 0x2472 <EXTI_voidGlobalEnable>
	EXTI_voidINT0Init();
    2efe:	0e 94 de 11 	call	0x23bc	; 0x23bc <EXTI_voidINT0Init>

	KeyPad_voidInit();
    2f02:	0e 94 9a 12 	call	0x2534	; 0x2534 <KeyPad_voidInit>

	DIO_voidSetPinDirection(DIO_PORTD,PIN2,INPUT_PIN);
    2f06:	83 e0       	ldi	r24, 0x03	; 3
    2f08:	62 e0       	ldi	r22, 0x02	; 2
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_voidSetPinDirection>
	DIO_voidPullUpPin(DIO_PORTD,PIN2);
    2f10:	83 e0       	ldi	r24, 0x03	; 3
    2f12:	62 e0       	ldi	r22, 0x02	; 2
    2f14:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DIO_voidPullUpPin>

	DIO_voidSetPinDirection(DIO_PORTD,PIN0,INPUT_PIN);
    2f18:	83 e0       	ldi	r24, 0x03	; 3
    2f1a:	60 e0       	ldi	r22, 0x00	; 0
    2f1c:	40 e0       	ldi	r20, 0x00	; 0
    2f1e:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,PIN1,OUTPUT_PIN);
    2f22:	83 e0       	ldi	r24, 0x03	; 3
    2f24:	61 e0       	ldi	r22, 0x01	; 1
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <DIO_voidSetPinDirection>

	DIO_voidSetPortDitection(DIO_PORTB,OUTPUT_PORT);
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	6f ef       	ldi	r22, 0xFF	; 255
    2f30:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <DIO_voidSetPortDitection>

	EXTI_voidCallBackINT0(&Enable);
    2f34:	8e ed       	ldi	r24, 0xDE	; 222
    2f36:	97 e1       	ldi	r25, 0x17	; 23
    2f38:	0e 94 55 12 	call	0x24aa	; 0x24aa <EXTI_voidCallBackINT0>


	while (1)
	{
		u8 Read = USART_u8ReadData();
    2f3c:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <USART_u8ReadData>
    2f40:	8a 83       	std	Y+2, r24	; 0x02
		if (Read=='-')
    2f42:	8a 81       	ldd	r24, Y+2	; 0x02
    2f44:	8d 32       	cpi	r24, 0x2D	; 45
    2f46:	29 f4       	brne	.+10     	; 0x2f52 <main+0x66>
		{
			DIO_voidSetPortValue(DIO_PORTB,THREE);
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	6f e4       	ldi	r22, 0x4F	; 79
    2f4c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_voidSetPortValue>
    2f50:	2a c0       	rjmp	.+84     	; 0x2fa6 <main+0xba>
		}

		else if (Read=='W')
    2f52:	8a 81       	ldd	r24, Y+2	; 0x02
    2f54:	87 35       	cpi	r24, 0x57	; 87
    2f56:	29 f4       	brne	.+10     	; 0x2f62 <main+0x76>
		{
			DIO_voidSetPortValue(DIO_PORTB,TWO);
    2f58:	81 e0       	ldi	r24, 0x01	; 1
    2f5a:	6b e5       	ldi	r22, 0x5B	; 91
    2f5c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_voidSetPortValue>
    2f60:	22 c0       	rjmp	.+68     	; 0x2fa6 <main+0xba>
		}
		else if (Read=='N')
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	8e 34       	cpi	r24, 0x4E	; 78
    2f66:	29 f4       	brne	.+10     	; 0x2f72 <main+0x86>
			DIO_voidSetPortValue(DIO_PORTB,ONE);
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	66 e0       	ldi	r22, 0x06	; 6
    2f6c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_voidSetPortValue>
    2f70:	1a c0       	rjmp	.+52     	; 0x2fa6 <main+0xba>

		else if (Read=='D')
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	84 34       	cpi	r24, 0x44	; 68
    2f76:	29 f4       	brne	.+10     	; 0x2f82 <main+0x96>
			DIO_voidSetPortValue(DIO_PORTB,LOW);
    2f78:	81 e0       	ldi	r24, 0x01	; 1
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_voidSetPortValue>
    2f80:	12 c0       	rjmp	.+36     	; 0x2fa6 <main+0xba>

		else if (Read=='T')
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	84 35       	cpi	r24, 0x54	; 84
    2f86:	79 f4       	brne	.+30     	; 0x2fa6 <main+0xba>
		{
			DIO_voidSetPortValue(DIO_PORTB,	ZERO);
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	6f e3       	ldi	r22, 0x3F	; 63
    2f8c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_voidSetPortValue>
			if(USART_u8ReadData()=='.')
    2f90:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <USART_u8ReadData>
    2f94:	8e 32       	cpi	r24, 0x2E	; 46
    2f96:	21 f4       	brne	.+8      	; 0x2fa0 <main+0xb4>
				DIO_voidSetPortValue(DIO_PORTB,LOW);
    2f98:	81 e0       	ldi	r24, 0x01	; 1
    2f9a:	60 e0       	ldi	r22, 0x00	; 0
    2f9c:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <DIO_voidSetPortValue>
			EXTI_voidINT0Init();
    2fa0:	0e 94 de 11 	call	0x23bc	; 0x23bc <EXTI_voidINT0Init>
    2fa4:	cb cf       	rjmp	.-106    	; 0x2f3c <main+0x50>
			continue;
		}

		for (u8 Index=0;Index<8;Index++)
    2fa6:	19 82       	std	Y+1, r1	; 0x01
    2fa8:	05 c0       	rjmp	.+10     	; 0x2fb4 <main+0xc8>
			APP_voidPass_User_checker();
    2faa:	0e 94 ad 07 	call	0xf5a	; 0xf5a <APP_voidPass_User_checker>
				DIO_voidSetPortValue(DIO_PORTB,LOW);
			EXTI_voidINT0Init();
			continue;
		}

		for (u8 Index=0;Index<8;Index++)
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	8f 5f       	subi	r24, 0xFF	; 255
    2fb2:	89 83       	std	Y+1, r24	; 0x01
    2fb4:	89 81       	ldd	r24, Y+1	; 0x01
    2fb6:	88 30       	cpi	r24, 0x08	; 8
    2fb8:	c0 f3       	brcs	.-16     	; 0x2faa <main+0xbe>
    2fba:	c0 cf       	rjmp	.-128    	; 0x2f3c <main+0x50>

00002fbc <Enable>:

	return 0;
}

void Enable (void)
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62
	EXTI_voidINT0End();
    2fc4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <EXTI_voidINT0End>
	USART_voidWriteData('/');
    2fc8:	8f e2       	ldi	r24, 0x2F	; 47
    2fca:	0e 94 4a 17 	call	0x2e94	; 0x2e94 <USART_voidWriteData>
}
    2fce:	cf 91       	pop	r28
    2fd0:	df 91       	pop	r29
    2fd2:	08 95       	ret

00002fd4 <__prologue_saves__>:
    2fd4:	2f 92       	push	r2
    2fd6:	3f 92       	push	r3
    2fd8:	4f 92       	push	r4
    2fda:	5f 92       	push	r5
    2fdc:	6f 92       	push	r6
    2fde:	7f 92       	push	r7
    2fe0:	8f 92       	push	r8
    2fe2:	9f 92       	push	r9
    2fe4:	af 92       	push	r10
    2fe6:	bf 92       	push	r11
    2fe8:	cf 92       	push	r12
    2fea:	df 92       	push	r13
    2fec:	ef 92       	push	r14
    2fee:	ff 92       	push	r15
    2ff0:	0f 93       	push	r16
    2ff2:	1f 93       	push	r17
    2ff4:	cf 93       	push	r28
    2ff6:	df 93       	push	r29
    2ff8:	cd b7       	in	r28, 0x3d	; 61
    2ffa:	de b7       	in	r29, 0x3e	; 62
    2ffc:	ca 1b       	sub	r28, r26
    2ffe:	db 0b       	sbc	r29, r27
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	09 94       	ijmp

0000300c <__epilogue_restores__>:
    300c:	2a 88       	ldd	r2, Y+18	; 0x12
    300e:	39 88       	ldd	r3, Y+17	; 0x11
    3010:	48 88       	ldd	r4, Y+16	; 0x10
    3012:	5f 84       	ldd	r5, Y+15	; 0x0f
    3014:	6e 84       	ldd	r6, Y+14	; 0x0e
    3016:	7d 84       	ldd	r7, Y+13	; 0x0d
    3018:	8c 84       	ldd	r8, Y+12	; 0x0c
    301a:	9b 84       	ldd	r9, Y+11	; 0x0b
    301c:	aa 84       	ldd	r10, Y+10	; 0x0a
    301e:	b9 84       	ldd	r11, Y+9	; 0x09
    3020:	c8 84       	ldd	r12, Y+8	; 0x08
    3022:	df 80       	ldd	r13, Y+7	; 0x07
    3024:	ee 80       	ldd	r14, Y+6	; 0x06
    3026:	fd 80       	ldd	r15, Y+5	; 0x05
    3028:	0c 81       	ldd	r16, Y+4	; 0x04
    302a:	1b 81       	ldd	r17, Y+3	; 0x03
    302c:	aa 81       	ldd	r26, Y+2	; 0x02
    302e:	b9 81       	ldd	r27, Y+1	; 0x01
    3030:	ce 0f       	add	r28, r30
    3032:	d1 1d       	adc	r29, r1
    3034:	0f b6       	in	r0, 0x3f	; 63
    3036:	f8 94       	cli
    3038:	de bf       	out	0x3e, r29	; 62
    303a:	0f be       	out	0x3f, r0	; 63
    303c:	cd bf       	out	0x3d, r28	; 61
    303e:	ed 01       	movw	r28, r26
    3040:	08 95       	ret

00003042 <_exit>:
    3042:	f8 94       	cli

00003044 <__stop_program>:
    3044:	ff cf       	rjmp	.-2      	; 0x3044 <__stop_program>
