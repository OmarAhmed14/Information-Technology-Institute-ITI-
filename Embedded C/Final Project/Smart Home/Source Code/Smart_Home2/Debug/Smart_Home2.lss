
Smart_Home2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b4  00800060  00003cda  00003d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800214  00800214  00003f22  2**0
                  ALLOC
  3 .stab         000032f4  00000000  00000000  00003f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001370  00000000  00000000  00007218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  00008958  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  0000afe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  0000c4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000d76c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  0000d94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  0000dc4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e5f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	fc e3       	ldi	r31, 0x3C	; 60
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 31       	cpi	r26, 0x16	; 22
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 af 12 	call	0x255e	; 0x255e <main>
      8a:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ee       	ldi	r26, 0xED	; 237
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 34 1e 	jmp	0x3c68	; 0x3c68 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 50 1e 	jmp	0x3ca0	; 0x3ca0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d ee       	ldi	r22, 0xED	; 237
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 40 1e 	jmp	0x3c80	; 0x3c80 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 5c 1e 	jmp	0x3cb8	; 0x3cb8 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 44 1e 	jmp	0x3c88	; 0x3c88 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 60 1e 	jmp	0x3cc0	; 0x3cc0 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 3c 1e 	jmp	0x3c78	; 0x3c78 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	eb 50       	subi	r30, 0x0B	; 11
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <ADC_voidInit>:

#include "ADC_Registers.h"
#include "ADC_Interface.h"

void ADC_voidInit(void)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	ADMUX=AREF<<6;
     e96:	e7 e2       	ldi	r30, 0x27	; 39
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	10 82       	st	Z, r1
	ADMUX|=ADCLEFT_ADJUSTMENT_OFF<<5;
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADATE);
     ea8:	a6 e2       	ldi	r26, 0x26	; 38
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e6 e2       	ldi	r30, 0x26	; 38
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	80 62       	ori	r24, 0x20	; 32
     eb4:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADEN);
     eb6:	a6 e2       	ldi	r26, 0x26	; 38
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e6 e2       	ldi	r30, 0x26	; 38
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 68       	ori	r24, 0x80	; 128
     ec2:	8c 93       	st	X, r24
	ADCSRA|=DIV_64<<0;
     ec4:	a6 e2       	ldi	r26, 0x26	; 38
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	86 60       	ori	r24, 0x06	; 6
     ed0:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADIF);
     ed2:	a6 e2       	ldi	r26, 0x26	; 38
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e6 e2       	ldi	r30, 0x26	; 38
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	80 61       	ori	r24, 0x10	; 16
     ede:	8c 93       	st	X, r24
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <ADC_u16Read>:

u16 ADC_u16Read(ADC_CHANALS_options_t Copy_u8ADCchannel)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	0f 92       	push	r0
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0b11100000;
     ef2:	a7 e2       	ldi	r26, 0x27	; 39
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e7 e2       	ldi	r30, 0x27	; 39
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 7e       	andi	r24, 0xE0	; 224
     efe:	8c 93       	st	X, r24
	ADMUX|=Copy_u8ADCchannel<<0;
     f00:	a7 e2       	ldi	r26, 0x27	; 39
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e2       	ldi	r30, 0x27	; 39
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	90 81       	ld	r25, Z
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	89 2b       	or	r24, r25
     f0e:	8c 93       	st	X, r24
	Set_Bit(ADCSRA,ADCSRA_ADSC);
     f10:	a6 e2       	ldi	r26, 0x26	; 38
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e6 e2       	ldi	r30, 0x26	; 38
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	8c 93       	st	X, r24
	while (!Get_Bit(ADCSRA,ADCSRA_ADIF));
     f1e:	e6 e2       	ldi	r30, 0x26	; 38
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	80 81       	ld	r24, Z
     f24:	82 95       	swap	r24
     f26:	8f 70       	andi	r24, 0x0F	; 15
     f28:	88 2f       	mov	r24, r24
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	81 70       	andi	r24, 0x01	; 1
     f2e:	90 70       	andi	r25, 0x00	; 0
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	a9 f3       	breq	.-22     	; 0xf1e <ADC_u16Read+0x38>
	Set_Bit(ADCSRA,ADCSRA_ADIF);
     f34:	a6 e2       	ldi	r26, 0x26	; 38
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e6 e2       	ldi	r30, 0x26	; 38
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 61       	ori	r24, 0x10	; 16
     f40:	8c 93       	st	X, r24
	return ADCLH;
     f42:	e4 e2       	ldi	r30, 0x24	; 36
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	91 81       	ldd	r25, Z+1	; 0x01
}
     f4a:	0f 90       	pop	r0
     f4c:	cf 91       	pop	r28
     f4e:	df 91       	pop	r29
     f50:	08 95       	ret

00000f52 <ADC_f32ADCtoVolt>:

f32 ADC_f32ADCtoVolt(u16 Copy_u16ADCVal)
{
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	00 d0       	rcall	.+0      	; 0xf58 <ADC_f32ADCtoVolt+0x6>
     f58:	00 d0       	rcall	.+0      	; 0xf5a <ADC_f32ADCtoVolt+0x8>
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <ADC_f32ADCtoVolt+0xa>
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
	f32 ADC_Localf32Volt = (Copy_u16ADCVal/1024.0)*VREF;
     f64:	8d 81       	ldd	r24, Y+5	; 0x05
     f66:	9e 81       	ldd	r25, Y+6	; 0x06
     f68:	cc 01       	movw	r24, r24
     f6a:	a0 e0       	ldi	r26, 0x00	; 0
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	bc 01       	movw	r22, r24
     f70:	cd 01       	movw	r24, r26
     f72:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	bc 01       	movw	r22, r24
     f7c:	cd 01       	movw	r24, r26
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e8       	ldi	r20, 0x80	; 128
     f84:	54 e4       	ldi	r21, 0x44	; 68
     f86:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	bc 01       	movw	r22, r24
     f90:	cd 01       	movw	r24, r26
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 ea       	ldi	r20, 0xA0	; 160
     f98:	50 e4       	ldi	r21, 0x40	; 64
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	89 83       	std	Y+1, r24	; 0x01
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	ab 83       	std	Y+3, r26	; 0x03
     fa8:	bc 83       	std	Y+4, r27	; 0x04
	return ADC_Localf32Volt;
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	ab 81       	ldd	r26, Y+3	; 0x03
     fb0:	bc 81       	ldd	r27, Y+4	; 0x04
}
     fb2:	bc 01       	movw	r22, r24
     fb4:	cd 01       	movw	r24, r26
     fb6:	26 96       	adiw	r28, 0x06	; 6
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	cf 91       	pop	r28
     fc4:	df 91       	pop	r29
     fc6:	08 95       	ret

00000fc8 <APP_voidUser_Reciever>:
#include "APP_Interface.h"

#include <util/delay.h>

void APP_voidUser_Reciever(u8 Copy_Num)
{
     fc8:	df 93       	push	r29
     fca:	cf 93       	push	r28
     fcc:	0f 92       	push	r0
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	89 83       	std	Y+1, r24	; 0x01
	static u8 Index=0;
	LCD_voidGoToXY(Index,1);
     fd4:	80 91 14 02 	lds	r24, 0x0214
     fd8:	61 e0       	ldi	r22, 0x01	; 1
     fda:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
	LCD_voidSendData(Copy_Num);
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
	Index++;
     fe4:	80 91 14 02 	lds	r24, 0x0214
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	80 93 14 02 	sts	0x0214, r24
	if (Index==4)
     fee:	80 91 14 02 	lds	r24, 0x0214
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	11 f4       	brne	.+4      	; 0xffa <APP_voidUser_Reciever+0x32>
		Index=0;
     ff6:	10 92 14 02 	sts	0x0214, r1
}
     ffa:	0f 90       	pop	r0
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret

00001002 <APP_voidPass_Reciever>:

void APP_voidPass_Reciever(u8 Copy_Num)
{
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	2f 97       	sbiw	r28, 0x0f	; 15
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	f8 94       	cli
    1010:	de bf       	out	0x3e, r29	; 62
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	cd bf       	out	0x3d, r28	; 61
    1016:	8f 87       	std	Y+15, r24	; 0x0f
	static u8 Index=0;
	LCD_voidGoToXY(Index,1);
    1018:	80 91 15 02 	lds	r24, 0x0215
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
	LCD_voidSendData(Copy_Num);
    1022:	8f 85       	ldd	r24, Y+15	; 0x0f
    1024:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a8 e4       	ldi	r26, 0x48	; 72
    102e:	b3 e4       	ldi	r27, 0x43	; 67
    1030:	8b 87       	std	Y+11, r24	; 0x0b
    1032:	9c 87       	std	Y+12, r25	; 0x0c
    1034:	ad 87       	std	Y+13, r26	; 0x0d
    1036:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1038:	6b 85       	ldd	r22, Y+11	; 0x0b
    103a:	7c 85       	ldd	r23, Y+12	; 0x0c
    103c:	8d 85       	ldd	r24, Y+13	; 0x0d
    103e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	4a e7       	ldi	r20, 0x7A	; 122
    1046:	53 e4       	ldi	r21, 0x43	; 67
    1048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	8f 83       	std	Y+7, r24	; 0x07
    1052:	98 87       	std	Y+8, r25	; 0x08
    1054:	a9 87       	std	Y+9, r26	; 0x09
    1056:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1058:	6f 81       	ldd	r22, Y+7	; 0x07
    105a:	78 85       	ldd	r23, Y+8	; 0x08
    105c:	89 85       	ldd	r24, Y+9	; 0x09
    105e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1060:	20 e0       	ldi	r18, 0x00	; 0
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	40 e8       	ldi	r20, 0x80	; 128
    1066:	5f e3       	ldi	r21, 0x3F	; 63
    1068:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106c:	88 23       	and	r24, r24
    106e:	2c f4       	brge	.+10     	; 0x107a <APP_voidPass_Reciever+0x78>
		__ticks = 1;
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9e 83       	std	Y+6, r25	; 0x06
    1076:	8d 83       	std	Y+5, r24	; 0x05
    1078:	3f c0       	rjmp	.+126    	; 0x10f8 <APP_voidPass_Reciever+0xf6>
	else if (__tmp > 65535)
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	3f ef       	ldi	r19, 0xFF	; 255
    1086:	4f e7       	ldi	r20, 0x7F	; 127
    1088:	57 e4       	ldi	r21, 0x47	; 71
    108a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    108e:	18 16       	cp	r1, r24
    1090:	4c f5       	brge	.+82     	; 0x10e4 <APP_voidPass_Reciever+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1092:	6b 85       	ldd	r22, Y+11	; 0x0b
    1094:	7c 85       	ldd	r23, Y+12	; 0x0c
    1096:	8d 85       	ldd	r24, Y+13	; 0x0d
    1098:	9e 85       	ldd	r25, Y+14	; 0x0e
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	40 e2       	ldi	r20, 0x20	; 32
    10a0:	51 e4       	ldi	r21, 0x41	; 65
    10a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a6:	dc 01       	movw	r26, r24
    10a8:	cb 01       	movw	r24, r22
    10aa:	bc 01       	movw	r22, r24
    10ac:	cd 01       	movw	r24, r26
    10ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	9e 83       	std	Y+6, r25	; 0x06
    10b8:	8d 83       	std	Y+5, r24	; 0x05
    10ba:	0f c0       	rjmp	.+30     	; 0x10da <APP_voidPass_Reciever+0xd8>
    10bc:	89 e1       	ldi	r24, 0x19	; 25
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <APP_voidPass_Reciever+0xc6>
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	9e 81       	ldd	r25, Y+6	; 0x06
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	9e 83       	std	Y+6, r25	; 0x06
    10d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10da:	8d 81       	ldd	r24, Y+5	; 0x05
    10dc:	9e 81       	ldd	r25, Y+6	; 0x06
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	69 f7       	brne	.-38     	; 0x10bc <APP_voidPass_Reciever+0xba>
    10e2:	14 c0       	rjmp	.+40     	; 0x110c <APP_voidPass_Reciever+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e4:	6f 81       	ldd	r22, Y+7	; 0x07
    10e6:	78 85       	ldd	r23, Y+8	; 0x08
    10e8:	89 85       	ldd	r24, Y+9	; 0x09
    10ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f0:	dc 01       	movw	r26, r24
    10f2:	cb 01       	movw	r24, r22
    10f4:	9e 83       	std	Y+6, r25	; 0x06
    10f6:	8d 83       	std	Y+5, r24	; 0x05
    10f8:	8d 81       	ldd	r24, Y+5	; 0x05
    10fa:	9e 81       	ldd	r25, Y+6	; 0x06
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	9a 81       	ldd	r25, Y+2	; 0x02
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <APP_voidPass_Reciever+0x102>
    1108:	9a 83       	std	Y+2, r25	; 0x02
    110a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	LCD_voidGoToXY(Index,1);
    110c:	80 91 15 02 	lds	r24, 0x0215
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
	LCD_voidSendData('*');
    1116:	8a e2       	ldi	r24, 0x2A	; 42
    1118:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
	Index++;
    111c:	80 91 15 02 	lds	r24, 0x0215
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	80 93 15 02 	sts	0x0215, r24
	if (Index==4)
    1126:	80 91 15 02 	lds	r24, 0x0215
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	11 f4       	brne	.+4      	; 0x1132 <APP_voidPass_Reciever+0x130>
		Index=0;
    112e:	10 92 15 02 	sts	0x0215, r1
}
    1132:	2f 96       	adiw	r28, 0x0f	; 15
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <APP_u8UserCheck>:

u8 APP_u8UserCheck(u8 *ArrTrue,u8* ArrCheck)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <APP_u8UserCheck+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <APP_u8UserCheck+0x8>
    114c:	00 d0       	rcall	.+0      	; 0x114e <APP_u8UserCheck+0xa>
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	9b 83       	std	Y+3, r25	; 0x03
    1154:	8a 83       	std	Y+2, r24	; 0x02
    1156:	7d 83       	std	Y+5, r23	; 0x05
    1158:	6c 83       	std	Y+4, r22	; 0x04
	for (u8 Index=0; Index<4;Index++)
    115a:	19 82       	std	Y+1, r1	; 0x01
    115c:	19 c0       	rjmp	.+50     	; 0x1190 <APP_u8UserCheck+0x4c>
		if (ArrTrue[Index]!=ArrCheck[Index])
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	8a 81       	ldd	r24, Y+2	; 0x02
    1166:	9b 81       	ldd	r25, Y+3	; 0x03
    1168:	fc 01       	movw	r30, r24
    116a:	e2 0f       	add	r30, r18
    116c:	f3 1f       	adc	r31, r19
    116e:	40 81       	ld	r20, Z
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	9d 81       	ldd	r25, Y+5	; 0x05
    117a:	fc 01       	movw	r30, r24
    117c:	e2 0f       	add	r30, r18
    117e:	f3 1f       	adc	r31, r19
    1180:	80 81       	ld	r24, Z
    1182:	48 17       	cp	r20, r24
    1184:	11 f0       	breq	.+4      	; 0x118a <APP_u8UserCheck+0x46>
			return 0;
    1186:	1e 82       	std	Y+6, r1	; 0x06
    1188:	08 c0       	rjmp	.+16     	; 0x119a <APP_u8UserCheck+0x56>
		Index=0;
}

u8 APP_u8UserCheck(u8 *ArrTrue,u8* ArrCheck)
{
	for (u8 Index=0; Index<4;Index++)
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	8f 5f       	subi	r24, 0xFF	; 255
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	20 f3       	brcs	.-56     	; 0x115e <APP_u8UserCheck+0x1a>
		if (ArrTrue[Index]!=ArrCheck[Index])
			return 0;
	return 1;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	8e 83       	std	Y+6, r24	; 0x06
    119a:	8e 81       	ldd	r24, Y+6	; 0x06
}
    119c:	26 96       	adiw	r28, 0x06	; 6
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <APP_u8PassCheck>:

u8 APP_u8PassCheck(u8 *ArrTrue,u8* ArrCheck)
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <APP_u8PassCheck+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <APP_u8PassCheck+0x8>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <APP_u8PassCheck+0xa>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	9b 83       	std	Y+3, r25	; 0x03
    11be:	8a 83       	std	Y+2, r24	; 0x02
    11c0:	7d 83       	std	Y+5, r23	; 0x05
    11c2:	6c 83       	std	Y+4, r22	; 0x04
	for (u8 Index=0; Index<4;Index++)
    11c4:	19 82       	std	Y+1, r1	; 0x01
    11c6:	19 c0       	rjmp	.+50     	; 0x11fa <APP_u8PassCheck+0x4c>
		if (ArrTrue[Index]!=ArrCheck[Index])
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	fc 01       	movw	r30, r24
    11d4:	e2 0f       	add	r30, r18
    11d6:	f3 1f       	adc	r31, r19
    11d8:	40 81       	ld	r20, Z
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	fc 01       	movw	r30, r24
    11e6:	e2 0f       	add	r30, r18
    11e8:	f3 1f       	adc	r31, r19
    11ea:	80 81       	ld	r24, Z
    11ec:	48 17       	cp	r20, r24
    11ee:	11 f0       	breq	.+4      	; 0x11f4 <APP_u8PassCheck+0x46>
			return 0;
    11f0:	1e 82       	std	Y+6, r1	; 0x06
    11f2:	08 c0       	rjmp	.+16     	; 0x1204 <APP_u8PassCheck+0x56>
	return 1;
}

u8 APP_u8PassCheck(u8 *ArrTrue,u8* ArrCheck)
{
	for (u8 Index=0; Index<4;Index++)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	89 83       	std	Y+1, r24	; 0x01
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	84 30       	cpi	r24, 0x04	; 4
    11fe:	20 f3       	brcs	.-56     	; 0x11c8 <APP_u8PassCheck+0x1a>
		if (ArrTrue[Index]!=ArrCheck[Index])
			return 0;
	return 1;
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	8e 83       	std	Y+6, r24	; 0x06
    1204:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1206:	26 96       	adiw	r28, 0x06	; 6
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	08 95       	ret

00001218 <DIO_voidSetPortDitection>:

#include "DIO_Registers.h"
#include "DIO_Interface.h"

void DIO_voidSetPortDitection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
    1218:	df 93       	push	r29
    121a:	cf 93       	push	r28
    121c:	00 d0       	rcall	.+0      	; 0x121e <DIO_voidSetPortDitection+0x6>
    121e:	00 d0       	rcall	.+0      	; 0x1220 <DIO_voidSetPortDitection+0x8>
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	89 83       	std	Y+1, r24	; 0x01
    1226:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	3c 83       	std	Y+4, r19	; 0x04
    1230:	2b 83       	std	Y+3, r18	; 0x03
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	91 05       	cpc	r25, r1
    123a:	d1 f0       	breq	.+52     	; 0x1270 <DIO_voidSetPortDitection+0x58>
    123c:	2b 81       	ldd	r18, Y+3	; 0x03
    123e:	3c 81       	ldd	r19, Y+4	; 0x04
    1240:	22 30       	cpi	r18, 0x02	; 2
    1242:	31 05       	cpc	r19, r1
    1244:	2c f4       	brge	.+10     	; 0x1250 <DIO_voidSetPortDitection+0x38>
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	61 f0       	breq	.+24     	; 0x1266 <DIO_voidSetPortDitection+0x4e>
    124e:	1e c0       	rjmp	.+60     	; 0x128c <DIO_voidSetPortDitection+0x74>
    1250:	2b 81       	ldd	r18, Y+3	; 0x03
    1252:	3c 81       	ldd	r19, Y+4	; 0x04
    1254:	22 30       	cpi	r18, 0x02	; 2
    1256:	31 05       	cpc	r19, r1
    1258:	81 f0       	breq	.+32     	; 0x127a <DIO_voidSetPortDitection+0x62>
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	83 30       	cpi	r24, 0x03	; 3
    1260:	91 05       	cpc	r25, r1
    1262:	81 f0       	breq	.+32     	; 0x1284 <DIO_voidSetPortDitection+0x6c>
    1264:	13 c0       	rjmp	.+38     	; 0x128c <DIO_voidSetPortDitection+0x74>
	{
		case DIO_PORTA:
			DDRA = Copy_u8Direction;
    1266:	ea e3       	ldi	r30, 0x3A	; 58
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	80 83       	st	Z, r24
    126e:	0e c0       	rjmp	.+28     	; 0x128c <DIO_voidSetPortDitection+0x74>
			break;

		case DIO_PORTB:
			DDRB = Copy_u8Direction;
    1270:	e7 e3       	ldi	r30, 0x37	; 55
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	80 83       	st	Z, r24
    1278:	09 c0       	rjmp	.+18     	; 0x128c <DIO_voidSetPortDitection+0x74>
			break;

		case DIO_PORTC:
			DDRC = Copy_u8Direction;
    127a:	e4 e3       	ldi	r30, 0x34	; 52
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	80 83       	st	Z, r24
    1282:	04 c0       	rjmp	.+8      	; 0x128c <DIO_voidSetPortDitection+0x74>
			break;

		case DIO_PORTD:
			DDRD = Copy_u8Direction;
    1284:	e1 e3       	ldi	r30, 0x31	; 49
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	80 83       	st	Z, r24

		default:
			break;
	}

}
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	27 97       	sbiw	r28, 0x07	; 7
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	6a 83       	std	Y+2, r22	; 0x02
    12b2:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Direction == OUTPUT_PIN)
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	09 f0       	breq	.+2      	; 0x12bc <DIO_voidSetPinDirection+0x22>
    12ba:	6f c0       	rjmp	.+222    	; 0x139a <DIO_voidSetPinDirection+0x100>
	{
		switch (Copy_u8Port)
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	3f 83       	std	Y+7, r19	; 0x07
    12c4:	2e 83       	std	Y+6, r18	; 0x06
    12c6:	8e 81       	ldd	r24, Y+6	; 0x06
    12c8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ca:	81 30       	cpi	r24, 0x01	; 1
    12cc:	91 05       	cpc	r25, r1
    12ce:	49 f1       	breq	.+82     	; 0x1322 <DIO_voidSetPinDirection+0x88>
    12d0:	2e 81       	ldd	r18, Y+6	; 0x06
    12d2:	3f 81       	ldd	r19, Y+7	; 0x07
    12d4:	22 30       	cpi	r18, 0x02	; 2
    12d6:	31 05       	cpc	r19, r1
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <DIO_voidSetPinDirection+0x4a>
    12da:	8e 81       	ldd	r24, Y+6	; 0x06
    12dc:	9f 81       	ldd	r25, Y+7	; 0x07
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	61 f0       	breq	.+24     	; 0x12fa <DIO_voidSetPinDirection+0x60>
    12e2:	d2 c0       	rjmp	.+420    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
    12e4:	2e 81       	ldd	r18, Y+6	; 0x06
    12e6:	3f 81       	ldd	r19, Y+7	; 0x07
    12e8:	22 30       	cpi	r18, 0x02	; 2
    12ea:	31 05       	cpc	r19, r1
    12ec:	71 f1       	breq	.+92     	; 0x134a <DIO_voidSetPinDirection+0xb0>
    12ee:	8e 81       	ldd	r24, Y+6	; 0x06
    12f0:	9f 81       	ldd	r25, Y+7	; 0x07
    12f2:	83 30       	cpi	r24, 0x03	; 3
    12f4:	91 05       	cpc	r25, r1
    12f6:	e9 f1       	breq	.+122    	; 0x1372 <DIO_voidSetPinDirection+0xd8>
    12f8:	c7 c0       	rjmp	.+398    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
		Set_Bit (DDRA,Copy_u8Pin);
    12fa:	aa e3       	ldi	r26, 0x3A	; 58
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	ea e3       	ldi	r30, 0x3A	; 58
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	48 2f       	mov	r20, r24
    1306:	8a 81       	ldd	r24, Y+2	; 0x02
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 2e       	mov	r0, r18
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <DIO_voidSetPinDirection+0x7e>
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	0a 94       	dec	r0
    131a:	e2 f7       	brpl	.-8      	; 0x1314 <DIO_voidSetPinDirection+0x7a>
    131c:	84 2b       	or	r24, r20
    131e:	8c 93       	st	X, r24
    1320:	b3 c0       	rjmp	.+358    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
		break;

		case DIO_PORTB:
			Set_Bit (DDRB,Copy_u8Pin);
    1322:	a7 e3       	ldi	r26, 0x37	; 55
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e7 e3       	ldi	r30, 0x37	; 55
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	48 2f       	mov	r20, r24
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	28 2f       	mov	r18, r24
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	02 2e       	mov	r0, r18
    133a:	02 c0       	rjmp	.+4      	; 0x1340 <DIO_voidSetPinDirection+0xa6>
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	0a 94       	dec	r0
    1342:	e2 f7       	brpl	.-8      	; 0x133c <DIO_voidSetPinDirection+0xa2>
    1344:	84 2b       	or	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	9f c0       	rjmp	.+318    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTC:
			Set_Bit (DDRC,Copy_u8Pin);
    134a:	a4 e3       	ldi	r26, 0x34	; 52
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e4 e3       	ldi	r30, 0x34	; 52
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	48 2f       	mov	r20, r24
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_voidSetPinDirection+0xce>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_voidSetPinDirection+0xca>
    136c:	84 2b       	or	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	8b c0       	rjmp	.+278    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTD:
			Set_Bit (DDRD,Copy_u8Pin);
    1372:	a1 e3       	ldi	r26, 0x31	; 49
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e1 e3       	ldi	r30, 0x31	; 49
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <DIO_voidSetPinDirection+0xf6>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <DIO_voidSetPinDirection+0xf2>
    1394:	84 2b       	or	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	77 c0       	rjmp	.+238    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>

		default:
			break;
		}
	}
	else if (Copy_u8Direction == INPUT_PIN)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	88 23       	and	r24, r24
    139e:	09 f0       	breq	.+2      	; 0x13a2 <DIO_voidSetPinDirection+0x108>
    13a0:	73 c0       	rjmp	.+230    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
	{
		switch (Copy_u8Port)
    13a2:	89 81       	ldd	r24, Y+1	; 0x01
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	3d 83       	std	Y+5, r19	; 0x05
    13aa:	2c 83       	std	Y+4, r18	; 0x04
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	9d 81       	ldd	r25, Y+5	; 0x05
    13b0:	81 30       	cpi	r24, 0x01	; 1
    13b2:	91 05       	cpc	r25, r1
    13b4:	59 f1       	breq	.+86     	; 0x140c <DIO_voidSetPinDirection+0x172>
    13b6:	2c 81       	ldd	r18, Y+4	; 0x04
    13b8:	3d 81       	ldd	r19, Y+5	; 0x05
    13ba:	22 30       	cpi	r18, 0x02	; 2
    13bc:	31 05       	cpc	r19, r1
    13be:	2c f4       	brge	.+10     	; 0x13ca <DIO_voidSetPinDirection+0x130>
    13c0:	8c 81       	ldd	r24, Y+4	; 0x04
    13c2:	9d 81       	ldd	r25, Y+5	; 0x05
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	69 f0       	breq	.+26     	; 0x13e2 <DIO_voidSetPinDirection+0x148>
    13c8:	5f c0       	rjmp	.+190    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
    13ca:	2c 81       	ldd	r18, Y+4	; 0x04
    13cc:	3d 81       	ldd	r19, Y+5	; 0x05
    13ce:	22 30       	cpi	r18, 0x02	; 2
    13d0:	31 05       	cpc	r19, r1
    13d2:	89 f1       	breq	.+98     	; 0x1436 <DIO_voidSetPinDirection+0x19c>
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	9d 81       	ldd	r25, Y+5	; 0x05
    13d8:	83 30       	cpi	r24, 0x03	; 3
    13da:	91 05       	cpc	r25, r1
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <DIO_voidSetPinDirection+0x146>
    13de:	40 c0       	rjmp	.+128    	; 0x1460 <DIO_voidSetPinDirection+0x1c6>
    13e0:	53 c0       	rjmp	.+166    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
			Clear_Bit (DDRA,Copy_u8Pin);
    13e2:	aa e3       	ldi	r26, 0x3A	; 58
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	ea e3       	ldi	r30, 0x3A	; 58
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 2e       	mov	r0, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_voidSetPinDirection+0x166>
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	0a 94       	dec	r0
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_voidSetPinDirection+0x162>
    1404:	80 95       	com	r24
    1406:	84 23       	and	r24, r20
    1408:	8c 93       	st	X, r24
    140a:	3e c0       	rjmp	.+124    	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTB:
			Clear_Bit (DDRB,Copy_u8Pin);
    140c:	a7 e3       	ldi	r26, 0x37	; 55
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e7 e3       	ldi	r30, 0x37	; 55
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	48 2f       	mov	r20, r24
    1418:	8a 81       	ldd	r24, Y+2	; 0x02
    141a:	28 2f       	mov	r18, r24
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	02 2e       	mov	r0, r18
    1424:	02 c0       	rjmp	.+4      	; 0x142a <DIO_voidSetPinDirection+0x190>
    1426:	88 0f       	add	r24, r24
    1428:	99 1f       	adc	r25, r25
    142a:	0a 94       	dec	r0
    142c:	e2 f7       	brpl	.-8      	; 0x1426 <DIO_voidSetPinDirection+0x18c>
    142e:	80 95       	com	r24
    1430:	84 23       	and	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	29 c0       	rjmp	.+82     	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTC:
			Clear_Bit (DDRC,Copy_u8Pin);
    1436:	a4 e3       	ldi	r26, 0x34	; 52
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e4 e3       	ldi	r30, 0x34	; 52
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <DIO_voidSetPinDirection+0x1ba>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <DIO_voidSetPinDirection+0x1b6>
    1458:	80 95       	com	r24
    145a:	84 23       	and	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	14 c0       	rjmp	.+40     	; 0x1488 <DIO_voidSetPinDirection+0x1ee>
			break;

		case DIO_PORTD:
			Clear_Bit (DDRD,Copy_u8Pin);
    1460:	a1 e3       	ldi	r26, 0x31	; 49
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e1 e3       	ldi	r30, 0x31	; 49
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_voidSetPinDirection+0x1e4>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_voidSetPinDirection+0x1e0>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
		default:
			break;
		}
	}

}
    1488:	27 96       	adiw	r28, 0x07	; 7
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	08 95       	ret

0000149a <DIO_voidSetPortValue>:


void DIO_voidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
    149a:	df 93       	push	r29
    149c:	cf 93       	push	r28
    149e:	00 d0       	rcall	.+0      	; 0x14a0 <DIO_voidSetPortValue+0x6>
    14a0:	00 d0       	rcall	.+0      	; 0x14a2 <DIO_voidSetPortValue+0x8>
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3c 83       	std	Y+4, r19	; 0x04
    14b2:	2b 83       	std	Y+3, r18	; 0x03
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	91 05       	cpc	r25, r1
    14bc:	d1 f0       	breq	.+52     	; 0x14f2 <DIO_voidSetPortValue+0x58>
    14be:	2b 81       	ldd	r18, Y+3	; 0x03
    14c0:	3c 81       	ldd	r19, Y+4	; 0x04
    14c2:	22 30       	cpi	r18, 0x02	; 2
    14c4:	31 05       	cpc	r19, r1
    14c6:	2c f4       	brge	.+10     	; 0x14d2 <DIO_voidSetPortValue+0x38>
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	00 97       	sbiw	r24, 0x00	; 0
    14ce:	61 f0       	breq	.+24     	; 0x14e8 <DIO_voidSetPortValue+0x4e>
    14d0:	1e c0       	rjmp	.+60     	; 0x150e <DIO_voidSetPortValue+0x74>
    14d2:	2b 81       	ldd	r18, Y+3	; 0x03
    14d4:	3c 81       	ldd	r19, Y+4	; 0x04
    14d6:	22 30       	cpi	r18, 0x02	; 2
    14d8:	31 05       	cpc	r19, r1
    14da:	81 f0       	breq	.+32     	; 0x14fc <DIO_voidSetPortValue+0x62>
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	83 30       	cpi	r24, 0x03	; 3
    14e2:	91 05       	cpc	r25, r1
    14e4:	81 f0       	breq	.+32     	; 0x1506 <DIO_voidSetPortValue+0x6c>
    14e6:	13 c0       	rjmp	.+38     	; 0x150e <DIO_voidSetPortValue+0x74>
		{
			case DIO_PORTA:
			PORTA = Copy_u8Value;
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	80 83       	st	Z, r24
    14f0:	0e c0       	rjmp	.+28     	; 0x150e <DIO_voidSetPortValue+0x74>
			break;

			case DIO_PORTB:
				PORTB = Copy_u8Value;
    14f2:	e8 e3       	ldi	r30, 0x38	; 56
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	80 83       	st	Z, r24
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <DIO_voidSetPortValue+0x74>
				break;

			case DIO_PORTC:
				PORTC = Copy_u8Value;
    14fc:	e5 e3       	ldi	r30, 0x35	; 53
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	80 83       	st	Z, r24
    1504:	04 c0       	rjmp	.+8      	; 0x150e <DIO_voidSetPortValue+0x74>
				break;

			case DIO_PORTD:
				PORTD = Copy_u8Value;
    1506:	e2 e3       	ldi	r30, 0x32	; 50
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	80 83       	st	Z, r24
				break;

			default:
				break;
		}
}
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 Copy_u8Value)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	27 97       	sbiw	r28, 0x07	; 7
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	f8 94       	cli
    152a:	de bf       	out	0x3e, r29	; 62
    152c:	0f be       	out	0x3f, r0	; 63
    152e:	cd bf       	out	0x3d, r28	; 61
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	6a 83       	std	Y+2, r22	; 0x02
    1534:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Value == HIGH)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	09 f0       	breq	.+2      	; 0x153e <DIO_voidSetPinValue+0x22>
    153c:	6f c0       	rjmp	.+222    	; 0x161c <DIO_voidSetPinValue+0x100>
		{
			switch (Copy_u8Port)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	28 2f       	mov	r18, r24
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	3f 83       	std	Y+7, r19	; 0x07
    1546:	2e 83       	std	Y+6, r18	; 0x06
    1548:	8e 81       	ldd	r24, Y+6	; 0x06
    154a:	9f 81       	ldd	r25, Y+7	; 0x07
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	91 05       	cpc	r25, r1
    1550:	49 f1       	breq	.+82     	; 0x15a4 <DIO_voidSetPinValue+0x88>
    1552:	2e 81       	ldd	r18, Y+6	; 0x06
    1554:	3f 81       	ldd	r19, Y+7	; 0x07
    1556:	22 30       	cpi	r18, 0x02	; 2
    1558:	31 05       	cpc	r19, r1
    155a:	2c f4       	brge	.+10     	; 0x1566 <DIO_voidSetPinValue+0x4a>
    155c:	8e 81       	ldd	r24, Y+6	; 0x06
    155e:	9f 81       	ldd	r25, Y+7	; 0x07
    1560:	00 97       	sbiw	r24, 0x00	; 0
    1562:	61 f0       	breq	.+24     	; 0x157c <DIO_voidSetPinValue+0x60>
    1564:	d2 c0       	rjmp	.+420    	; 0x170a <DIO_voidSetPinValue+0x1ee>
    1566:	2e 81       	ldd	r18, Y+6	; 0x06
    1568:	3f 81       	ldd	r19, Y+7	; 0x07
    156a:	22 30       	cpi	r18, 0x02	; 2
    156c:	31 05       	cpc	r19, r1
    156e:	71 f1       	breq	.+92     	; 0x15cc <DIO_voidSetPinValue+0xb0>
    1570:	8e 81       	ldd	r24, Y+6	; 0x06
    1572:	9f 81       	ldd	r25, Y+7	; 0x07
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	91 05       	cpc	r25, r1
    1578:	e9 f1       	breq	.+122    	; 0x15f4 <DIO_voidSetPinValue+0xd8>
    157a:	c7 c0       	rjmp	.+398    	; 0x170a <DIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA:
			Set_Bit (PORTA,Copy_u8Pin);
    157c:	ab e3       	ldi	r26, 0x3B	; 59
    157e:	b0 e0       	ldi	r27, 0x00	; 0
    1580:	eb e3       	ldi	r30, 0x3B	; 59
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	80 81       	ld	r24, Z
    1586:	48 2f       	mov	r20, r24
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	02 2e       	mov	r0, r18
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_voidSetPinValue+0x7e>
    1596:	88 0f       	add	r24, r24
    1598:	99 1f       	adc	r25, r25
    159a:	0a 94       	dec	r0
    159c:	e2 f7       	brpl	.-8      	; 0x1596 <DIO_voidSetPinValue+0x7a>
    159e:	84 2b       	or	r24, r20
    15a0:	8c 93       	st	X, r24
    15a2:	b3 c0       	rjmp	.+358    	; 0x170a <DIO_voidSetPinValue+0x1ee>
			break;

			case DIO_PORTB:
				Set_Bit (PORTB,Copy_u8Pin);
    15a4:	a8 e3       	ldi	r26, 0x38	; 56
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e8 e3       	ldi	r30, 0x38	; 56
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	80 81       	ld	r24, Z
    15ae:	48 2f       	mov	r20, r24
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	28 2f       	mov	r18, r24
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_voidSetPinValue+0xa6>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_voidSetPinValue+0xa2>
    15c6:	84 2b       	or	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	9f c0       	rjmp	.+318    	; 0x170a <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTC:
				Set_Bit (PORTC,Copy_u8Pin);
    15cc:	a5 e3       	ldi	r26, 0x35	; 53
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	e5 e3       	ldi	r30, 0x35	; 53
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	80 81       	ld	r24, Z
    15d6:	48 2f       	mov	r20, r24
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 2e       	mov	r0, r18
    15e4:	02 c0       	rjmp	.+4      	; 0x15ea <DIO_voidSetPinValue+0xce>
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	0a 94       	dec	r0
    15ec:	e2 f7       	brpl	.-8      	; 0x15e6 <DIO_voidSetPinValue+0xca>
    15ee:	84 2b       	or	r24, r20
    15f0:	8c 93       	st	X, r24
    15f2:	8b c0       	rjmp	.+278    	; 0x170a <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTD:
				Set_Bit (PORTD,Copy_u8Pin);
    15f4:	a2 e3       	ldi	r26, 0x32	; 50
    15f6:	b0 e0       	ldi	r27, 0x00	; 0
    15f8:	e2 e3       	ldi	r30, 0x32	; 50
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	80 81       	ld	r24, Z
    15fe:	48 2f       	mov	r20, r24
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	28 2f       	mov	r18, r24
    1604:	30 e0       	ldi	r19, 0x00	; 0
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	02 2e       	mov	r0, r18
    160c:	02 c0       	rjmp	.+4      	; 0x1612 <DIO_voidSetPinValue+0xf6>
    160e:	88 0f       	add	r24, r24
    1610:	99 1f       	adc	r25, r25
    1612:	0a 94       	dec	r0
    1614:	e2 f7       	brpl	.-8      	; 0x160e <DIO_voidSetPinValue+0xf2>
    1616:	84 2b       	or	r24, r20
    1618:	8c 93       	st	X, r24
    161a:	77 c0       	rjmp	.+238    	; 0x170a <DIO_voidSetPinValue+0x1ee>

			default:
				break;
			}
		}
		else if (Copy_u8Value == LOW)
    161c:	8b 81       	ldd	r24, Y+3	; 0x03
    161e:	88 23       	and	r24, r24
    1620:	09 f0       	breq	.+2      	; 0x1624 <DIO_voidSetPinValue+0x108>
    1622:	73 c0       	rjmp	.+230    	; 0x170a <DIO_voidSetPinValue+0x1ee>
		{
			switch (Copy_u8Port)
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	3d 83       	std	Y+5, r19	; 0x05
    162c:	2c 83       	std	Y+4, r18	; 0x04
    162e:	8c 81       	ldd	r24, Y+4	; 0x04
    1630:	9d 81       	ldd	r25, Y+5	; 0x05
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	91 05       	cpc	r25, r1
    1636:	59 f1       	breq	.+86     	; 0x168e <DIO_voidSetPinValue+0x172>
    1638:	2c 81       	ldd	r18, Y+4	; 0x04
    163a:	3d 81       	ldd	r19, Y+5	; 0x05
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	2c f4       	brge	.+10     	; 0x164c <DIO_voidSetPinValue+0x130>
    1642:	8c 81       	ldd	r24, Y+4	; 0x04
    1644:	9d 81       	ldd	r25, Y+5	; 0x05
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	69 f0       	breq	.+26     	; 0x1664 <DIO_voidSetPinValue+0x148>
    164a:	5f c0       	rjmp	.+190    	; 0x170a <DIO_voidSetPinValue+0x1ee>
    164c:	2c 81       	ldd	r18, Y+4	; 0x04
    164e:	3d 81       	ldd	r19, Y+5	; 0x05
    1650:	22 30       	cpi	r18, 0x02	; 2
    1652:	31 05       	cpc	r19, r1
    1654:	89 f1       	breq	.+98     	; 0x16b8 <DIO_voidSetPinValue+0x19c>
    1656:	8c 81       	ldd	r24, Y+4	; 0x04
    1658:	9d 81       	ldd	r25, Y+5	; 0x05
    165a:	83 30       	cpi	r24, 0x03	; 3
    165c:	91 05       	cpc	r25, r1
    165e:	09 f4       	brne	.+2      	; 0x1662 <DIO_voidSetPinValue+0x146>
    1660:	40 c0       	rjmp	.+128    	; 0x16e2 <DIO_voidSetPinValue+0x1c6>
    1662:	53 c0       	rjmp	.+166    	; 0x170a <DIO_voidSetPinValue+0x1ee>
			{
			case DIO_PORTA:
				Clear_Bit (PORTA,Copy_u8Pin);
    1664:	ab e3       	ldi	r26, 0x3B	; 59
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	eb e3       	ldi	r30, 0x3B	; 59
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	48 2f       	mov	r20, r24
    1670:	8a 81       	ldd	r24, Y+2	; 0x02
    1672:	28 2f       	mov	r18, r24
    1674:	30 e0       	ldi	r19, 0x00	; 0
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 2e       	mov	r0, r18
    167c:	02 c0       	rjmp	.+4      	; 0x1682 <DIO_voidSetPinValue+0x166>
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	0a 94       	dec	r0
    1684:	e2 f7       	brpl	.-8      	; 0x167e <DIO_voidSetPinValue+0x162>
    1686:	80 95       	com	r24
    1688:	84 23       	and	r24, r20
    168a:	8c 93       	st	X, r24
    168c:	3e c0       	rjmp	.+124    	; 0x170a <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTB:
				Clear_Bit (PORTB,Copy_u8Pin);
    168e:	a8 e3       	ldi	r26, 0x38	; 56
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	e8 e3       	ldi	r30, 0x38	; 56
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	80 81       	ld	r24, Z
    1698:	48 2f       	mov	r20, r24
    169a:	8a 81       	ldd	r24, Y+2	; 0x02
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	02 2e       	mov	r0, r18
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_voidSetPinValue+0x190>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_voidSetPinValue+0x18c>
    16b0:	80 95       	com	r24
    16b2:	84 23       	and	r24, r20
    16b4:	8c 93       	st	X, r24
    16b6:	29 c0       	rjmp	.+82     	; 0x170a <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTC:
				Clear_Bit (PORTC,Copy_u8Pin);
    16b8:	a5 e3       	ldi	r26, 0x35	; 53
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e5 e3       	ldi	r30, 0x35	; 53
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	48 2f       	mov	r20, r24
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	28 2f       	mov	r18, r24
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	02 2e       	mov	r0, r18
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <DIO_voidSetPinValue+0x1ba>
    16d2:	88 0f       	add	r24, r24
    16d4:	99 1f       	adc	r25, r25
    16d6:	0a 94       	dec	r0
    16d8:	e2 f7       	brpl	.-8      	; 0x16d2 <DIO_voidSetPinValue+0x1b6>
    16da:	80 95       	com	r24
    16dc:	84 23       	and	r24, r20
    16de:	8c 93       	st	X, r24
    16e0:	14 c0       	rjmp	.+40     	; 0x170a <DIO_voidSetPinValue+0x1ee>
				break;

			case DIO_PORTD:
				Clear_Bit (PORTD,Copy_u8Pin);
    16e2:	a2 e3       	ldi	r26, 0x32	; 50
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e2 e3       	ldi	r30, 0x32	; 50
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	48 2f       	mov	r20, r24
    16ee:	8a 81       	ldd	r24, Y+2	; 0x02
    16f0:	28 2f       	mov	r18, r24
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	02 2e       	mov	r0, r18
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_voidSetPinValue+0x1e4>
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	0a 94       	dec	r0
    1702:	e2 f7       	brpl	.-8      	; 0x16fc <DIO_voidSetPinValue+0x1e0>
    1704:	80 95       	com	r24
    1706:	84 23       	and	r24, r20
    1708:	8c 93       	st	X, r24

			default:
				break;
			}
		}
}
    170a:	27 96       	adiw	r28, 0x07	; 7
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	08 95       	ret

0000171c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	00 d0       	rcall	.+0      	; 0x1722 <DIO_u8GetPinValue+0x6>
    1722:	00 d0       	rcall	.+0      	; 0x1724 <DIO_u8GetPinValue+0x8>
    1724:	0f 92       	push	r0
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	8a 83       	std	Y+2, r24	; 0x02
    172c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnValuePin;
	switch (Copy_u8Port)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	3d 83       	std	Y+5, r19	; 0x05
    1736:	2c 83       	std	Y+4, r18	; 0x04
    1738:	4c 81       	ldd	r20, Y+4	; 0x04
    173a:	5d 81       	ldd	r21, Y+5	; 0x05
    173c:	41 30       	cpi	r20, 0x01	; 1
    173e:	51 05       	cpc	r21, r1
    1740:	41 f1       	breq	.+80     	; 0x1792 <DIO_u8GetPinValue+0x76>
    1742:	8c 81       	ldd	r24, Y+4	; 0x04
    1744:	9d 81       	ldd	r25, Y+5	; 0x05
    1746:	82 30       	cpi	r24, 0x02	; 2
    1748:	91 05       	cpc	r25, r1
    174a:	34 f4       	brge	.+12     	; 0x1758 <DIO_u8GetPinValue+0x3c>
    174c:	2c 81       	ldd	r18, Y+4	; 0x04
    174e:	3d 81       	ldd	r19, Y+5	; 0x05
    1750:	21 15       	cp	r18, r1
    1752:	31 05       	cpc	r19, r1
    1754:	61 f0       	breq	.+24     	; 0x176e <DIO_u8GetPinValue+0x52>
    1756:	52 c0       	rjmp	.+164    	; 0x17fc <DIO_u8GetPinValue+0xe0>
    1758:	4c 81       	ldd	r20, Y+4	; 0x04
    175a:	5d 81       	ldd	r21, Y+5	; 0x05
    175c:	42 30       	cpi	r20, 0x02	; 2
    175e:	51 05       	cpc	r21, r1
    1760:	51 f1       	breq	.+84     	; 0x17b6 <DIO_u8GetPinValue+0x9a>
    1762:	8c 81       	ldd	r24, Y+4	; 0x04
    1764:	9d 81       	ldd	r25, Y+5	; 0x05
    1766:	83 30       	cpi	r24, 0x03	; 3
    1768:	91 05       	cpc	r25, r1
    176a:	b9 f1       	breq	.+110    	; 0x17da <DIO_u8GetPinValue+0xbe>
    176c:	47 c0       	rjmp	.+142    	; 0x17fc <DIO_u8GetPinValue+0xe0>
		{
			case DIO_PORTA:
				Local_u8ReturnValuePin= Get_Bit(PINA,Copy_u8Pin);
    176e:	e9 e3       	ldi	r30, 0x39	; 57
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <DIO_u8GetPinValue+0x6a>
    1782:	55 95       	asr	r21
    1784:	47 95       	ror	r20
    1786:	8a 95       	dec	r24
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <DIO_u8GetPinValue+0x66>
    178a:	ca 01       	movw	r24, r20
    178c:	81 70       	andi	r24, 0x01	; 1
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	35 c0       	rjmp	.+106    	; 0x17fc <DIO_u8GetPinValue+0xe0>
			break;

			case DIO_PORTB:
				Local_u8ReturnValuePin= Get_Bit(PINB,Copy_u8Pin);
    1792:	e6 e3       	ldi	r30, 0x36	; 54
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	28 2f       	mov	r18, r24
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	88 2f       	mov	r24, r24
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	a9 01       	movw	r20, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <DIO_u8GetPinValue+0x8e>
    17a6:	55 95       	asr	r21
    17a8:	47 95       	ror	r20
    17aa:	8a 95       	dec	r24
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <DIO_u8GetPinValue+0x8a>
    17ae:	ca 01       	movw	r24, r20
    17b0:	81 70       	andi	r24, 0x01	; 1
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	23 c0       	rjmp	.+70     	; 0x17fc <DIO_u8GetPinValue+0xe0>
				break;

			case DIO_PORTC:
				Local_u8ReturnValuePin= Get_Bit(PINC,Copy_u8Pin);
    17b6:	e3 e3       	ldi	r30, 0x33	; 51
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 2f       	mov	r24, r24
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	a9 01       	movw	r20, r18
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <DIO_u8GetPinValue+0xb2>
    17ca:	55 95       	asr	r21
    17cc:	47 95       	ror	r20
    17ce:	8a 95       	dec	r24
    17d0:	e2 f7       	brpl	.-8      	; 0x17ca <DIO_u8GetPinValue+0xae>
    17d2:	ca 01       	movw	r24, r20
    17d4:	81 70       	andi	r24, 0x01	; 1
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	11 c0       	rjmp	.+34     	; 0x17fc <DIO_u8GetPinValue+0xe0>
				break;

			case DIO_PORTD:
				Local_u8ReturnValuePin= Get_Bit(PIND,Copy_u8Pin);
    17da:	e0 e3       	ldi	r30, 0x30	; 48
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	a9 01       	movw	r20, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_u8GetPinValue+0xd6>
    17ee:	55 95       	asr	r21
    17f0:	47 95       	ror	r20
    17f2:	8a 95       	dec	r24
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_u8GetPinValue+0xd2>
    17f6:	ca 01       	movw	r24, r20
    17f8:	81 70       	andi	r24, 0x01	; 1
    17fa:	89 83       	std	Y+1, r24	; 0x01
				break;

			default:
				break;
		}
	return Local_u8ReturnValuePin;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <DIO_voidPullUpPin>:

void DIO_voidPullUpPin(u8 Copy_u8Port ,u8 Copy_u8Pin)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <DIO_voidPullUpPin+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <DIO_voidPullUpPin+0x8>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3c 83       	std	Y+4, r19	; 0x04
    1826:	2b 83       	std	Y+3, r18	; 0x03
    1828:	8b 81       	ldd	r24, Y+3	; 0x03
    182a:	9c 81       	ldd	r25, Y+4	; 0x04
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	91 05       	cpc	r25, r1
    1830:	49 f1       	breq	.+82     	; 0x1884 <DIO_voidPullUpPin+0x76>
    1832:	2b 81       	ldd	r18, Y+3	; 0x03
    1834:	3c 81       	ldd	r19, Y+4	; 0x04
    1836:	22 30       	cpi	r18, 0x02	; 2
    1838:	31 05       	cpc	r19, r1
    183a:	2c f4       	brge	.+10     	; 0x1846 <DIO_voidPullUpPin+0x38>
    183c:	8b 81       	ldd	r24, Y+3	; 0x03
    183e:	9c 81       	ldd	r25, Y+4	; 0x04
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	61 f0       	breq	.+24     	; 0x185c <DIO_voidPullUpPin+0x4e>
    1844:	5a c0       	rjmp	.+180    	; 0x18fa <DIO_voidPullUpPin+0xec>
    1846:	2b 81       	ldd	r18, Y+3	; 0x03
    1848:	3c 81       	ldd	r19, Y+4	; 0x04
    184a:	22 30       	cpi	r18, 0x02	; 2
    184c:	31 05       	cpc	r19, r1
    184e:	71 f1       	breq	.+92     	; 0x18ac <DIO_voidPullUpPin+0x9e>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	83 30       	cpi	r24, 0x03	; 3
    1856:	91 05       	cpc	r25, r1
    1858:	e9 f1       	breq	.+122    	; 0x18d4 <DIO_voidPullUpPin+0xc6>
    185a:	4f c0       	rjmp	.+158    	; 0x18fa <DIO_voidPullUpPin+0xec>
			{
			case DIO_PORTA:
				Set_Bit (PORTA,Copy_u8Pin);
    185c:	ab e3       	ldi	r26, 0x3B	; 59
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	eb e3       	ldi	r30, 0x3B	; 59
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_voidPullUpPin+0x6c>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_voidPullUpPin+0x68>
    187e:	84 2b       	or	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	3b c0       	rjmp	.+118    	; 0x18fa <DIO_voidPullUpPin+0xec>
				break;

			case DIO_PORTB:
				Set_Bit (PORTB,Copy_u8Pin);;
    1884:	a8 e3       	ldi	r26, 0x38	; 56
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e8 e3       	ldi	r30, 0x38	; 56
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_voidPullUpPin+0x94>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_voidPullUpPin+0x90>
    18a6:	84 2b       	or	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	27 c0       	rjmp	.+78     	; 0x18fa <DIO_voidPullUpPin+0xec>
				break;

			case DIO_PORTC:
				Set_Bit (PORTC,Copy_u8Pin);;
    18ac:	a5 e3       	ldi	r26, 0x35	; 53
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e5 e3       	ldi	r30, 0x35	; 53
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_voidPullUpPin+0xbc>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_voidPullUpPin+0xb8>
    18ce:	84 2b       	or	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	13 c0       	rjmp	.+38     	; 0x18fa <DIO_voidPullUpPin+0xec>
				break;

			case DIO_PORTD:
				Set_Bit (PORTD,Copy_u8Pin);;
    18d4:	a2 e3       	ldi	r26, 0x32	; 50
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e2 e3       	ldi	r30, 0x32	; 50
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	48 2f       	mov	r20, r24
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <DIO_voidPullUpPin+0xe4>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <DIO_voidPullUpPin+0xe0>
    18f6:	84 2b       	or	r24, r20
    18f8:	8c 93       	st	X, r24
				break;

			default:
				break;
			}
}
    18fa:	0f 90       	pop	r0
    18fc:	0f 90       	pop	r0
    18fe:	0f 90       	pop	r0
    1900:	0f 90       	pop	r0
    1902:	cf 91       	pop	r28
    1904:	df 91       	pop	r29
    1906:	08 95       	ret

00001908 <EXTI_voidINT0Init>:
#include "EXTI_Registers.h"
#include "EXTI_Interface.h"


void EXTI_voidINT0Init(void)
{
    1908:	df 93       	push	r29
    190a:	cf 93       	push	r28
    190c:	cd b7       	in	r28, 0x3d	; 61
    190e:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(MCUCR,MCUCR_ISC00);
    1910:	a5 e5       	ldi	r26, 0x55	; 85
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e5 e5       	ldi	r30, 0x55	; 85
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	8e 7f       	andi	r24, 0xFE	; 254
    191c:	8c 93       	st	X, r24
	Set_Bit(MCUCR,MCUCR_ISC01);
    191e:	a5 e5       	ldi	r26, 0x55	; 85
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	e5 e5       	ldi	r30, 0x55	; 85
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	82 60       	ori	r24, 0x02	; 2
    192a:	8c 93       	st	X, r24

	Set_Bit(GICR,GICR_INT0);
    192c:	ab e5       	ldi	r26, 0x5B	; 91
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	eb e5       	ldi	r30, 0x5B	; 91
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 64       	ori	r24, 0x40	; 64
    1938:	8c 93       	st	X, r24
}
    193a:	cf 91       	pop	r28
    193c:	df 91       	pop	r29
    193e:	08 95       	ret

00001940 <EXTI_voidINT1Init>:

void EXTI_voidINT1Init(void)
{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(MCUCR,MCUCR_ISC10);
    1948:	a5 e5       	ldi	r26, 0x55	; 85
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e5 e5       	ldi	r30, 0x55	; 85
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	8b 7f       	andi	r24, 0xFB	; 251
    1954:	8c 93       	st	X, r24
	Set_Bit(MCUCR,MCUCR_ISC11);
    1956:	a5 e5       	ldi	r26, 0x55	; 85
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e5 e5       	ldi	r30, 0x55	; 85
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	88 60       	ori	r24, 0x08	; 8
    1962:	8c 93       	st	X, r24

	Set_Bit(GICR,GICR_INT1);
    1964:	ab e5       	ldi	r26, 0x5B	; 91
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	eb e5       	ldi	r30, 0x5B	; 91
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 68       	ori	r24, 0x80	; 128
    1970:	8c 93       	st	X, r24
}
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <EXTI_voidINT2Init>:

void EXTI_voidINT2Init(void)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(MCUCSR,MCUCSR_ISC2);
    1980:	a4 e5       	ldi	r26, 0x54	; 84
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e4 e5       	ldi	r30, 0x54	; 84
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	8f 7b       	andi	r24, 0xBF	; 191
    198c:	8c 93       	st	X, r24
	Set_Bit(GICR,GICR_INT2);
    198e:	ab e5       	ldi	r26, 0x5B	; 91
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	eb e5       	ldi	r30, 0x5B	; 91
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 62       	ori	r24, 0x20	; 32
    199a:	8c 93       	st	X, r24
}
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	08 95       	ret

000019a2 <EXTI_voidGlobalEnable>:

void EXTI_voidGlobalEnable(void)
{
    19a2:	df 93       	push	r29
    19a4:	cf 93       	push	r28
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
	/*Enable Global Interrupt*/
	Set_Bit(SREG,SREG_I);
    19aa:	af e5       	ldi	r26, 0x5F	; 95
    19ac:	b0 e0       	ldi	r27, 0x00	; 0
    19ae:	ef e5       	ldi	r30, 0x5F	; 95
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	80 68       	ori	r24, 0x80	; 128
    19b6:	8c 93       	st	X, r24
}
    19b8:	cf 91       	pop	r28
    19ba:	df 91       	pop	r29
    19bc:	08 95       	ret

000019be <EXTI_voidGlobalDisable>:

void EXTI_voidGlobalDisable(void)
{
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
	/*Disable Global Interrupt*/
	Clear_Bit(SREG,SREG_I);
    19c6:	af e5       	ldi	r26, 0x5F	; 95
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	ef e5       	ldi	r30, 0x5F	; 95
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	8f 77       	andi	r24, 0x7F	; 127
    19d2:	8c 93       	st	X, r24
}
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <KeyPad_voidInit>:
#include <util/delay.h>

u8 Rows[4] = {KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN, KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN};
u8 Cols[3] = {KEYPAD_COL1_PIN, KEYPAD_COL2_PIN, KEYPAD_COL3_PIN};

void KeyPad_voidInit(void){
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <KeyPad_voidInit+0x6>
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62

	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
    19e4:	1a 82       	std	Y+2, r1	; 0x02
    19e6:	1b c0       	rjmp	.+54     	; 0x1a1e <KeyPad_voidInit+0x44>
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	fc 01       	movw	r30, r24
    19f0:	eb 50       	subi	r30, 0x0B	; 11
    19f2:	fe 4f       	sbci	r31, 0xFE	; 254
    19f4:	90 81       	ld	r25, Z
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	69 2f       	mov	r22, r25
    19fa:	41 e0       	ldi	r20, 0x01	; 1
    19fc:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
    1a00:	8a 81       	ldd	r24, Y+2	; 0x02
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	fc 01       	movw	r30, r24
    1a08:	eb 50       	subi	r30, 0x0B	; 11
    1a0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a0c:	90 81       	ld	r25, Z
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	69 2f       	mov	r22, r25
    1a12:	41 e0       	ldi	r20, 0x01	; 1
    1a14:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
u8 Rows[4] = {KEYPAD_ROW1_PIN, KEYPAD_ROW2_PIN, KEYPAD_ROW3_PIN, KEYPAD_ROW4_PIN};
u8 Cols[3] = {KEYPAD_COL1_PIN, KEYPAD_COL2_PIN, KEYPAD_COL3_PIN};

void KeyPad_voidInit(void){

	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	84 30       	cpi	r24, 0x04	; 4
    1a22:	10 f3       	brcs	.-60     	; 0x19e8 <KeyPad_voidInit+0xe>
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
	}

	for(u8 colCounter = 0; colCounter<3;colCounter++){
    1a24:	19 82       	std	Y+1, r1	; 0x01
    1a26:	1b c0       	rjmp	.+54     	; 0x1a5e <KeyPad_voidInit+0x84>
		DIO_voidSetPinDirection(KEYPAD_PORT,Cols[colCounter],INPUT_PIN);
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e7 50       	subi	r30, 0x07	; 7
    1a32:	fe 4f       	sbci	r31, 0xFE	; 254
    1a34:	90 81       	ld	r25, Z
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	69 2f       	mov	r22, r25
    1a3a:	40 e0       	ldi	r20, 0x00	; 0
    1a3c:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(KEYPAD_PORT,Cols[colCounter],HIGH);
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
    1a42:	88 2f       	mov	r24, r24
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	fc 01       	movw	r30, r24
    1a48:	e7 50       	subi	r30, 0x07	; 7
    1a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4c:	90 81       	ld	r25, Z
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	69 2f       	mov	r22, r25
    1a52:	41 e0       	ldi	r20, 0x01	; 1
    1a54:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
	for(u8 rowCounter = 0; rowCounter<4;rowCounter++){
		DIO_voidSetPinDirection(KEYPAD_PORT,Rows[rowCounter],OUTPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Rows[rowCounter],HIGH);
	}

	for(u8 colCounter = 0; colCounter<3;colCounter++){
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	8f 5f       	subi	r24, 0xFF	; 255
    1a5c:	89 83       	std	Y+1, r24	; 0x01
    1a5e:	89 81       	ldd	r24, Y+1	; 0x01
    1a60:	83 30       	cpi	r24, 0x03	; 3
    1a62:	10 f3       	brcs	.-60     	; 0x1a28 <KeyPad_voidInit+0x4e>
		DIO_voidSetPinDirection(KEYPAD_PORT,Cols[colCounter],INPUT_PIN);
		DIO_voidSetPinValue(KEYPAD_PORT,Cols[colCounter],HIGH);
	}
}
    1a64:	0f 90       	pop	r0
    1a66:	0f 90       	pop	r0
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <KeyPad_u8GetPress>:

u8 KeyPad_u8GetPress(void){
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	61 97       	sbiw	r28, 0x11	; 17
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Col;
	u8 x = 0;
    1a82:	18 8a       	std	Y+16, r1	; 0x10
	for(u8 rowCounter=0; rowCounter<4;rowCounter++){
    1a84:	1f 86       	std	Y+15, r1	; 0x0f
    1a86:	97 c0       	rjmp	.+302    	; 0x1bb6 <KeyPad_u8GetPress+0x148>
		KeyPad_voidSelectLine(Rows[rowCounter]);
    1a88:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8a:	88 2f       	mov	r24, r24
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	fc 01       	movw	r30, r24
    1a90:	eb 50       	subi	r30, 0x0B	; 11
    1a92:	fe 4f       	sbci	r31, 0xFE	; 254
    1a94:	80 81       	ld	r24, Z
    1a96:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <KeyPad_voidSelectLine>
		Local_u8Col = KeyPad_u8ReadButton(Rows[rowCounter]);
    1a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a9c:	88 2f       	mov	r24, r24
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	eb 50       	subi	r30, 0x0B	; 11
    1aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    1aa6:	80 81       	ld	r24, Z
    1aa8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <KeyPad_u8ReadButton>
    1aac:	89 8b       	std	Y+17, r24	; 0x11
		if(Local_u8Col != KEYPAD_NOT_PRESSED)
    1aae:	89 89       	ldd	r24, Y+17	; 0x11
    1ab0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ab2:	61 f0       	breq	.+24     	; 0x1acc <KeyPad_u8GetPress+0x5e>
			x = (rowCounter*3)+Local_u8Col;
    1ab4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	c9 01       	movw	r24, r18
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	82 0f       	add	r24, r18
    1ac2:	93 1f       	adc	r25, r19
    1ac4:	98 2f       	mov	r25, r24
    1ac6:	89 89       	ldd	r24, Y+17	; 0x11
    1ac8:	89 0f       	add	r24, r25
    1aca:	88 8b       	std	Y+16, r24	; 0x10
    1acc:	80 e0       	ldi	r24, 0x00	; 0
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	a0 e0       	ldi	r26, 0x00	; 0
    1ad2:	b0 e4       	ldi	r27, 0x40	; 64
    1ad4:	8b 87       	std	Y+11, r24	; 0x0b
    1ad6:	9c 87       	std	Y+12, r25	; 0x0c
    1ad8:	ad 87       	std	Y+13, r26	; 0x0d
    1ada:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1adc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ade:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a e7       	ldi	r20, 0x7A	; 122
    1aea:	53 e4       	ldi	r21, 0x43	; 67
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	8f 83       	std	Y+7, r24	; 0x07
    1af6:	98 87       	std	Y+8, r25	; 0x08
    1af8:	a9 87       	std	Y+9, r26	; 0x09
    1afa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1afc:	6f 81       	ldd	r22, Y+7	; 0x07
    1afe:	78 85       	ldd	r23, Y+8	; 0x08
    1b00:	89 85       	ldd	r24, Y+9	; 0x09
    1b02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	40 e8       	ldi	r20, 0x80	; 128
    1b0a:	5f e3       	ldi	r21, 0x3F	; 63
    1b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b10:	88 23       	and	r24, r24
    1b12:	2c f4       	brge	.+10     	; 0x1b1e <KeyPad_u8GetPress+0xb0>
		__ticks = 1;
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
    1b1c:	3f c0       	rjmp	.+126    	; 0x1b9c <KeyPad_u8GetPress+0x12e>
	else if (__tmp > 65535)
    1b1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b20:	78 85       	ldd	r23, Y+8	; 0x08
    1b22:	89 85       	ldd	r24, Y+9	; 0x09
    1b24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	4c f5       	brge	.+82     	; 0x1b88 <KeyPad_u8GetPress+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b36:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b38:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e2       	ldi	r20, 0x20	; 32
    1b44:	51 e4       	ldi	r21, 0x41	; 65
    1b46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	0f c0       	rjmp	.+30     	; 0x1b7e <KeyPad_u8GetPress+0x110>
    1b60:	89 e1       	ldi	r24, 0x19	; 25
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9c 83       	std	Y+4, r25	; 0x04
    1b66:	8b 83       	std	Y+3, r24	; 0x03
    1b68:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <KeyPad_u8GetPress+0xfe>
    1b70:	9c 83       	std	Y+4, r25	; 0x04
    1b72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b74:	8d 81       	ldd	r24, Y+5	; 0x05
    1b76:	9e 81       	ldd	r25, Y+6	; 0x06
    1b78:	01 97       	sbiw	r24, 0x01	; 1
    1b7a:	9e 83       	std	Y+6, r25	; 0x06
    1b7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b80:	9e 81       	ldd	r25, Y+6	; 0x06
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	69 f7       	brne	.-38     	; 0x1b60 <KeyPad_u8GetPress+0xf2>
    1b86:	14 c0       	rjmp	.+40     	; 0x1bb0 <KeyPad_u8GetPress+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b88:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8a:	78 85       	ldd	r23, Y+8	; 0x08
    1b8c:	89 85       	ldd	r24, Y+9	; 0x09
    1b8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	9a 83       	std	Y+2, r25	; 0x02
    1ba2:	89 83       	std	Y+1, r24	; 0x01
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	f1 f7       	brne	.-4      	; 0x1ba8 <KeyPad_u8GetPress+0x13a>
    1bac:	9a 83       	std	Y+2, r25	; 0x02
    1bae:	89 83       	std	Y+1, r24	; 0x01
}

u8 KeyPad_u8GetPress(void){
	u8 Local_u8Col;
	u8 x = 0;
	for(u8 rowCounter=0; rowCounter<4;rowCounter++){
    1bb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb2:	8f 5f       	subi	r24, 0xFF	; 255
    1bb4:	8f 87       	std	Y+15, r24	; 0x0f
    1bb6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	08 f4       	brcc	.+2      	; 0x1bbe <KeyPad_u8GetPress+0x150>
    1bbc:	65 cf       	rjmp	.-310    	; 0x1a88 <KeyPad_u8GetPress+0x1a>
		Local_u8Col = KeyPad_u8ReadButton(Rows[rowCounter]);
		if(Local_u8Col != KEYPAD_NOT_PRESSED)
			x = (rowCounter*3)+Local_u8Col;
		_delay_ms(2);
	}
	return Keypad_Char[x];
    1bbe:	88 89       	ldd	r24, Y+16	; 0x10
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	ec 5f       	subi	r30, 0xFC	; 252
    1bc8:	fd 4f       	sbci	r31, 0xFD	; 253
    1bca:	80 81       	ld	r24, Z
}
    1bcc:	61 96       	adiw	r28, 0x11	; 17
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	cf 91       	pop	r28
    1bda:	df 91       	pop	r29
    1bdc:	08 95       	ret

00001bde <KeyPad_u8ReadButton>:

u8 KeyPad_u8ReadButton(u8 Copy_u8Line){
    1bde:	df 93       	push	r29
    1be0:	cf 93       	push	r28
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <KeyPad_u8ReadButton+0x6>
    1be4:	0f 92       	push	r0
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 colCounter=0; colCounter<4;colCounter++){
    1bec:	19 82       	std	Y+1, r1	; 0x01
    1bee:	18 c0       	rjmp	.+48     	; 0x1c20 <KeyPad_u8ReadButton+0x42>
		if(DIO_u8GetPinValue(KEYPAD_PORT, Cols[colCounter]) == LOW){
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	88 2f       	mov	r24, r24
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	e7 50       	subi	r30, 0x07	; 7
    1bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfc:	90 81       	ld	r25, Z
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	69 2f       	mov	r22, r25
    1c02:	0e 94 8e 0b 	call	0x171c	; 0x171c <DIO_u8GetPinValue>
    1c06:	88 23       	and	r24, r24
    1c08:	41 f4       	brne	.+16     	; 0x1c1a <KeyPad_u8ReadButton+0x3c>
			DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	6a 81       	ldd	r22, Y+2	; 0x02
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
			return colCounter;
    1c14:	89 81       	ldd	r24, Y+1	; 0x01
    1c16:	8b 83       	std	Y+3, r24	; 0x03
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <KeyPad_u8ReadButton+0x56>
	return Keypad_Char[x];
}

u8 KeyPad_u8ReadButton(u8 Copy_u8Line){

	for(u8 colCounter=0; colCounter<4;colCounter++){
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	8f 5f       	subi	r24, 0xFF	; 255
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	89 81       	ldd	r24, Y+1	; 0x01
    1c22:	84 30       	cpi	r24, 0x04	; 4
    1c24:	28 f3       	brcs	.-54     	; 0x1bf0 <KeyPad_u8ReadButton+0x12>
			DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
			return colCounter;
		}
	}

	DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, HIGH);
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	6a 81       	ldd	r22, Y+2	; 0x02
    1c2a:	41 e0       	ldi	r20, 0x01	; 1
    1c2c:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
	return KEYPAD_NOT_PRESSED;
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	8b 83       	std	Y+3, r24	; 0x03
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03


}
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	0f 90       	pop	r0
    1c3c:	cf 91       	pop	r28
    1c3e:	df 91       	pop	r29
    1c40:	08 95       	ret

00001c42 <KeyPad_voidSelectLine>:
void KeyPad_voidSelectLine(u8 Copy_u8Line){
    1c42:	df 93       	push	r29
    1c44:	cf 93       	push	r28
    1c46:	0f 92       	push	r0
    1c48:	cd b7       	in	r28, 0x3d	; 61
    1c4a:	de b7       	in	r29, 0x3e	; 62
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(KEYPAD_PORT, Copy_u8Line, LOW);
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	69 81       	ldd	r22, Y+1	; 0x01
    1c52:	40 e0       	ldi	r20, 0x00	; 0
    1c54:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
}
    1c58:	0f 90       	pop	r0
    1c5a:	cf 91       	pop	r28
    1c5c:	df 91       	pop	r29
    1c5e:	08 95       	ret

00001c60 <LCD_voidSendCommand>:

#include <util/delay.h>


void LCD_voidSendCommand(u8 Copy_u8Command)
{
    1c60:	df 93       	push	r29
    1c62:	cf 93       	push	r28
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	2f 97       	sbiw	r28, 0x0f	; 15
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,LOW);
    1c76:	83 e0       	ldi	r24, 0x03	; 3
    1c78:	62 e0       	ldi	r22, 0x02	; 2
    1c7a:	40 e0       	ldi	r20, 0x00	; 0
    1c7c:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
	/* Set Rs for LOW for send command*/

	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    1c80:	83 e0       	ldi	r24, 0x03	; 3
    1c82:	63 e0       	ldi	r22, 0x03	; 3
    1c84:	40 e0       	ldi	r20, 0x00	; 0
    1c86:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
	/* Set Rw for LOW for write*/

	DIO_voidSetPortValue (LCD_DATA_PORT,Copy_u8Command);
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c8e:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
	/*Send command*/

	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    1c92:	83 e0       	ldi	r24, 0x03	; 3
    1c94:	64 e0       	ldi	r22, 0x04	; 4
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a0 e0       	ldi	r26, 0x00	; 0
    1ca2:	b0 e4       	ldi	r27, 0x40	; 64
    1ca4:	8b 87       	std	Y+11, r24	; 0x0b
    1ca6:	9c 87       	std	Y+12, r25	; 0x0c
    1ca8:	ad 87       	std	Y+13, r26	; 0x0d
    1caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a e7       	ldi	r20, 0x7A	; 122
    1cba:	53 e4       	ldi	r21, 0x43	; 67
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8f 83       	std	Y+7, r24	; 0x07
    1cc6:	98 87       	std	Y+8, r25	; 0x08
    1cc8:	a9 87       	std	Y+9, r26	; 0x09
    1cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <LCD_voidSendCommand+0x8e>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <LCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <LCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <LCD_voidSendCommand+0xee>
    1d30:	89 e1       	ldi	r24, 0x19	; 25
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <LCD_voidSendCommand+0xdc>
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <LCD_voidSendCommand+0xd0>
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <LCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_voidSendCommand+0x118>
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	 DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    1d80:	83 e0       	ldi	r24, 0x03	; 3
    1d82:	64 e0       	ldi	r22, 0x04	; 4
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
	/*Enable LCD*/
}
    1d8a:	2f 96       	adiw	r28, 0x0f	; 15
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <LCD_voidSendData>:

void LCD_voidSendData(u8 Copy_u8Data)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	2f 97       	sbiw	r28, 0x0f	; 15
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,HIGH);
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	62 e0       	ldi	r22, 0x02	; 2
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
	/* Set Rs for HIGH for send Data*/

	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,LOW);
    1dbc:	83 e0       	ldi	r24, 0x03	; 3
    1dbe:	63 e0       	ldi	r22, 0x03	; 3
    1dc0:	40 e0       	ldi	r20, 0x00	; 0
    1dc2:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
	/* Set Rw for LOW for write*/

	DIO_voidSetPortValue (LCD_DATA_PORT,Copy_u8Data);
    1dc6:	82 e0       	ldi	r24, 0x02	; 2
    1dc8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1dca:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
	/*Send DATA*/

	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	64 e0       	ldi	r22, 0x04	; 4
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e0       	ldi	r26, 0x00	; 0
    1dde:	b0 e4       	ldi	r27, 0x40	; 64
    1de0:	8b 87       	std	Y+11, r24	; 0x0b
    1de2:	9c 87       	std	Y+12, r25	; 0x0c
    1de4:	ad 87       	std	Y+13, r26	; 0x0d
    1de6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e7       	ldi	r20, 0x7A	; 122
    1df6:	53 e4       	ldi	r21, 0x43	; 67
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8f 83       	std	Y+7, r24	; 0x07
    1e02:	98 87       	std	Y+8, r25	; 0x08
    1e04:	a9 87       	std	Y+9, r26	; 0x09
    1e06:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e08:	6f 81       	ldd	r22, Y+7	; 0x07
    1e0a:	78 85       	ldd	r23, Y+8	; 0x08
    1e0c:	89 85       	ldd	r24, Y+9	; 0x09
    1e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <LCD_voidSendData+0x8e>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9e 83       	std	Y+6, r25	; 0x06
    1e26:	8d 83       	std	Y+5, r24	; 0x05
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <LCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1e2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2c:	78 85       	ldd	r23, Y+8	; 0x08
    1e2e:	89 85       	ldd	r24, Y+9	; 0x09
    1e30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <LCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e44:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e46:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e48:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9e 83       	std	Y+6, r25	; 0x06
    1e68:	8d 83       	std	Y+5, r24	; 0x05
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <LCD_voidSendData+0xee>
    1e6c:	89 e1       	ldi	r24, 0x19	; 25
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9c 83       	std	Y+4, r25	; 0x04
    1e72:	8b 83       	std	Y+3, r24	; 0x03
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_voidSendData+0xdc>
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8d 81       	ldd	r24, Y+5	; 0x05
    1e82:	9e 81       	ldd	r25, Y+6	; 0x06
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9e 83       	std	Y+6, r25	; 0x06
    1e88:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <LCD_voidSendData+0xd0>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <LCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9e 83       	std	Y+6, r25	; 0x06
    1ea6:	8d 83       	std	Y+5, r24	; 0x05
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	9e 81       	ldd	r25, Y+6	; 0x06
    1eac:	9a 83       	std	Y+2, r25	; 0x02
    1eae:	89 83       	std	Y+1, r24	; 0x01
    1eb0:	89 81       	ldd	r24, Y+1	; 0x01
    1eb2:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_voidSendData+0x118>
    1eb8:	9a 83       	std	Y+2, r25	; 0x02
    1eba:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(2);
	DIO_voidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,LOW);
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	64 e0       	ldi	r22, 0x04	; 4
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
	/*Enable LCD*/

}
    1ec6:	2f 96       	adiw	r28, 0x0f	; 15
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	de bf       	out	0x3e, r29	; 62
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	cd bf       	out	0x3d, r28	; 61
    1ed2:	cf 91       	pop	r28
    1ed4:	df 91       	pop	r29
    1ed6:	08 95       	ret

00001ed8 <LCD_voidInit>:

void LCD_voidInit()
{
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	2e 97       	sbiw	r28, 0x0e	; 14
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	ac e0       	ldi	r26, 0x0C	; 12
    1ef2:	b2 e4       	ldi	r27, 0x42	; 66
    1ef4:	8b 87       	std	Y+11, r24	; 0x0b
    1ef6:	9c 87       	std	Y+12, r25	; 0x0c
    1ef8:	ad 87       	std	Y+13, r26	; 0x0d
    1efa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1efe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4a e7       	ldi	r20, 0x7A	; 122
    1f0a:	53 e4       	ldi	r21, 0x43	; 67
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8f 83       	std	Y+7, r24	; 0x07
    1f16:	98 87       	std	Y+8, r25	; 0x08
    1f18:	a9 87       	std	Y+9, r26	; 0x09
    1f1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1e:	78 85       	ldd	r23, Y+8	; 0x08
    1f20:	89 85       	ldd	r24, Y+9	; 0x09
    1f22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 e8       	ldi	r20, 0x80	; 128
    1f2a:	5f e3       	ldi	r21, 0x3F	; 63
    1f2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	2c f4       	brge	.+10     	; 0x1f3e <LCD_voidInit+0x66>
		__ticks = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9e 83       	std	Y+6, r25	; 0x06
    1f3a:	8d 83       	std	Y+5, r24	; 0x05
    1f3c:	3f c0       	rjmp	.+126    	; 0x1fbc <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	3f ef       	ldi	r19, 0xFF	; 255
    1f4a:	4f e7       	ldi	r20, 0x7F	; 127
    1f4c:	57 e4       	ldi	r21, 0x47	; 71
    1f4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f52:	18 16       	cp	r1, r24
    1f54:	4c f5       	brge	.+82     	; 0x1fa8 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f56:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f58:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e2       	ldi	r20, 0x20	; 32
    1f64:	51 e4       	ldi	r21, 0x41	; 65
    1f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	bc 01       	movw	r22, r24
    1f70:	cd 01       	movw	r24, r26
    1f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9e 83       	std	Y+6, r25	; 0x06
    1f7c:	8d 83       	std	Y+5, r24	; 0x05
    1f7e:	0f c0       	rjmp	.+30     	; 0x1f9e <LCD_voidInit+0xc6>
    1f80:	89 e1       	ldi	r24, 0x19	; 25
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_voidInit+0xb4>
    1f90:	9c 83       	std	Y+4, r25	; 0x04
    1f92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	9e 83       	std	Y+6, r25	; 0x06
    1f9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	00 97       	sbiw	r24, 0x00	; 0
    1fa4:	69 f7       	brne	.-38     	; 0x1f80 <LCD_voidInit+0xa8>
    1fa6:	14 c0       	rjmp	.+40     	; 0x1fd0 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa8:	6f 81       	ldd	r22, Y+7	; 0x07
    1faa:	78 85       	ldd	r23, Y+8	; 0x08
    1fac:	89 85       	ldd	r24, Y+9	; 0x09
    1fae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	f1 f7       	brne	.-4      	; 0x1fc8 <LCD_voidInit+0xf0>
    1fcc:	9a 83       	std	Y+2, r25	; 0x02
    1fce:	89 83       	std	Y+1, r24	; 0x01
	/*Wait after the power on for 35 ms*/
	_delay_ms(35);

	/*Function set
	 * 2 lines *** 5*8 pixels size*/
	LCD_voidSendCommand(0b00111100);
    1fd0:	8c e3       	ldi	r24, 0x3C	; 60
    1fd2:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>

	/*Display On/OFF
	 * Display ON *** cursor OFF *** Blink OFF*/
	LCD_voidSendCommand(0b00001100);
    1fd6:	8c e0       	ldi	r24, 0x0C	; 12
    1fd8:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>

	/*Display Clear*/
	LCD_voidSendCommand(0b00000001);
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>

}
    1fe2:	2e 96       	adiw	r28, 0x0e	; 14
    1fe4:	0f b6       	in	r0, 0x3f	; 63
    1fe6:	f8 94       	cli
    1fe8:	de bf       	out	0x3e, r29	; 62
    1fea:	0f be       	out	0x3f, r0	; 63
    1fec:	cd bf       	out	0x3d, r28	; 61
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <LCD_voidConfigDirection>:

void LCD_voidConfigDirection()
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
	/* PINS Ditection */
	DIO_voidSetPortDitection (LCD_DATA_PORT,OUTPUT_PORT);
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	6f ef       	ldi	r22, 0xFF	; 255
    2000:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_voidSetPortDitection>
	DIO_voidSetPinDirection (LCD_CTRL_PORT,LCD_RS_PIN,HIGH);
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	62 e0       	ldi	r22, 0x02	; 2
    2008:	41 e0       	ldi	r20, 0x01	; 1
    200a:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CTRL_PORT,LCD_RW_PIN,HIGH);
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	63 e0       	ldi	r22, 0x03	; 3
    2012:	41 e0       	ldi	r20, 0x01	; 1
    2014:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection (LCD_CTRL_PORT,LCD_E_PIN,HIGH);
    2018:	83 e0       	ldi	r24, 0x03	; 3
    201a:	64 e0       	ldi	r22, 0x04	; 4
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>
}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_voidWriteString>:

void LCD_voidWriteString(s8 *Copy_u8String)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <LCD_voidWriteString+0x6>
    202e:	0f 92       	push	r0
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	9b 83       	std	Y+3, r25	; 0x03
    2036:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_Index =0;
    2038:	19 82       	std	Y+1, r1	; 0x01
    203a:	0e c0       	rjmp	.+28     	; 0x2058 <LCD_voidWriteString+0x30>
	while (Copy_u8String[Local_Index]!=0)
	{
		LCD_voidSendData (Copy_u8String[Local_Index]);
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	28 2f       	mov	r18, r24
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	8a 81       	ldd	r24, Y+2	; 0x02
    2044:	9b 81       	ldd	r25, Y+3	; 0x03
    2046:	fc 01       	movw	r30, r24
    2048:	e2 0f       	add	r30, r18
    204a:	f3 1f       	adc	r31, r19
    204c:	80 81       	ld	r24, Z
    204e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
		Local_Index++;
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	8f 5f       	subi	r24, 0xFF	; 255
    2056:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(s8 *Copy_u8String)
{
	u8 Local_Index =0;
	while (Copy_u8String[Local_Index]!=0)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	28 2f       	mov	r18, r24
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	9b 81       	ldd	r25, Y+3	; 0x03
    2062:	fc 01       	movw	r30, r24
    2064:	e2 0f       	add	r30, r18
    2066:	f3 1f       	adc	r31, r19
    2068:	80 81       	ld	r24, Z
    206a:	88 23       	and	r24, r24
    206c:	39 f7       	brne	.-50     	; 0x203c <LCD_voidWriteString+0x14>
	{
		LCD_voidSendData (Copy_u8String[Local_Index]);
		Local_Index++;
	}
}
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	cf 91       	pop	r28
    2076:	df 91       	pop	r29
    2078:	08 95       	ret

0000207a <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u8 Copy_u8Number)
{
    207a:	df 93       	push	r29
    207c:	cf 93       	push	r28
    207e:	00 d0       	rcall	.+0      	; 0x2080 <LCD_voidWriteNumber+0x6>
    2080:	0f 92       	push	r0
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8Number)
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	28 2f       	mov	r18, r24
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	3b 83       	std	Y+3, r19	; 0x03
    2090:	2a 83       	std	Y+2, r18	; 0x02
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	84 30       	cpi	r24, 0x04	; 4
    2098:	91 05       	cpc	r25, r1
    209a:	09 f4       	brne	.+2      	; 0x209e <LCD_voidWriteNumber+0x24>
    209c:	4f c0       	rjmp	.+158    	; 0x213c <LCD_voidWriteNumber+0xc2>
    209e:	2a 81       	ldd	r18, Y+2	; 0x02
    20a0:	3b 81       	ldd	r19, Y+3	; 0x03
    20a2:	25 30       	cpi	r18, 0x05	; 5
    20a4:	31 05       	cpc	r19, r1
    20a6:	d4 f4       	brge	.+52     	; 0x20dc <LCD_voidWriteNumber+0x62>
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	9b 81       	ldd	r25, Y+3	; 0x03
    20ac:	81 30       	cpi	r24, 0x01	; 1
    20ae:	91 05       	cpc	r25, r1
    20b0:	c9 f1       	breq	.+114    	; 0x2124 <LCD_voidWriteNumber+0xaa>
    20b2:	2a 81       	ldd	r18, Y+2	; 0x02
    20b4:	3b 81       	ldd	r19, Y+3	; 0x03
    20b6:	22 30       	cpi	r18, 0x02	; 2
    20b8:	31 05       	cpc	r19, r1
    20ba:	2c f4       	brge	.+10     	; 0x20c6 <LCD_voidWriteNumber+0x4c>
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	9b 81       	ldd	r25, Y+3	; 0x03
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	61 f1       	breq	.+88     	; 0x211c <LCD_voidWriteNumber+0xa2>
    20c4:	52 c0       	rjmp	.+164    	; 0x216a <LCD_voidWriteNumber+0xf0>
    20c6:	2a 81       	ldd	r18, Y+2	; 0x02
    20c8:	3b 81       	ldd	r19, Y+3	; 0x03
    20ca:	22 30       	cpi	r18, 0x02	; 2
    20cc:	31 05       	cpc	r19, r1
    20ce:	71 f1       	breq	.+92     	; 0x212c <LCD_voidWriteNumber+0xb2>
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	9b 81       	ldd	r25, Y+3	; 0x03
    20d4:	83 30       	cpi	r24, 0x03	; 3
    20d6:	91 05       	cpc	r25, r1
    20d8:	69 f1       	breq	.+90     	; 0x2134 <LCD_voidWriteNumber+0xba>
    20da:	47 c0       	rjmp	.+142    	; 0x216a <LCD_voidWriteNumber+0xf0>
    20dc:	2a 81       	ldd	r18, Y+2	; 0x02
    20de:	3b 81       	ldd	r19, Y+3	; 0x03
    20e0:	27 30       	cpi	r18, 0x07	; 7
    20e2:	31 05       	cpc	r19, r1
    20e4:	b9 f1       	breq	.+110    	; 0x2154 <LCD_voidWriteNumber+0xda>
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ea:	88 30       	cpi	r24, 0x08	; 8
    20ec:	91 05       	cpc	r25, r1
    20ee:	5c f4       	brge	.+22     	; 0x2106 <LCD_voidWriteNumber+0x8c>
    20f0:	2a 81       	ldd	r18, Y+2	; 0x02
    20f2:	3b 81       	ldd	r19, Y+3	; 0x03
    20f4:	25 30       	cpi	r18, 0x05	; 5
    20f6:	31 05       	cpc	r19, r1
    20f8:	29 f1       	breq	.+74     	; 0x2144 <LCD_voidWriteNumber+0xca>
    20fa:	8a 81       	ldd	r24, Y+2	; 0x02
    20fc:	9b 81       	ldd	r25, Y+3	; 0x03
    20fe:	86 30       	cpi	r24, 0x06	; 6
    2100:	91 05       	cpc	r25, r1
    2102:	21 f1       	breq	.+72     	; 0x214c <LCD_voidWriteNumber+0xd2>
    2104:	32 c0       	rjmp	.+100    	; 0x216a <LCD_voidWriteNumber+0xf0>
    2106:	2a 81       	ldd	r18, Y+2	; 0x02
    2108:	3b 81       	ldd	r19, Y+3	; 0x03
    210a:	28 30       	cpi	r18, 0x08	; 8
    210c:	31 05       	cpc	r19, r1
    210e:	31 f1       	breq	.+76     	; 0x215c <LCD_voidWriteNumber+0xe2>
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	9b 81       	ldd	r25, Y+3	; 0x03
    2114:	89 30       	cpi	r24, 0x09	; 9
    2116:	91 05       	cpc	r25, r1
    2118:	29 f1       	breq	.+74     	; 0x2164 <LCD_voidWriteNumber+0xea>
    211a:	27 c0       	rjmp	.+78     	; 0x216a <LCD_voidWriteNumber+0xf0>
	{
	case 0:
		LCD_voidSendData('0');
    211c:	80 e3       	ldi	r24, 0x30	; 48
    211e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    2122:	23 c0       	rjmp	.+70     	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 1:
		LCD_voidSendData('1');
    2124:	81 e3       	ldi	r24, 0x31	; 49
    2126:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    212a:	1f c0       	rjmp	.+62     	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 2:
		LCD_voidSendData('2');
    212c:	82 e3       	ldi	r24, 0x32	; 50
    212e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    2132:	1b c0       	rjmp	.+54     	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 3:
		LCD_voidSendData('3');
    2134:	83 e3       	ldi	r24, 0x33	; 51
    2136:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    213a:	17 c0       	rjmp	.+46     	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 4:
		LCD_voidSendData('4');
    213c:	84 e3       	ldi	r24, 0x34	; 52
    213e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    2142:	13 c0       	rjmp	.+38     	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 5:
		LCD_voidSendData('5');
    2144:	85 e3       	ldi	r24, 0x35	; 53
    2146:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    214a:	0f c0       	rjmp	.+30     	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 6:
		LCD_voidSendData('6');
    214c:	86 e3       	ldi	r24, 0x36	; 54
    214e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    2152:	0b c0       	rjmp	.+22     	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 7:
		LCD_voidSendData('7');
    2154:	87 e3       	ldi	r24, 0x37	; 55
    2156:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    215a:	07 c0       	rjmp	.+14     	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 8:
		LCD_voidSendData('8');
    215c:	88 e3       	ldi	r24, 0x38	; 56
    215e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
    2162:	03 c0       	rjmp	.+6      	; 0x216a <LCD_voidWriteNumber+0xf0>
		break;
	case 9:
		LCD_voidSendData('9');
    2164:	89 e3       	ldi	r24, 0x39	; 57
    2166:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
		break;
	default:
		break;

	}
}
    216a:	0f 90       	pop	r0
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	cf 91       	pop	r28
    2172:	df 91       	pop	r29
    2174:	08 95       	ret

00002176 <LCD_voidGoToXY>:

void LCD_voidGoToXY (u8 Copy_u8XPos,u8 Copy_u8YPos)
{
    2176:	df 93       	push	r29
    2178:	cf 93       	push	r28
    217a:	00 d0       	rcall	.+0      	; 0x217c <LCD_voidGoToXY+0x6>
    217c:	0f 92       	push	r0
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	8a 83       	std	Y+2, r24	; 0x02
    2184:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8DDRAM_Address;

	if (Copy_u8YPos == LCD_LINE_ONE)
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	88 23       	and	r24, r24
    218a:	19 f4       	brne	.+6      	; 0x2192 <LCD_voidGoToXY+0x1c>
	{
		Local_u8DDRAM_Address=Copy_u8XPos;
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	89 83       	std	Y+1, r24	; 0x01
    2190:	06 c0       	rjmp	.+12     	; 0x219e <LCD_voidGoToXY+0x28>
	}
	else if (Copy_u8YPos == LCD_LINE_TWO)
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	81 30       	cpi	r24, 0x01	; 1
    2196:	19 f4       	brne	.+6      	; 0x219e <LCD_voidGoToXY+0x28>
	{
		Local_u8DDRAM_Address=Copy_u8XPos +0x40;
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	80 5c       	subi	r24, 0xC0	; 192
    219c:	89 83       	std	Y+1, r24	; 0x01
	}

	Local_u8DDRAM_Address=Local_u8DDRAM_Address +128;// 0b10000000 >> 128
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	80 58       	subi	r24, 0x80	; 128
    21a2:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand (Local_u8DDRAM_Address);
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
}
    21aa:	0f 90       	pop	r0
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <LCD_voidWriteSpecialChar>:

void LCD_voidWriteSpecialChar (u8 *Copy_u8Pattern, u8 Copy_u8XPos,u8 Copy_u8YPos,u8 Copy_u8PatternNumber)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	27 97       	sbiw	r28, 0x07	; 7
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	de bf       	out	0x3e, r29	; 62
    21c6:	0f be       	out	0x3f, r0	; 63
    21c8:	cd bf       	out	0x3d, r28	; 61
    21ca:	9c 83       	std	Y+4, r25	; 0x04
    21cc:	8b 83       	std	Y+3, r24	; 0x03
    21ce:	6d 83       	std	Y+5, r22	; 0x05
    21d0:	4e 83       	std	Y+6, r20	; 0x06
    21d2:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAM_Address = Copy_u8PatternNumber *8 ;
    21d4:	8f 81       	ldd	r24, Y+7	; 0x07
    21d6:	88 2f       	mov	r24, r24
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	88 0f       	add	r24, r24
    21dc:	99 1f       	adc	r25, r25
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidSendCommand (Local_u8CGRAM_Address+64); //0b01000000 >> 64
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	80 5c       	subi	r24, 0xC0	; 192
    21ec:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>

	for (u8 Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    21f0:	19 82       	std	Y+1, r1	; 0x01
    21f2:	0e c0       	rjmp	.+28     	; 0x2210 <LCD_voidWriteSpecialChar+0x5a>
	{
		LCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	8b 81       	ldd	r24, Y+3	; 0x03
    21fc:	9c 81       	ldd	r25, Y+4	; 0x04
    21fe:	fc 01       	movw	r30, r24
    2200:	e2 0f       	add	r30, r18
    2202:	f3 1f       	adc	r31, r19
    2204:	80 81       	ld	r24, Z
    2206:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
{
	u8 Local_u8CGRAM_Address = Copy_u8PatternNumber *8 ;

	LCD_voidSendCommand (Local_u8CGRAM_Address+64); //0b01000000 >> 64

	for (u8 Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	8f 5f       	subi	r24, 0xFF	; 255
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	89 81       	ldd	r24, Y+1	; 0x01
    2212:	88 30       	cpi	r24, 0x08	; 8
    2214:	78 f3       	brcs	.-34     	; 0x21f4 <LCD_voidWriteSpecialChar+0x3e>
	{
		LCD_voidSendData(Copy_u8Pattern[Local_u8Counter]);
	}
	LCD_voidGoToXY(Copy_u8XPos,Copy_u8YPos);
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	6e 81       	ldd	r22, Y+6	; 0x06
    221a:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
	LCD_voidSendData(Copy_u8PatternNumber);
    221e:	8f 81       	ldd	r24, Y+7	; 0x07
    2220:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
}
    2224:	27 96       	adiw	r28, 0x07	; 7
    2226:	0f b6       	in	r0, 0x3f	; 63
    2228:	f8 94       	cli
    222a:	de bf       	out	0x3e, r29	; 62
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	cd bf       	out	0x3d, r28	; 61
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <LM35_voidDisplayBits>:
#include "LM35.h"

//u8 Global_u8Delete=0;

void LM35_voidDisplayBits(ADC_CHANALS_options_t Copy_u8ADCchannel)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	00 d0       	rcall	.+0      	; 0x223c <LM35_voidDisplayBits+0x6>
    223c:	00 d0       	rcall	.+0      	; 0x223e <LM35_voidDisplayBits+0x8>
    223e:	cd b7       	in	r28, 0x3d	; 61
    2240:	de b7       	in	r29, 0x3e	; 62
    2242:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u16Bits =ADC_u16Read(Copy_u8ADCchannel);
    2244:	8c 81       	ldd	r24, Y+4	; 0x04
    2246:	0e 94 73 07 	call	0xee6	; 0xee6 <ADC_u16Read>
    224a:	9b 83       	std	Y+3, r25	; 0x03
    224c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u16Index=1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	16 c0       	rjmp	.+44     	; 0x2280 <LM35_voidDisplayBits+0x4a>

	while(Local_u16Index<=10)
	{
		if (Local_u16Bits&0b1000000000)
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	80 70       	andi	r24, 0x00	; 0
    225a:	92 70       	andi	r25, 0x02	; 2
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	21 f0       	breq	.+8      	; 0x2268 <LM35_voidDisplayBits+0x32>
			LCD_voidWriteNumber(1);
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_voidWriteNumber>
    2266:	03 c0       	rjmp	.+6      	; 0x226e <LM35_voidDisplayBits+0x38>
		else
			LCD_voidWriteNumber(0);
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_voidWriteNumber>

		Local_u16Bits=Local_u16Bits<<1;
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	9b 81       	ldd	r25, Y+3	; 0x03
    2272:	88 0f       	add	r24, r24
    2274:	99 1f       	adc	r25, r25
    2276:	9b 83       	std	Y+3, r25	; 0x03
    2278:	8a 83       	std	Y+2, r24	; 0x02
		Local_u16Index++;
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	8f 5f       	subi	r24, 0xFF	; 255
    227e:	89 83       	std	Y+1, r24	; 0x01
void LM35_voidDisplayBits(ADC_CHANALS_options_t Copy_u8ADCchannel)
{
	u16 Local_u16Bits =ADC_u16Read(Copy_u8ADCchannel);
	u8 Local_u16Index=1;

	while(Local_u16Index<=10)
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	8b 30       	cpi	r24, 0x0B	; 11
    2284:	38 f3       	brcs	.-50     	; 0x2254 <LM35_voidDisplayBits+0x1e>
			LCD_voidWriteNumber(0);

		Local_u16Bits=Local_u16Bits<<1;
		Local_u16Index++;
	}
}
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	cf 91       	pop	r28
    2290:	df 91       	pop	r29
    2292:	08 95       	ret

00002294 <LM35_voidDisplayVolt>:

void LM35_voidDisplayVolt(f32 Local_f32Volt)
{
    2294:	df 93       	push	r29
    2296:	cf 93       	push	r28
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
    229c:	2f 97       	sbiw	r28, 0x0f	; 15
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
    22a8:	6c 87       	std	Y+12, r22	; 0x0c
    22aa:	7d 87       	std	Y+13, r23	; 0x0d
    22ac:	8e 87       	std	Y+14, r24	; 0x0e
    22ae:	9f 87       	std	Y+15, r25	; 0x0f
	u16 Local_u8IntPart =Local_f32Volt; //200.19
    22b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
	u16 Local_u8FloatPart=Local_f32Volt*10.0; //2001.9
    22c4:	6c 85       	ldd	r22, Y+12	; 0x0c
    22c6:	7d 85       	ldd	r23, Y+13	; 0x0d
    22c8:	8e 85       	ldd	r24, Y+14	; 0x0e
    22ca:	9f 85       	ldd	r25, Y+15	; 0x0f
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e2       	ldi	r20, 0x20	; 32
    22d2:	51 e4       	ldi	r21, 0x41	; 65
    22d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	bc 01       	movw	r22, r24
    22de:	cd 01       	movw	r24, r26
    22e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Index=255;
    22ec:	8f ef       	ldi	r24, 0xFF	; 255
    22ee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Arr[5];


	if (Local_u8IntPart==0)
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	00 97       	sbiw	r24, 0x00	; 0
    22f6:	09 f5       	brne	.+66     	; 0x233a <LM35_voidDisplayVolt+0xa6>
			LCD_voidWriteNumber(0);
    22f8:	80 e0       	ldi	r24, 0x00	; 0
    22fa:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_voidWriteNumber>
    22fe:	35 c0       	rjmp	.+106    	; 0x236a <LM35_voidDisplayVolt+0xd6>

	else
	{
		while (Local_u8IntPart)
		{
			Local_u8Index++;
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	8f 5f       	subi	r24, 0xFF	; 255
    2304:	8a 83       	std	Y+2, r24	; 0x02
			Local_u8Arr[Local_u8Index]=Local_u8IntPart%10;
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	e8 2f       	mov	r30, r24
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	2a e0       	ldi	r18, 0x0A	; 10
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	b9 01       	movw	r22, r18
    2316:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__udivmodhi4>
    231a:	28 2f       	mov	r18, r24
    231c:	ce 01       	movw	r24, r28
    231e:	07 96       	adiw	r24, 0x07	; 7
    2320:	e8 0f       	add	r30, r24
    2322:	f9 1f       	adc	r31, r25
    2324:	20 83       	st	Z, r18
			Local_u8IntPart/=10;
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	2a e0       	ldi	r18, 0x0A	; 10
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	b9 01       	movw	r22, r18
    2330:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__udivmodhi4>
    2334:	cb 01       	movw	r24, r22
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
	if (Local_u8IntPart==0)
			LCD_voidWriteNumber(0);

	else
	{
		while (Local_u8IntPart)
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	f9 f6       	brne	.-66     	; 0x2300 <LM35_voidDisplayVolt+0x6c>
			Local_u8Index++;
			Local_u8Arr[Local_u8Index]=Local_u8IntPart%10;
			Local_u8IntPart/=10;
		}

		for (u8 Local_u8Counter=Local_u8Index;Local_u8Counter!=255;Local_u8Counter--)
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	89 83       	std	Y+1, r24	; 0x01
    2346:	0e c0       	rjmp	.+28     	; 0x2364 <LM35_voidDisplayVolt+0xd0>
		{
			LCD_voidWriteNumber(Local_u8Arr[Local_u8Counter]);
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	ce 01       	movw	r24, r28
    2350:	07 96       	adiw	r24, 0x07	; 7
    2352:	fc 01       	movw	r30, r24
    2354:	e2 0f       	add	r30, r18
    2356:	f3 1f       	adc	r31, r19
    2358:	80 81       	ld	r24, Z
    235a:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_voidWriteNumber>
			Local_u8Index++;
			Local_u8Arr[Local_u8Index]=Local_u8IntPart%10;
			Local_u8IntPart/=10;
		}

		for (u8 Local_u8Counter=Local_u8Index;Local_u8Counter!=255;Local_u8Counter--)
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	81 50       	subi	r24, 0x01	; 1
    2362:	89 83       	std	Y+1, r24	; 0x01
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	8f 3f       	cpi	r24, 0xFF	; 255
    2368:	79 f7       	brne	.-34     	; 0x2348 <LM35_voidDisplayVolt+0xb4>
		{
			LCD_voidWriteNumber(Local_u8Arr[Local_u8Counter]);
		}
	}

	LCD_voidSendData('.');
    236a:	8e e2       	ldi	r24, 0x2E	; 46
    236c:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>

	Local_u8FloatPart%=10;
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	2a e0       	ldi	r18, 0x0A	; 10
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	b9 01       	movw	r22, r18
    237a:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__udivmodhi4>
    237e:	9c 83       	std	Y+4, r25	; 0x04
    2380:	8b 83       	std	Y+3, r24	; 0x03

	LCD_voidWriteNumber(Local_u8FloatPart);
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_voidWriteNumber>
}
    2388:	2f 96       	adiw	r28, 0x0f	; 15
    238a:	0f b6       	in	r0, 0x3f	; 63
    238c:	f8 94       	cli
    238e:	de bf       	out	0x3e, r29	; 62
    2390:	0f be       	out	0x3f, r0	; 63
    2392:	cd bf       	out	0x3d, r28	; 61
    2394:	cf 91       	pop	r28
    2396:	df 91       	pop	r29
    2398:	08 95       	ret

0000239a <LM35_voidVoltToTemperature>:

f32 LM35_voidVoltToTemperature(f32 Copy_f32ADCVolt)
{
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	28 97       	sbiw	r28, 0x08	; 8
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	6d 83       	std	Y+5, r22	; 0x05
    23b0:	7e 83       	std	Y+6, r23	; 0x06
    23b2:	8f 83       	std	Y+7, r24	; 0x07
    23b4:	98 87       	std	Y+8, r25	; 0x08
	f32 Local_f32Temp =Copy_f32ADCVolt*100;
    23b6:	6d 81       	ldd	r22, Y+5	; 0x05
    23b8:	7e 81       	ldd	r23, Y+6	; 0x06
    23ba:	8f 81       	ldd	r24, Y+7	; 0x07
    23bc:	98 85       	ldd	r25, Y+8	; 0x08
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	48 ec       	ldi	r20, 0xC8	; 200
    23c4:	52 e4       	ldi	r21, 0x42	; 66
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	89 83       	std	Y+1, r24	; 0x01
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	ab 83       	std	Y+3, r26	; 0x03
    23d4:	bc 83       	std	Y+4, r27	; 0x04
	LM35_voidDisplayVolt (Local_f32Temp);
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	ab 81       	ldd	r26, Y+3	; 0x03
    23dc:	bc 81       	ldd	r27, Y+4	; 0x04
    23de:	bc 01       	movw	r22, r24
    23e0:	cd 01       	movw	r24, r26
    23e2:	0e 94 4a 11 	call	0x2294	; 0x2294 <LM35_voidDisplayVolt>
	LCD_voidSendData(0b11011111);
    23e6:	8f ed       	ldi	r24, 0xDF	; 223
    23e8:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
	LCD_voidSendData('C');
    23ec:	83 e4       	ldi	r24, 0x43	; 67
    23ee:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
	return Local_f32Temp;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	9a 81       	ldd	r25, Y+2	; 0x02
    23f6:	ab 81       	ldd	r26, Y+3	; 0x03
    23f8:	bc 81       	ldd	r27, Y+4	; 0x04

}
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	28 96       	adiw	r28, 0x08	; 8
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <PWM_voidInitTimer1>:
#include "Timer1_Registers.h"
#include "Timer1_Interface.h"


void PWM_voidInitTimer1()
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
	/*Select PWM non Inverting*/

	Clear_Bit(TCCR1A,TCCR1A_COM1A0);
    2418:	af e4       	ldi	r26, 0x4F	; 79
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	ef e4       	ldi	r30, 0x4F	; 79
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	8f 7b       	andi	r24, 0xBF	; 191
    2424:	8c 93       	st	X, r24
	Set_Bit(TCCR1A,TCCR1A_COM1A1);
    2426:	af e4       	ldi	r26, 0x4F	; 79
    2428:	b0 e0       	ldi	r27, 0x00	; 0
    242a:	ef e4       	ldi	r30, 0x4F	; 79
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	80 81       	ld	r24, Z
    2430:	80 68       	ori	r24, 0x80	; 128
    2432:	8c 93       	st	X, r24

	/*Select Mode 14*/

	Clear_Bit(TCCR1A,TCCR1A_WGM10);
    2434:	af e4       	ldi	r26, 0x4F	; 79
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	ef e4       	ldi	r30, 0x4F	; 79
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8e 7f       	andi	r24, 0xFE	; 254
    2440:	8c 93       	st	X, r24
	Set_Bit(TCCR1A,TCCR1A_WGM11);
    2442:	af e4       	ldi	r26, 0x4F	; 79
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	ef e4       	ldi	r30, 0x4F	; 79
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	82 60       	ori	r24, 0x02	; 2
    244e:	8c 93       	st	X, r24

	Set_Bit(TCC1RB,TCC1RB_WGM12);
    2450:	ae e4       	ldi	r26, 0x4E	; 78
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	ee e4       	ldi	r30, 0x4E	; 78
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	88 60       	ori	r24, 0x08	; 8
    245c:	8c 93       	st	X, r24
	Set_Bit(TCC1RB,TCC1RB_WGM13);
    245e:	ae e4       	ldi	r26, 0x4E	; 78
    2460:	b0 e0       	ldi	r27, 0x00	; 0
    2462:	ee e4       	ldi	r30, 0x4E	; 78
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	80 81       	ld	r24, Z
    2468:	80 61       	ori	r24, 0x10	; 16
    246a:	8c 93       	st	X, r24

	/*Select prescaler div_8 */

	TCC1RB&=0b11111000;
    246c:	ae e4       	ldi	r26, 0x4E	; 78
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	ee e4       	ldi	r30, 0x4E	; 78
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	88 7f       	andi	r24, 0xF8	; 248
    2478:	8c 93       	st	X, r24
	TCC1RB|=CLK_DIV_8<<TCC1RB_CS10_CS11_CS12;
    247a:	ae e4       	ldi	r26, 0x4E	; 78
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	ee e4       	ldi	r30, 0x4E	; 78
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	82 60       	ori	r24, 0x02	; 2
    2486:	8c 93       	st	X, r24

	/*Set the number of ticks (Top)*/

	ICR1=20000;
    2488:	e6 e4       	ldi	r30, 0x46	; 70
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 e2       	ldi	r24, 0x20	; 32
    248e:	9e e4       	ldi	r25, 0x4E	; 78
    2490:	91 83       	std	Z+1, r25	; 0x01
    2492:	80 83       	st	Z, r24

	/*Set the number of ticks of combare match (Compare Value)*/

	//OCR1A=750;

}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <PWM_voidSetCompareMatchValue>:

void PWM_voidSetCompareMatchValue(u16 Copy_u16value)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <PWM_voidSetCompareMatchValue+0x6>
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	9a 83       	std	Y+2, r25	; 0x02
    24a6:	89 83       	std	Y+1, r24	; 0x01

	/*Set the number of ticks of combare match (Compare Value)*/

	OCR1A=Copy_u16value;
    24a8:	ea e4       	ldi	r30, 0x4A	; 74
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	9a 81       	ldd	r25, Y+2	; 0x02
    24b0:	91 83       	std	Z+1, r25	; 0x01
    24b2:	80 83       	st	Z, r24
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <USART_voidInit>:

#include "USART_Interface.h"
#include "USART_Registers.h"

void USART_voidInit()
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
	/*Select Character Size in bit 2*/
	Clear_Bit(UCSRB,UCSRB_UCSZ2);
    24c6:	aa e2       	ldi	r26, 0x2A	; 42
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	ea e2       	ldi	r30, 0x2A	; 42
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8b 7f       	andi	r24, 0xFB	; 251
    24d2:	8c 93       	st	X, r24
	 * select Asynchronous ,
	 * no parity ,
	 * 1 stop bit ,
	 * 8 bit data ,
	 * no clock Polarity*/
	 UCSRC = 0b10000110;
    24d4:	e0 e4       	ldi	r30, 0x40	; 64
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	86 e8       	ldi	r24, 0x86	; 134
    24da:	80 83       	st	Z, r24

	 /*Select Baud Rate 9600 bps*/
	 UBRRL=51;
    24dc:	e9 e2       	ldi	r30, 0x29	; 41
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	83 e3       	ldi	r24, 0x33	; 51
    24e2:	80 83       	st	Z, r24

	 /*Enable Tx , Rx*/
	 Set_Bit(UCSRB,UCSRB_TXEN);
    24e4:	aa e2       	ldi	r26, 0x2A	; 42
    24e6:	b0 e0       	ldi	r27, 0x00	; 0
    24e8:	ea e2       	ldi	r30, 0x2A	; 42
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	80 81       	ld	r24, Z
    24ee:	88 60       	ori	r24, 0x08	; 8
    24f0:	8c 93       	st	X, r24
	 Set_Bit(UCSRB,UCSRB_RXEN);
    24f2:	aa e2       	ldi	r26, 0x2A	; 42
    24f4:	b0 e0       	ldi	r27, 0x00	; 0
    24f6:	ea e2       	ldi	r30, 0x2A	; 42
    24f8:	f0 e0       	ldi	r31, 0x00	; 0
    24fa:	80 81       	ld	r24, Z
    24fc:	80 61       	ori	r24, 0x10	; 16
    24fe:	8c 93       	st	X, r24

}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <USART_voidWriteData>:

void USART_voidWriteData(u8 Copy_u8Data)
{
    2506:	df 93       	push	r29
    2508:	cf 93       	push	r28
    250a:	0f 92       	push	r0
    250c:	cd b7       	in	r28, 0x3d	; 61
    250e:	de b7       	in	r29, 0x3e	; 62
    2510:	89 83       	std	Y+1, r24	; 0x01
	/*Waiting until Transmit Buffer will be empty and ready for new data*/
	while (Get_Bit(UCSRA,UCSRA_UDRE)!=1);
    2512:	eb e2       	ldi	r30, 0x2B	; 43
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	80 81       	ld	r24, Z
    2518:	82 95       	swap	r24
    251a:	86 95       	lsr	r24
    251c:	87 70       	andi	r24, 0x07	; 7
    251e:	88 2f       	mov	r24, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	81 70       	andi	r24, 0x01	; 1
    2524:	90 70       	andi	r25, 0x00	; 0
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	a1 f3       	breq	.-24     	; 0x2512 <USART_voidWriteData+0xc>

	/*Put New Data*/
		UDR=Copy_u8Data;
    252a:	ec e2       	ldi	r30, 0x2C	; 44
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	80 83       	st	Z, r24
}
    2532:	0f 90       	pop	r0
    2534:	cf 91       	pop	r28
    2536:	df 91       	pop	r29
    2538:	08 95       	ret

0000253a <USART_u8ReadData>:

u8 USART_u8ReadData()
{
    253a:	df 93       	push	r29
    253c:	cf 93       	push	r28
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
	/*Waiting until Receive Buffer to finish receiving and to be ready for new data*/
	while (Get_Bit(UCSRA,UCSRA_RXC)!=1);
    2542:	eb e2       	ldi	r30, 0x2B	; 43
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 1f       	adc	r24, r24
    254a:	88 27       	eor	r24, r24
    254c:	88 1f       	adc	r24, r24
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	c1 f7       	brne	.-16     	; 0x2542 <USART_u8ReadData+0x8>

	/*Read New Data*/
		return UDR;
    2552:	ec e2       	ldi	r30, 0x2C	; 44
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	80 81       	ld	r24, Z
}
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <main>:
#include "APP_Interface.h"

u8 Global_u8Motor[8]={17,27,27,21,17,17,17,17};

int main (void)
{
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	cf 5d       	subi	r28, 0xDF	; 223
    256c:	d0 40       	sbci	r29, 0x00	; 0
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
	ADC_voidInit();
    2578:	0e 94 47 07 	call	0xe8e	; 0xe8e <ADC_voidInit>
	LCD_voidConfigDirection();
    257c:	0e 94 fa 0f 	call	0x1ff4	; 0x1ff4 <LCD_voidConfigDirection>
	LCD_voidInit();
    2580:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <LCD_voidInit>

	USART_voidInit();
    2584:	0e 94 5f 12 	call	0x24be	; 0x24be <USART_voidInit>

	DIO_voidSetPinDirection(DIO_PORTD,PIN0,INPUT_PIN);
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	60 e0       	ldi	r22, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,PIN1,OUTPUT_PIN);
    2592:	83 e0       	ldi	r24, 0x03	; 3
    2594:	61 e0       	ldi	r22, 0x01	; 1
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTD,PIN5,OUTPUT_PIN);
    259c:	83 e0       	ldi	r24, 0x03	; 3
    259e:	65 e0       	ldi	r22, 0x05	; 5
    25a0:	41 e0       	ldi	r20, 0x01	; 1
    25a2:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTD,PIN0,INPUT_PIN);
    25a6:	83 e0       	ldi	r24, 0x03	; 3
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_PORTD,PIN1,INPUT_PIN);
    25b0:	83 e0       	ldi	r24, 0x03	; 3
    25b2:	61 e0       	ldi	r22, 0x01	; 1
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DIO_PORTA,PIN3,OUTPUT_PIN);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	63 e0       	ldi	r22, 0x03	; 3
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	0e 94 4d 09 	call	0x129a	; 0x129a <DIO_voidSetPinDirection>

	DIO_voidSetPortDitection(DIO_PORTB,OUTPUT_PORT);
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	6f ef       	ldi	r22, 0xFF	; 255
    25c8:	0e 94 0c 09 	call	0x1218	; 0x1218 <DIO_voidSetPortDitection>

	u8 Local_u8Read,Local_ArrUser[5]={"1234"},Local_ArrPass[5]={"5678"};
    25cc:	ce 01       	movw	r24, r28
    25ce:	8a 54       	subi	r24, 0x4A	; 74
    25d0:	9f 4f       	sbci	r25, 0xFF	; 255
    25d2:	ca 52       	subi	r28, 0x2A	; 42
    25d4:	df 4f       	sbci	r29, 0xFF	; 255
    25d6:	99 83       	std	Y+1, r25	; 0x01
    25d8:	88 83       	st	Y, r24
    25da:	c6 5d       	subi	r28, 0xD6	; 214
    25dc:	d0 40       	sbci	r29, 0x00	; 0
    25de:	83 ee       	ldi	r24, 0xE3	; 227
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	c8 52       	subi	r28, 0x28	; 40
    25e4:	df 4f       	sbci	r29, 0xFF	; 255
    25e6:	99 83       	std	Y+1, r25	; 0x01
    25e8:	88 83       	st	Y, r24
    25ea:	c8 5d       	subi	r28, 0xD8	; 216
    25ec:	d0 40       	sbci	r29, 0x00	; 0
    25ee:	95 e0       	ldi	r25, 0x05	; 5
    25f0:	c6 52       	subi	r28, 0x26	; 38
    25f2:	df 4f       	sbci	r29, 0xFF	; 255
    25f4:	98 83       	st	Y, r25
    25f6:	ca 5d       	subi	r28, 0xDA	; 218
    25f8:	d0 40       	sbci	r29, 0x00	; 0
    25fa:	c8 52       	subi	r28, 0x28	; 40
    25fc:	df 4f       	sbci	r29, 0xFF	; 255
    25fe:	e8 81       	ld	r30, Y
    2600:	f9 81       	ldd	r31, Y+1	; 0x01
    2602:	c8 5d       	subi	r28, 0xD8	; 216
    2604:	d0 40       	sbci	r29, 0x00	; 0
    2606:	00 80       	ld	r0, Z
    2608:	c8 52       	subi	r28, 0x28	; 40
    260a:	df 4f       	sbci	r29, 0xFF	; 255
    260c:	88 81       	ld	r24, Y
    260e:	99 81       	ldd	r25, Y+1	; 0x01
    2610:	c8 5d       	subi	r28, 0xD8	; 216
    2612:	d0 40       	sbci	r29, 0x00	; 0
    2614:	01 96       	adiw	r24, 0x01	; 1
    2616:	c8 52       	subi	r28, 0x28	; 40
    2618:	df 4f       	sbci	r29, 0xFF	; 255
    261a:	99 83       	std	Y+1, r25	; 0x01
    261c:	88 83       	st	Y, r24
    261e:	c8 5d       	subi	r28, 0xD8	; 216
    2620:	d0 40       	sbci	r29, 0x00	; 0
    2622:	ca 52       	subi	r28, 0x2A	; 42
    2624:	df 4f       	sbci	r29, 0xFF	; 255
    2626:	e8 81       	ld	r30, Y
    2628:	f9 81       	ldd	r31, Y+1	; 0x01
    262a:	c6 5d       	subi	r28, 0xD6	; 214
    262c:	d0 40       	sbci	r29, 0x00	; 0
    262e:	00 82       	st	Z, r0
    2630:	ca 52       	subi	r28, 0x2A	; 42
    2632:	df 4f       	sbci	r29, 0xFF	; 255
    2634:	88 81       	ld	r24, Y
    2636:	99 81       	ldd	r25, Y+1	; 0x01
    2638:	c6 5d       	subi	r28, 0xD6	; 214
    263a:	d0 40       	sbci	r29, 0x00	; 0
    263c:	01 96       	adiw	r24, 0x01	; 1
    263e:	ca 52       	subi	r28, 0x2A	; 42
    2640:	df 4f       	sbci	r29, 0xFF	; 255
    2642:	99 83       	std	Y+1, r25	; 0x01
    2644:	88 83       	st	Y, r24
    2646:	c6 5d       	subi	r28, 0xD6	; 214
    2648:	d0 40       	sbci	r29, 0x00	; 0
    264a:	c6 52       	subi	r28, 0x26	; 38
    264c:	df 4f       	sbci	r29, 0xFF	; 255
    264e:	98 81       	ld	r25, Y
    2650:	ca 5d       	subi	r28, 0xDA	; 218
    2652:	d0 40       	sbci	r29, 0x00	; 0
    2654:	91 50       	subi	r25, 0x01	; 1
    2656:	c6 52       	subi	r28, 0x26	; 38
    2658:	df 4f       	sbci	r29, 0xFF	; 255
    265a:	98 83       	st	Y, r25
    265c:	ca 5d       	subi	r28, 0xDA	; 218
    265e:	d0 40       	sbci	r29, 0x00	; 0
    2660:	c6 52       	subi	r28, 0x26	; 38
    2662:	df 4f       	sbci	r29, 0xFF	; 255
    2664:	e8 81       	ld	r30, Y
    2666:	ca 5d       	subi	r28, 0xDA	; 218
    2668:	d0 40       	sbci	r29, 0x00	; 0
    266a:	ee 23       	and	r30, r30
    266c:	31 f6       	brne	.-116    	; 0x25fa <main+0x9c>
    266e:	ce 01       	movw	r24, r28
    2670:	85 54       	subi	r24, 0x45	; 69
    2672:	9f 4f       	sbci	r25, 0xFF	; 255
    2674:	c5 52       	subi	r28, 0x25	; 37
    2676:	df 4f       	sbci	r29, 0xFF	; 255
    2678:	99 83       	std	Y+1, r25	; 0x01
    267a:	88 83       	st	Y, r24
    267c:	cb 5d       	subi	r28, 0xDB	; 219
    267e:	d0 40       	sbci	r29, 0x00	; 0
    2680:	88 ee       	ldi	r24, 0xE8	; 232
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	c3 52       	subi	r28, 0x23	; 35
    2686:	df 4f       	sbci	r29, 0xFF	; 255
    2688:	99 83       	std	Y+1, r25	; 0x01
    268a:	88 83       	st	Y, r24
    268c:	cd 5d       	subi	r28, 0xDD	; 221
    268e:	d0 40       	sbci	r29, 0x00	; 0
    2690:	95 e0       	ldi	r25, 0x05	; 5
    2692:	c1 52       	subi	r28, 0x21	; 33
    2694:	df 4f       	sbci	r29, 0xFF	; 255
    2696:	98 83       	st	Y, r25
    2698:	cf 5d       	subi	r28, 0xDF	; 223
    269a:	d0 40       	sbci	r29, 0x00	; 0
    269c:	c3 52       	subi	r28, 0x23	; 35
    269e:	df 4f       	sbci	r29, 0xFF	; 255
    26a0:	e8 81       	ld	r30, Y
    26a2:	f9 81       	ldd	r31, Y+1	; 0x01
    26a4:	cd 5d       	subi	r28, 0xDD	; 221
    26a6:	d0 40       	sbci	r29, 0x00	; 0
    26a8:	00 80       	ld	r0, Z
    26aa:	c3 52       	subi	r28, 0x23	; 35
    26ac:	df 4f       	sbci	r29, 0xFF	; 255
    26ae:	88 81       	ld	r24, Y
    26b0:	99 81       	ldd	r25, Y+1	; 0x01
    26b2:	cd 5d       	subi	r28, 0xDD	; 221
    26b4:	d0 40       	sbci	r29, 0x00	; 0
    26b6:	01 96       	adiw	r24, 0x01	; 1
    26b8:	c3 52       	subi	r28, 0x23	; 35
    26ba:	df 4f       	sbci	r29, 0xFF	; 255
    26bc:	99 83       	std	Y+1, r25	; 0x01
    26be:	88 83       	st	Y, r24
    26c0:	cd 5d       	subi	r28, 0xDD	; 221
    26c2:	d0 40       	sbci	r29, 0x00	; 0
    26c4:	c5 52       	subi	r28, 0x25	; 37
    26c6:	df 4f       	sbci	r29, 0xFF	; 255
    26c8:	e8 81       	ld	r30, Y
    26ca:	f9 81       	ldd	r31, Y+1	; 0x01
    26cc:	cb 5d       	subi	r28, 0xDB	; 219
    26ce:	d0 40       	sbci	r29, 0x00	; 0
    26d0:	00 82       	st	Z, r0
    26d2:	c5 52       	subi	r28, 0x25	; 37
    26d4:	df 4f       	sbci	r29, 0xFF	; 255
    26d6:	88 81       	ld	r24, Y
    26d8:	99 81       	ldd	r25, Y+1	; 0x01
    26da:	cb 5d       	subi	r28, 0xDB	; 219
    26dc:	d0 40       	sbci	r29, 0x00	; 0
    26de:	01 96       	adiw	r24, 0x01	; 1
    26e0:	c5 52       	subi	r28, 0x25	; 37
    26e2:	df 4f       	sbci	r29, 0xFF	; 255
    26e4:	99 83       	std	Y+1, r25	; 0x01
    26e6:	88 83       	st	Y, r24
    26e8:	cb 5d       	subi	r28, 0xDB	; 219
    26ea:	d0 40       	sbci	r29, 0x00	; 0
    26ec:	c1 52       	subi	r28, 0x21	; 33
    26ee:	df 4f       	sbci	r29, 0xFF	; 255
    26f0:	98 81       	ld	r25, Y
    26f2:	cf 5d       	subi	r28, 0xDF	; 223
    26f4:	d0 40       	sbci	r29, 0x00	; 0
    26f6:	91 50       	subi	r25, 0x01	; 1
    26f8:	c1 52       	subi	r28, 0x21	; 33
    26fa:	df 4f       	sbci	r29, 0xFF	; 255
    26fc:	98 83       	st	Y, r25
    26fe:	cf 5d       	subi	r28, 0xDF	; 223
    2700:	d0 40       	sbci	r29, 0x00	; 0
    2702:	c1 52       	subi	r28, 0x21	; 33
    2704:	df 4f       	sbci	r29, 0xFF	; 255
    2706:	e8 81       	ld	r30, Y
    2708:	cf 5d       	subi	r28, 0xDF	; 223
    270a:	d0 40       	sbci	r29, 0x00	; 0
    270c:	ee 23       	and	r30, r30
    270e:	31 f6       	brne	.-116    	; 0x269c <main+0x13e>
	u8 Local_ArrUserIN[5],Local_ArrPassIN[5],Local_u8Flag=1,flag=0;
    2710:	fe 01       	movw	r30, r28
    2712:	ec 54       	subi	r30, 0x4C	; 76
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	80 83       	st	Z, r24
    271a:	fe 01       	movw	r30, r28
    271c:	ed 54       	subi	r30, 0x4D	; 77
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	10 82       	st	Z, r1
	while (1)
	{
		u8 Flag2=1;
    2722:	fe 01       	movw	r30, r28
    2724:	ee 54       	subi	r30, 0x4E	; 78
    2726:	ff 4f       	sbci	r31, 0xFF	; 255
    2728:	81 e0       	ldi	r24, 0x01	; 1
    272a:	80 83       	st	Z, r24
		Local_u8Read=USART_u8ReadData();
    272c:	0e 94 9d 12 	call	0x253a	; 0x253a <USART_u8ReadData>
    2730:	fe 01       	movw	r30, r28
    2732:	eb 54       	subi	r30, 0x4B	; 75
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 83       	st	Z, r24

		if (Local_u8Read == '/')
    2738:	fe 01       	movw	r30, r28
    273a:	eb 54       	subi	r30, 0x4B	; 75
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 81       	ld	r24, Z
    2740:	8f 32       	cpi	r24, 0x2F	; 47
    2742:	79 f7       	brne	.-34     	; 0x2722 <main+0x1c4>
		{
			 LCD_voidSendCommand(0b00000001);
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
    274a:	fe 01       	movw	r30, r28
    274c:	e9 56       	subi	r30, 0x69	; 105
    274e:	ff 4f       	sbci	r31, 0xFF	; 255
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 ea       	ldi	r26, 0xA0	; 160
    2756:	b1 e4       	ldi	r27, 0x41	; 65
    2758:	80 83       	st	Z, r24
    275a:	91 83       	std	Z+1, r25	; 0x01
    275c:	a2 83       	std	Z+2, r26	; 0x02
    275e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2760:	8e 01       	movw	r16, r28
    2762:	0d 56       	subi	r16, 0x6D	; 109
    2764:	1f 4f       	sbci	r17, 0xFF	; 255
    2766:	fe 01       	movw	r30, r28
    2768:	e9 56       	subi	r30, 0x69	; 105
    276a:	ff 4f       	sbci	r31, 0xFF	; 255
    276c:	60 81       	ld	r22, Z
    276e:	71 81       	ldd	r23, Z+1	; 0x01
    2770:	82 81       	ldd	r24, Z+2	; 0x02
    2772:	93 81       	ldd	r25, Z+3	; 0x03
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a e7       	ldi	r20, 0x7A	; 122
    277a:	53 e4       	ldi	r21, 0x43	; 67
    277c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	f8 01       	movw	r30, r16
    2786:	80 83       	st	Z, r24
    2788:	91 83       	std	Z+1, r25	; 0x01
    278a:	a2 83       	std	Z+2, r26	; 0x02
    278c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    278e:	fe 01       	movw	r30, r28
    2790:	ed 56       	subi	r30, 0x6D	; 109
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	60 81       	ld	r22, Z
    2796:	71 81       	ldd	r23, Z+1	; 0x01
    2798:	82 81       	ldd	r24, Z+2	; 0x02
    279a:	93 81       	ldd	r25, Z+3	; 0x03
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	44 f4       	brge	.+16     	; 0x27bc <main+0x25e>
		__ticks = 1;
    27ac:	fe 01       	movw	r30, r28
    27ae:	ef 56       	subi	r30, 0x6F	; 111
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	91 83       	std	Z+1, r25	; 0x01
    27b8:	80 83       	st	Z, r24
    27ba:	64 c0       	rjmp	.+200    	; 0x2884 <main+0x326>
	else if (__tmp > 65535)
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 56       	subi	r30, 0x6D	; 109
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	3f ef       	ldi	r19, 0xFF	; 255
    27ce:	4f e7       	ldi	r20, 0x7F	; 127
    27d0:	57 e4       	ldi	r21, 0x47	; 71
    27d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	0c f0       	brlt	.+2      	; 0x27dc <main+0x27e>
    27da:	43 c0       	rjmp	.+134    	; 0x2862 <main+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27dc:	fe 01       	movw	r30, r28
    27de:	e9 56       	subi	r30, 0x69	; 105
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	60 81       	ld	r22, Z
    27e4:	71 81       	ldd	r23, Z+1	; 0x01
    27e6:	82 81       	ldd	r24, Z+2	; 0x02
    27e8:	93 81       	ldd	r25, Z+3	; 0x03
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	40 e2       	ldi	r20, 0x20	; 32
    27f0:	51 e4       	ldi	r21, 0x41	; 65
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8e 01       	movw	r16, r28
    27fc:	0f 56       	subi	r16, 0x6F	; 111
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	bc 01       	movw	r22, r24
    2802:	cd 01       	movw	r24, r26
    2804:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	f8 01       	movw	r30, r16
    280e:	91 83       	std	Z+1, r25	; 0x01
    2810:	80 83       	st	Z, r24
    2812:	1f c0       	rjmp	.+62     	; 0x2852 <main+0x2f4>
    2814:	fe 01       	movw	r30, r28
    2816:	e1 57       	subi	r30, 0x71	; 113
    2818:	ff 4f       	sbci	r31, 0xFF	; 255
    281a:	89 e1       	ldi	r24, 0x19	; 25
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	80 83       	st	Z, r24
    2822:	fe 01       	movw	r30, r28
    2824:	e1 57       	subi	r30, 0x71	; 113
    2826:	ff 4f       	sbci	r31, 0xFF	; 255
    2828:	80 81       	ld	r24, Z
    282a:	91 81       	ldd	r25, Z+1	; 0x01
    282c:	01 97       	sbiw	r24, 0x01	; 1
    282e:	f1 f7       	brne	.-4      	; 0x282c <main+0x2ce>
    2830:	fe 01       	movw	r30, r28
    2832:	e1 57       	subi	r30, 0x71	; 113
    2834:	ff 4f       	sbci	r31, 0xFF	; 255
    2836:	91 83       	std	Z+1, r25	; 0x01
    2838:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283a:	de 01       	movw	r26, r28
    283c:	af 56       	subi	r26, 0x6F	; 111
    283e:	bf 4f       	sbci	r27, 0xFF	; 255
    2840:	fe 01       	movw	r30, r28
    2842:	ef 56       	subi	r30, 0x6F	; 111
    2844:	ff 4f       	sbci	r31, 0xFF	; 255
    2846:	80 81       	ld	r24, Z
    2848:	91 81       	ldd	r25, Z+1	; 0x01
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	11 96       	adiw	r26, 0x01	; 1
    284e:	9c 93       	st	X, r25
    2850:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2852:	fe 01       	movw	r30, r28
    2854:	ef 56       	subi	r30, 0x6F	; 111
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	d1 f6       	brne	.-76     	; 0x2814 <main+0x2b6>
    2860:	27 c0       	rjmp	.+78     	; 0x28b0 <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2862:	8e 01       	movw	r16, r28
    2864:	0f 56       	subi	r16, 0x6F	; 111
    2866:	1f 4f       	sbci	r17, 0xFF	; 255
    2868:	fe 01       	movw	r30, r28
    286a:	ed 56       	subi	r30, 0x6D	; 109
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	f8 01       	movw	r30, r16
    2880:	91 83       	std	Z+1, r25	; 0x01
    2882:	80 83       	st	Z, r24
    2884:	de 01       	movw	r26, r28
    2886:	a3 57       	subi	r26, 0x73	; 115
    2888:	bf 4f       	sbci	r27, 0xFF	; 255
    288a:	fe 01       	movw	r30, r28
    288c:	ef 56       	subi	r30, 0x6F	; 111
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	80 81       	ld	r24, Z
    2892:	91 81       	ldd	r25, Z+1	; 0x01
    2894:	8d 93       	st	X+, r24
    2896:	9c 93       	st	X, r25
    2898:	fe 01       	movw	r30, r28
    289a:	e3 57       	subi	r30, 0x73	; 115
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	91 81       	ldd	r25, Z+1	; 0x01
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <main+0x344>
    28a6:	fe 01       	movw	r30, r28
    28a8:	e3 57       	subi	r30, 0x73	; 115
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	80 83       	st	Z, r24
			 _delay_ms(20);
		     LCD_voidWriteString("Welcome to the");
    28b0:	80 e6       	ldi	r24, 0x60	; 96
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
		     LCD_voidGoToXY(3,1);
    28b8:	83 e0       	ldi	r24, 0x03	; 3
    28ba:	61 e0       	ldi	r22, 0x01	; 1
    28bc:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
		     LCD_voidWriteString("Smart Home");
    28c0:	8f e6       	ldi	r24, 0x6F	; 111
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
    28c8:	fe 01       	movw	r30, r28
    28ca:	e7 57       	subi	r30, 0x77	; 119
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 e0       	ldi	r24, 0x00	; 0
    28d0:	90 e4       	ldi	r25, 0x40	; 64
    28d2:	ac e9       	ldi	r26, 0x9C	; 156
    28d4:	b5 e4       	ldi	r27, 0x45	; 69
    28d6:	80 83       	st	Z, r24
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	a2 83       	std	Z+2, r26	; 0x02
    28dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28de:	8e 01       	movw	r16, r28
    28e0:	0b 57       	subi	r16, 0x7B	; 123
    28e2:	1f 4f       	sbci	r17, 0xFF	; 255
    28e4:	fe 01       	movw	r30, r28
    28e6:	e7 57       	subi	r30, 0x77	; 119
    28e8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ea:	60 81       	ld	r22, Z
    28ec:	71 81       	ldd	r23, Z+1	; 0x01
    28ee:	82 81       	ldd	r24, Z+2	; 0x02
    28f0:	93 81       	ldd	r25, Z+3	; 0x03
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	4a e7       	ldi	r20, 0x7A	; 122
    28f8:	53 e4       	ldi	r21, 0x43	; 67
    28fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	f8 01       	movw	r30, r16
    2904:	80 83       	st	Z, r24
    2906:	91 83       	std	Z+1, r25	; 0x01
    2908:	a2 83       	std	Z+2, r26	; 0x02
    290a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    290c:	fe 01       	movw	r30, r28
    290e:	eb 57       	subi	r30, 0x7B	; 123
    2910:	ff 4f       	sbci	r31, 0xFF	; 255
    2912:	60 81       	ld	r22, Z
    2914:	71 81       	ldd	r23, Z+1	; 0x01
    2916:	82 81       	ldd	r24, Z+2	; 0x02
    2918:	93 81       	ldd	r25, Z+3	; 0x03
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e8       	ldi	r20, 0x80	; 128
    2920:	5f e3       	ldi	r21, 0x3F	; 63
    2922:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2926:	88 23       	and	r24, r24
    2928:	44 f4       	brge	.+16     	; 0x293a <main+0x3dc>
		__ticks = 1;
    292a:	fe 01       	movw	r30, r28
    292c:	ed 57       	subi	r30, 0x7D	; 125
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	81 e0       	ldi	r24, 0x01	; 1
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	91 83       	std	Z+1, r25	; 0x01
    2936:	80 83       	st	Z, r24
    2938:	64 c0       	rjmp	.+200    	; 0x2a02 <main+0x4a4>
	else if (__tmp > 65535)
    293a:	fe 01       	movw	r30, r28
    293c:	eb 57       	subi	r30, 0x7B	; 123
    293e:	ff 4f       	sbci	r31, 0xFF	; 255
    2940:	60 81       	ld	r22, Z
    2942:	71 81       	ldd	r23, Z+1	; 0x01
    2944:	82 81       	ldd	r24, Z+2	; 0x02
    2946:	93 81       	ldd	r25, Z+3	; 0x03
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	3f ef       	ldi	r19, 0xFF	; 255
    294c:	4f e7       	ldi	r20, 0x7F	; 127
    294e:	57 e4       	ldi	r21, 0x47	; 71
    2950:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2954:	18 16       	cp	r1, r24
    2956:	0c f0       	brlt	.+2      	; 0x295a <main+0x3fc>
    2958:	43 c0       	rjmp	.+134    	; 0x29e0 <main+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295a:	fe 01       	movw	r30, r28
    295c:	e7 57       	subi	r30, 0x77	; 119
    295e:	ff 4f       	sbci	r31, 0xFF	; 255
    2960:	60 81       	ld	r22, Z
    2962:	71 81       	ldd	r23, Z+1	; 0x01
    2964:	82 81       	ldd	r24, Z+2	; 0x02
    2966:	93 81       	ldd	r25, Z+3	; 0x03
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	8e 01       	movw	r16, r28
    297a:	0d 57       	subi	r16, 0x7D	; 125
    297c:	1f 4f       	sbci	r17, 0xFF	; 255
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	f8 01       	movw	r30, r16
    298c:	91 83       	std	Z+1, r25	; 0x01
    298e:	80 83       	st	Z, r24
    2990:	1f c0       	rjmp	.+62     	; 0x29d0 <main+0x472>
    2992:	fe 01       	movw	r30, r28
    2994:	ef 57       	subi	r30, 0x7F	; 127
    2996:	ff 4f       	sbci	r31, 0xFF	; 255
    2998:	89 e1       	ldi	r24, 0x19	; 25
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	fe 01       	movw	r30, r28
    29a2:	ef 57       	subi	r30, 0x7F	; 127
    29a4:	ff 4f       	sbci	r31, 0xFF	; 255
    29a6:	80 81       	ld	r24, Z
    29a8:	91 81       	ldd	r25, Z+1	; 0x01
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	f1 f7       	brne	.-4      	; 0x29aa <main+0x44c>
    29ae:	fe 01       	movw	r30, r28
    29b0:	ef 57       	subi	r30, 0x7F	; 127
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	91 83       	std	Z+1, r25	; 0x01
    29b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b8:	de 01       	movw	r26, r28
    29ba:	ad 57       	subi	r26, 0x7D	; 125
    29bc:	bf 4f       	sbci	r27, 0xFF	; 255
    29be:	fe 01       	movw	r30, r28
    29c0:	ed 57       	subi	r30, 0x7D	; 125
    29c2:	ff 4f       	sbci	r31, 0xFF	; 255
    29c4:	80 81       	ld	r24, Z
    29c6:	91 81       	ldd	r25, Z+1	; 0x01
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	11 96       	adiw	r26, 0x01	; 1
    29cc:	9c 93       	st	X, r25
    29ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d0:	fe 01       	movw	r30, r28
    29d2:	ed 57       	subi	r30, 0x7D	; 125
    29d4:	ff 4f       	sbci	r31, 0xFF	; 255
    29d6:	80 81       	ld	r24, Z
    29d8:	91 81       	ldd	r25, Z+1	; 0x01
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	d1 f6       	brne	.-76     	; 0x2992 <main+0x434>
    29de:	27 c0       	rjmp	.+78     	; 0x2a2e <main+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	8e 01       	movw	r16, r28
    29e2:	0d 57       	subi	r16, 0x7D	; 125
    29e4:	1f 4f       	sbci	r17, 0xFF	; 255
    29e6:	fe 01       	movw	r30, r28
    29e8:	eb 57       	subi	r30, 0x7B	; 123
    29ea:	ff 4f       	sbci	r31, 0xFF	; 255
    29ec:	60 81       	ld	r22, Z
    29ee:	71 81       	ldd	r23, Z+1	; 0x01
    29f0:	82 81       	ldd	r24, Z+2	; 0x02
    29f2:	93 81       	ldd	r25, Z+3	; 0x03
    29f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f8:	dc 01       	movw	r26, r24
    29fa:	cb 01       	movw	r24, r22
    29fc:	f8 01       	movw	r30, r16
    29fe:	91 83       	std	Z+1, r25	; 0x01
    2a00:	80 83       	st	Z, r24
    2a02:	de 01       	movw	r26, r28
    2a04:	a1 58       	subi	r26, 0x81	; 129
    2a06:	bf 4f       	sbci	r27, 0xFF	; 255
    2a08:	fe 01       	movw	r30, r28
    2a0a:	ed 57       	subi	r30, 0x7D	; 125
    2a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	8d 93       	st	X+, r24
    2a14:	9c 93       	st	X, r25
    2a16:	fe 01       	movw	r30, r28
    2a18:	e1 58       	subi	r30, 0x81	; 129
    2a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	01 97       	sbiw	r24, 0x01	; 1
    2a22:	f1 f7       	brne	.-4      	; 0x2a20 <main+0x4c2>
    2a24:	fe 01       	movw	r30, r28
    2a26:	e1 58       	subi	r30, 0x81	; 129
    2a28:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2a:	91 83       	std	Z+1, r25	; 0x01
    2a2c:	80 83       	st	Z, r24
		     _delay_ms(5000);
		     LCD_voidSendCommand(0b00000001);
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
    2a34:	fe 01       	movw	r30, r28
    2a36:	e5 58       	subi	r30, 0x85	; 133
    2a38:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a8 e4       	ldi	r26, 0x48	; 72
    2a40:	b3 e4       	ldi	r27, 0x43	; 67
    2a42:	80 83       	st	Z, r24
    2a44:	91 83       	std	Z+1, r25	; 0x01
    2a46:	a2 83       	std	Z+2, r26	; 0x02
    2a48:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	8e 01       	movw	r16, r28
    2a4c:	09 58       	subi	r16, 0x89	; 137
    2a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a50:	fe 01       	movw	r30, r28
    2a52:	e5 58       	subi	r30, 0x85	; 133
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	60 81       	ld	r22, Z
    2a58:	71 81       	ldd	r23, Z+1	; 0x01
    2a5a:	82 81       	ldd	r24, Z+2	; 0x02
    2a5c:	93 81       	ldd	r25, Z+3	; 0x03
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	4a e7       	ldi	r20, 0x7A	; 122
    2a64:	53 e4       	ldi	r21, 0x43	; 67
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	f8 01       	movw	r30, r16
    2a70:	80 83       	st	Z, r24
    2a72:	91 83       	std	Z+1, r25	; 0x01
    2a74:	a2 83       	std	Z+2, r26	; 0x02
    2a76:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e9 58       	subi	r30, 0x89	; 137
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e8       	ldi	r20, 0x80	; 128
    2a8c:	5f e3       	ldi	r21, 0x3F	; 63
    2a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a92:	88 23       	and	r24, r24
    2a94:	44 f4       	brge	.+16     	; 0x2aa6 <main+0x548>
		__ticks = 1;
    2a96:	fe 01       	movw	r30, r28
    2a98:	eb 58       	subi	r30, 0x8B	; 139
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	90 e0       	ldi	r25, 0x00	; 0
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	64 c0       	rjmp	.+200    	; 0x2b6e <main+0x610>
	else if (__tmp > 65535)
    2aa6:	fe 01       	movw	r30, r28
    2aa8:	e9 58       	subi	r30, 0x89	; 137
    2aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2aac:	60 81       	ld	r22, Z
    2aae:	71 81       	ldd	r23, Z+1	; 0x01
    2ab0:	82 81       	ldd	r24, Z+2	; 0x02
    2ab2:	93 81       	ldd	r25, Z+3	; 0x03
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	3f ef       	ldi	r19, 0xFF	; 255
    2ab8:	4f e7       	ldi	r20, 0x7F	; 127
    2aba:	57 e4       	ldi	r21, 0x47	; 71
    2abc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ac0:	18 16       	cp	r1, r24
    2ac2:	0c f0       	brlt	.+2      	; 0x2ac6 <main+0x568>
    2ac4:	43 c0       	rjmp	.+134    	; 0x2b4c <main+0x5ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	e5 58       	subi	r30, 0x85	; 133
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	60 81       	ld	r22, Z
    2ace:	71 81       	ldd	r23, Z+1	; 0x01
    2ad0:	82 81       	ldd	r24, Z+2	; 0x02
    2ad2:	93 81       	ldd	r25, Z+3	; 0x03
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	30 e0       	ldi	r19, 0x00	; 0
    2ad8:	40 e2       	ldi	r20, 0x20	; 32
    2ada:	51 e4       	ldi	r21, 0x41	; 65
    2adc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	8e 01       	movw	r16, r28
    2ae6:	0b 58       	subi	r16, 0x8B	; 139
    2ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    2aea:	bc 01       	movw	r22, r24
    2aec:	cd 01       	movw	r24, r26
    2aee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	f8 01       	movw	r30, r16
    2af8:	91 83       	std	Z+1, r25	; 0x01
    2afa:	80 83       	st	Z, r24
    2afc:	1f c0       	rjmp	.+62     	; 0x2b3c <main+0x5de>
    2afe:	fe 01       	movw	r30, r28
    2b00:	ed 58       	subi	r30, 0x8D	; 141
    2b02:	ff 4f       	sbci	r31, 0xFF	; 255
    2b04:	89 e1       	ldi	r24, 0x19	; 25
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	80 83       	st	Z, r24
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	ed 58       	subi	r30, 0x8D	; 141
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 81       	ld	r24, Z
    2b14:	91 81       	ldd	r25, Z+1	; 0x01
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <main+0x5b8>
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ed 58       	subi	r30, 0x8D	; 141
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	91 83       	std	Z+1, r25	; 0x01
    2b22:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b24:	de 01       	movw	r26, r28
    2b26:	ab 58       	subi	r26, 0x8B	; 139
    2b28:	bf 4f       	sbci	r27, 0xFF	; 255
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	eb 58       	subi	r30, 0x8B	; 139
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	91 81       	ldd	r25, Z+1	; 0x01
    2b34:	01 97       	sbiw	r24, 0x01	; 1
    2b36:	11 96       	adiw	r26, 0x01	; 1
    2b38:	9c 93       	st	X, r25
    2b3a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	eb 58       	subi	r30, 0x8B	; 139
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	d1 f6       	brne	.-76     	; 0x2afe <main+0x5a0>
    2b4a:	27 c0       	rjmp	.+78     	; 0x2b9a <main+0x63c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b4c:	8e 01       	movw	r16, r28
    2b4e:	0b 58       	subi	r16, 0x8B	; 139
    2b50:	1f 4f       	sbci	r17, 0xFF	; 255
    2b52:	fe 01       	movw	r30, r28
    2b54:	e9 58       	subi	r30, 0x89	; 137
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	f8 01       	movw	r30, r16
    2b6a:	91 83       	std	Z+1, r25	; 0x01
    2b6c:	80 83       	st	Z, r24
    2b6e:	de 01       	movw	r26, r28
    2b70:	af 58       	subi	r26, 0x8F	; 143
    2b72:	bf 4f       	sbci	r27, 0xFF	; 255
    2b74:	fe 01       	movw	r30, r28
    2b76:	eb 58       	subi	r30, 0x8B	; 139
    2b78:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7a:	80 81       	ld	r24, Z
    2b7c:	91 81       	ldd	r25, Z+1	; 0x01
    2b7e:	8d 93       	st	X+, r24
    2b80:	9c 93       	st	X, r25
    2b82:	fe 01       	movw	r30, r28
    2b84:	ef 58       	subi	r30, 0x8F	; 143
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <main+0x62e>
    2b90:	fe 01       	movw	r30, r28
    2b92:	ef 58       	subi	r30, 0x8F	; 143
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	91 83       	std	Z+1, r25	; 0x01
    2b98:	80 83       	st	Z, r24
		     _delay_ms(200);

		     do{
		     LCD_voidSendCommand(0b00000001);
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
		     LCD_voidWriteString("Enter User:");
    2ba0:	8a e7       	ldi	r24, 0x7A	; 122
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>

		     if (flag==0)
    2ba8:	fe 01       	movw	r30, r28
    2baa:	ed 54       	subi	r30, 0x4D	; 77
    2bac:	ff 4f       	sbci	r31, 0xFF	; 255
    2bae:	80 81       	ld	r24, Z
    2bb0:	88 23       	and	r24, r24
    2bb2:	19 f4       	brne	.+6      	; 0x2bba <main+0x65c>
		    	 USART_voidWriteData('-');
    2bb4:	8d e2       	ldi	r24, 0x2D	; 45
    2bb6:	0e 94 83 12 	call	0x2506	; 0x2506 <USART_voidWriteData>


		     for (u8 Index=0; Index<4;Index++)
    2bba:	fe 01       	movw	r30, r28
    2bbc:	ef 54       	subi	r30, 0x4F	; 79
    2bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc0:	10 82       	st	Z, r1
    2bc2:	26 c0       	rjmp	.+76     	; 0x2c10 <main+0x6b2>
		     {
		    	 u8 Read=USART_u8ReadData();
    2bc4:	0e 94 9d 12 	call	0x253a	; 0x253a <USART_u8ReadData>
    2bc8:	fe 01       	movw	r30, r28
    2bca:	e0 55       	subi	r30, 0x50	; 80
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 83       	st	Z, r24
		    	 APP_voidUser_Reciever(Read);
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e0 55       	subi	r30, 0x50	; 80
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <APP_voidUser_Reciever>
		    	 Local_ArrUserIN[Index]=Read;
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ef 54       	subi	r30, 0x4F	; 79
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 81       	ld	r24, Z
    2be4:	28 2f       	mov	r18, r24
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	ce 01       	movw	r24, r28
    2bea:	80 54       	subi	r24, 0x40	; 64
    2bec:	9f 4f       	sbci	r25, 0xFF	; 255
    2bee:	dc 01       	movw	r26, r24
    2bf0:	a2 0f       	add	r26, r18
    2bf2:	b3 1f       	adc	r27, r19
    2bf4:	fe 01       	movw	r30, r28
    2bf6:	e0 55       	subi	r30, 0x50	; 80
    2bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfa:	80 81       	ld	r24, Z
    2bfc:	8c 93       	st	X, r24

		     if (flag==0)
		    	 USART_voidWriteData('-');


		     for (u8 Index=0; Index<4;Index++)
    2bfe:	de 01       	movw	r26, r28
    2c00:	af 54       	subi	r26, 0x4F	; 79
    2c02:	bf 4f       	sbci	r27, 0xFF	; 255
    2c04:	fe 01       	movw	r30, r28
    2c06:	ef 54       	subi	r30, 0x4F	; 79
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	8f 5f       	subi	r24, 0xFF	; 255
    2c0e:	8c 93       	st	X, r24
    2c10:	fe 01       	movw	r30, r28
    2c12:	ef 54       	subi	r30, 0x4F	; 79
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	80 81       	ld	r24, Z
    2c18:	84 30       	cpi	r24, 0x04	; 4
    2c1a:	a0 f2       	brcs	.-88     	; 0x2bc4 <main+0x666>
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e3 59       	subi	r30, 0x93	; 147
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	aa e7       	ldi	r26, 0x7A	; 122
    2c28:	b4 e4       	ldi	r27, 0x44	; 68
    2c2a:	80 83       	st	Z, r24
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	a2 83       	std	Z+2, r26	; 0x02
    2c30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c32:	8e 01       	movw	r16, r28
    2c34:	07 59       	subi	r16, 0x97	; 151
    2c36:	1f 4f       	sbci	r17, 0xFF	; 255
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e3 59       	subi	r30, 0x93	; 147
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	60 81       	ld	r22, Z
    2c40:	71 81       	ldd	r23, Z+1	; 0x01
    2c42:	82 81       	ldd	r24, Z+2	; 0x02
    2c44:	93 81       	ldd	r25, Z+3	; 0x03
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	4a e7       	ldi	r20, 0x7A	; 122
    2c4c:	53 e4       	ldi	r21, 0x43	; 67
    2c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	f8 01       	movw	r30, r16
    2c58:	80 83       	st	Z, r24
    2c5a:	91 83       	std	Z+1, r25	; 0x01
    2c5c:	a2 83       	std	Z+2, r26	; 0x02
    2c5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c60:	fe 01       	movw	r30, r28
    2c62:	e7 59       	subi	r30, 0x97	; 151
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	44 f4       	brge	.+16     	; 0x2c8e <main+0x730>
		__ticks = 1;
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e9 59       	subi	r30, 0x99	; 153
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	81 e0       	ldi	r24, 0x01	; 1
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	91 83       	std	Z+1, r25	; 0x01
    2c8a:	80 83       	st	Z, r24
    2c8c:	64 c0       	rjmp	.+200    	; 0x2d56 <main+0x7f8>
	else if (__tmp > 65535)
    2c8e:	fe 01       	movw	r30, r28
    2c90:	e7 59       	subi	r30, 0x97	; 151
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	60 81       	ld	r22, Z
    2c96:	71 81       	ldd	r23, Z+1	; 0x01
    2c98:	82 81       	ldd	r24, Z+2	; 0x02
    2c9a:	93 81       	ldd	r25, Z+3	; 0x03
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ca0:	4f e7       	ldi	r20, 0x7F	; 127
    2ca2:	57 e4       	ldi	r21, 0x47	; 71
    2ca4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ca8:	18 16       	cp	r1, r24
    2caa:	0c f0       	brlt	.+2      	; 0x2cae <main+0x750>
    2cac:	43 c0       	rjmp	.+134    	; 0x2d34 <main+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cae:	fe 01       	movw	r30, r28
    2cb0:	e3 59       	subi	r30, 0x93	; 147
    2cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb4:	60 81       	ld	r22, Z
    2cb6:	71 81       	ldd	r23, Z+1	; 0x01
    2cb8:	82 81       	ldd	r24, Z+2	; 0x02
    2cba:	93 81       	ldd	r25, Z+3	; 0x03
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e2       	ldi	r20, 0x20	; 32
    2cc2:	51 e4       	ldi	r21, 0x41	; 65
    2cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	8e 01       	movw	r16, r28
    2cce:	09 59       	subi	r16, 0x99	; 153
    2cd0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd2:	bc 01       	movw	r22, r24
    2cd4:	cd 01       	movw	r24, r26
    2cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cda:	dc 01       	movw	r26, r24
    2cdc:	cb 01       	movw	r24, r22
    2cde:	f8 01       	movw	r30, r16
    2ce0:	91 83       	std	Z+1, r25	; 0x01
    2ce2:	80 83       	st	Z, r24
    2ce4:	1f c0       	rjmp	.+62     	; 0x2d24 <main+0x7c6>
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	eb 59       	subi	r30, 0x9B	; 155
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	89 e1       	ldi	r24, 0x19	; 25
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	eb 59       	subi	r30, 0x9B	; 155
    2cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfa:	80 81       	ld	r24, Z
    2cfc:	91 81       	ldd	r25, Z+1	; 0x01
    2cfe:	01 97       	sbiw	r24, 0x01	; 1
    2d00:	f1 f7       	brne	.-4      	; 0x2cfe <main+0x7a0>
    2d02:	fe 01       	movw	r30, r28
    2d04:	eb 59       	subi	r30, 0x9B	; 155
    2d06:	ff 4f       	sbci	r31, 0xFF	; 255
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0c:	de 01       	movw	r26, r28
    2d0e:	a9 59       	subi	r26, 0x99	; 153
    2d10:	bf 4f       	sbci	r27, 0xFF	; 255
    2d12:	fe 01       	movw	r30, r28
    2d14:	e9 59       	subi	r30, 0x99	; 153
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	80 81       	ld	r24, Z
    2d1a:	91 81       	ldd	r25, Z+1	; 0x01
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	11 96       	adiw	r26, 0x01	; 1
    2d20:	9c 93       	st	X, r25
    2d22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d24:	fe 01       	movw	r30, r28
    2d26:	e9 59       	subi	r30, 0x99	; 153
    2d28:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2a:	80 81       	ld	r24, Z
    2d2c:	91 81       	ldd	r25, Z+1	; 0x01
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	d1 f6       	brne	.-76     	; 0x2ce6 <main+0x788>
    2d32:	27 c0       	rjmp	.+78     	; 0x2d82 <main+0x824>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	8e 01       	movw	r16, r28
    2d36:	09 59       	subi	r16, 0x99	; 153
    2d38:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3a:	fe 01       	movw	r30, r28
    2d3c:	e7 59       	subi	r30, 0x97	; 151
    2d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d40:	60 81       	ld	r22, Z
    2d42:	71 81       	ldd	r23, Z+1	; 0x01
    2d44:	82 81       	ldd	r24, Z+2	; 0x02
    2d46:	93 81       	ldd	r25, Z+3	; 0x03
    2d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	f8 01       	movw	r30, r16
    2d52:	91 83       	std	Z+1, r25	; 0x01
    2d54:	80 83       	st	Z, r24
    2d56:	de 01       	movw	r26, r28
    2d58:	ad 59       	subi	r26, 0x9D	; 157
    2d5a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	e9 59       	subi	r30, 0x99	; 153
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	80 81       	ld	r24, Z
    2d64:	91 81       	ldd	r25, Z+1	; 0x01
    2d66:	8d 93       	st	X+, r24
    2d68:	9c 93       	st	X, r25
    2d6a:	fe 01       	movw	r30, r28
    2d6c:	ed 59       	subi	r30, 0x9D	; 157
    2d6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d70:	80 81       	ld	r24, Z
    2d72:	91 81       	ldd	r25, Z+1	; 0x01
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <main+0x816>
    2d78:	fe 01       	movw	r30, r28
    2d7a:	ed 59       	subi	r30, 0x9D	; 157
    2d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7e:	91 83       	std	Z+1, r25	; 0x01
    2d80:	80 83       	st	Z, r24
		    	 APP_voidUser_Reciever(Read);
		    	 Local_ArrUserIN[Index]=Read;
		     }
		     _delay_ms(1000);

		     LCD_voidSendCommand(1);
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
		     LCD_voidWriteString("Enter Password:");
    2d88:	86 e8       	ldi	r24, 0x86	; 134
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>

		     for (u8 Index=0; Index<4;Index++)
    2d90:	fe 01       	movw	r30, r28
    2d92:	e1 55       	subi	r30, 0x51	; 81
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	10 82       	st	Z, r1
    2d98:	26 c0       	rjmp	.+76     	; 0x2de6 <main+0x888>
		     {
		    	 u8 Read=USART_u8ReadData();
    2d9a:	0e 94 9d 12 	call	0x253a	; 0x253a <USART_u8ReadData>
    2d9e:	fe 01       	movw	r30, r28
    2da0:	e2 55       	subi	r30, 0x52	; 82
    2da2:	ff 4f       	sbci	r31, 0xFF	; 255
    2da4:	80 83       	st	Z, r24
		    	 APP_voidPass_Reciever(Read);
    2da6:	fe 01       	movw	r30, r28
    2da8:	e2 55       	subi	r30, 0x52	; 82
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	0e 94 01 08 	call	0x1002	; 0x1002 <APP_voidPass_Reciever>
		    	 Local_ArrPassIN[Index]=Read;
    2db2:	fe 01       	movw	r30, r28
    2db4:	e1 55       	subi	r30, 0x51	; 81
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	80 81       	ld	r24, Z
    2dba:	28 2f       	mov	r18, r24
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	8b 53       	subi	r24, 0x3B	; 59
    2dc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	a2 0f       	add	r26, r18
    2dc8:	b3 1f       	adc	r27, r19
    2dca:	fe 01       	movw	r30, r28
    2dcc:	e2 55       	subi	r30, 0x52	; 82
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	80 81       	ld	r24, Z
    2dd2:	8c 93       	st	X, r24
		     _delay_ms(1000);

		     LCD_voidSendCommand(1);
		     LCD_voidWriteString("Enter Password:");

		     for (u8 Index=0; Index<4;Index++)
    2dd4:	de 01       	movw	r26, r28
    2dd6:	a1 55       	subi	r26, 0x51	; 81
    2dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    2dda:	fe 01       	movw	r30, r28
    2ddc:	e1 55       	subi	r30, 0x51	; 81
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	80 81       	ld	r24, Z
    2de2:	8f 5f       	subi	r24, 0xFF	; 255
    2de4:	8c 93       	st	X, r24
    2de6:	fe 01       	movw	r30, r28
    2de8:	e1 55       	subi	r30, 0x51	; 81
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	80 81       	ld	r24, Z
    2dee:	84 30       	cpi	r24, 0x04	; 4
    2df0:	a0 f2       	brcs	.-88     	; 0x2d9a <main+0x83c>
    2df2:	fe 01       	movw	r30, r28
    2df4:	e1 5a       	subi	r30, 0xA1	; 161
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	aa e7       	ldi	r26, 0x7A	; 122
    2dfe:	b4 e4       	ldi	r27, 0x44	; 68
    2e00:	80 83       	st	Z, r24
    2e02:	91 83       	std	Z+1, r25	; 0x01
    2e04:	a2 83       	std	Z+2, r26	; 0x02
    2e06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e08:	8e 01       	movw	r16, r28
    2e0a:	05 5a       	subi	r16, 0xA5	; 165
    2e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0e:	fe 01       	movw	r30, r28
    2e10:	e1 5a       	subi	r30, 0xA1	; 161
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	20 e0       	ldi	r18, 0x00	; 0
    2e1e:	30 e0       	ldi	r19, 0x00	; 0
    2e20:	4a e7       	ldi	r20, 0x7A	; 122
    2e22:	53 e4       	ldi	r21, 0x43	; 67
    2e24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e28:	dc 01       	movw	r26, r24
    2e2a:	cb 01       	movw	r24, r22
    2e2c:	f8 01       	movw	r30, r16
    2e2e:	80 83       	st	Z, r24
    2e30:	91 83       	std	Z+1, r25	; 0x01
    2e32:	a2 83       	std	Z+2, r26	; 0x02
    2e34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e36:	fe 01       	movw	r30, r28
    2e38:	e5 5a       	subi	r30, 0xA5	; 165
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	60 81       	ld	r22, Z
    2e3e:	71 81       	ldd	r23, Z+1	; 0x01
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	40 e8       	ldi	r20, 0x80	; 128
    2e4a:	5f e3       	ldi	r21, 0x3F	; 63
    2e4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e50:	88 23       	and	r24, r24
    2e52:	44 f4       	brge	.+16     	; 0x2e64 <main+0x906>
		__ticks = 1;
    2e54:	fe 01       	movw	r30, r28
    2e56:	e7 5a       	subi	r30, 0xA7	; 167
    2e58:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
    2e62:	64 c0       	rjmp	.+200    	; 0x2f2c <main+0x9ce>
	else if (__tmp > 65535)
    2e64:	fe 01       	movw	r30, r28
    2e66:	e5 5a       	subi	r30, 0xA5	; 165
    2e68:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6a:	60 81       	ld	r22, Z
    2e6c:	71 81       	ldd	r23, Z+1	; 0x01
    2e6e:	82 81       	ldd	r24, Z+2	; 0x02
    2e70:	93 81       	ldd	r25, Z+3	; 0x03
    2e72:	20 e0       	ldi	r18, 0x00	; 0
    2e74:	3f ef       	ldi	r19, 0xFF	; 255
    2e76:	4f e7       	ldi	r20, 0x7F	; 127
    2e78:	57 e4       	ldi	r21, 0x47	; 71
    2e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e7e:	18 16       	cp	r1, r24
    2e80:	0c f0       	brlt	.+2      	; 0x2e84 <main+0x926>
    2e82:	43 c0       	rjmp	.+134    	; 0x2f0a <main+0x9ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e84:	fe 01       	movw	r30, r28
    2e86:	e1 5a       	subi	r30, 0xA1	; 161
    2e88:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e2       	ldi	r20, 0x20	; 32
    2e98:	51 e4       	ldi	r21, 0x41	; 65
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	8e 01       	movw	r16, r28
    2ea4:	07 5a       	subi	r16, 0xA7	; 167
    2ea6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea8:	bc 01       	movw	r22, r24
    2eaa:	cd 01       	movw	r24, r26
    2eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb0:	dc 01       	movw	r26, r24
    2eb2:	cb 01       	movw	r24, r22
    2eb4:	f8 01       	movw	r30, r16
    2eb6:	91 83       	std	Z+1, r25	; 0x01
    2eb8:	80 83       	st	Z, r24
    2eba:	1f c0       	rjmp	.+62     	; 0x2efa <main+0x99c>
    2ebc:	fe 01       	movw	r30, r28
    2ebe:	e9 5a       	subi	r30, 0xA9	; 169
    2ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec2:	89 e1       	ldi	r24, 0x19	; 25
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	91 83       	std	Z+1, r25	; 0x01
    2ec8:	80 83       	st	Z, r24
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e9 5a       	subi	r30, 0xA9	; 169
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	80 81       	ld	r24, Z
    2ed2:	91 81       	ldd	r25, Z+1	; 0x01
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <main+0x976>
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e9 5a       	subi	r30, 0xA9	; 169
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	91 83       	std	Z+1, r25	; 0x01
    2ee0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee2:	de 01       	movw	r26, r28
    2ee4:	a7 5a       	subi	r26, 0xA7	; 167
    2ee6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee8:	fe 01       	movw	r30, r28
    2eea:	e7 5a       	subi	r30, 0xA7	; 167
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	80 81       	ld	r24, Z
    2ef0:	91 81       	ldd	r25, Z+1	; 0x01
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	11 96       	adiw	r26, 0x01	; 1
    2ef6:	9c 93       	st	X, r25
    2ef8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	fe 01       	movw	r30, r28
    2efc:	e7 5a       	subi	r30, 0xA7	; 167
    2efe:	ff 4f       	sbci	r31, 0xFF	; 255
    2f00:	80 81       	ld	r24, Z
    2f02:	91 81       	ldd	r25, Z+1	; 0x01
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	d1 f6       	brne	.-76     	; 0x2ebc <main+0x95e>
    2f08:	27 c0       	rjmp	.+78     	; 0x2f58 <main+0x9fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0a:	8e 01       	movw	r16, r28
    2f0c:	07 5a       	subi	r16, 0xA7	; 167
    2f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f10:	fe 01       	movw	r30, r28
    2f12:	e5 5a       	subi	r30, 0xA5	; 165
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	60 81       	ld	r22, Z
    2f18:	71 81       	ldd	r23, Z+1	; 0x01
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	93 81       	ldd	r25, Z+3	; 0x03
    2f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f22:	dc 01       	movw	r26, r24
    2f24:	cb 01       	movw	r24, r22
    2f26:	f8 01       	movw	r30, r16
    2f28:	91 83       	std	Z+1, r25	; 0x01
    2f2a:	80 83       	st	Z, r24
    2f2c:	de 01       	movw	r26, r28
    2f2e:	ab 5a       	subi	r26, 0xAB	; 171
    2f30:	bf 4f       	sbci	r27, 0xFF	; 255
    2f32:	fe 01       	movw	r30, r28
    2f34:	e7 5a       	subi	r30, 0xA7	; 167
    2f36:	ff 4f       	sbci	r31, 0xFF	; 255
    2f38:	80 81       	ld	r24, Z
    2f3a:	91 81       	ldd	r25, Z+1	; 0x01
    2f3c:	8d 93       	st	X+, r24
    2f3e:	9c 93       	st	X, r25
    2f40:	fe 01       	movw	r30, r28
    2f42:	eb 5a       	subi	r30, 0xAB	; 171
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	f1 f7       	brne	.-4      	; 0x2f4a <main+0x9ec>
    2f4e:	fe 01       	movw	r30, r28
    2f50:	eb 5a       	subi	r30, 0xAB	; 171
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	91 83       	std	Z+1, r25	; 0x01
    2f56:	80 83       	st	Z, r24
		    	 APP_voidPass_Reciever(Read);
		    	 Local_ArrPassIN[Index]=Read;
		     }
		     _delay_ms(1000);

		     if (!APP_u8UserCheck(Local_ArrPassIN,Local_ArrPass)
    2f58:	ce 01       	movw	r24, r28
    2f5a:	8b 53       	subi	r24, 0x3B	; 59
    2f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5e:	9e 01       	movw	r18, r28
    2f60:	25 54       	subi	r18, 0x45	; 69
    2f62:	3f 4f       	sbci	r19, 0xFF	; 255
    2f64:	b9 01       	movw	r22, r18
    2f66:	0e 94 a2 08 	call	0x1144	; 0x1144 <APP_u8UserCheck>
    2f6a:	88 23       	and	r24, r24
    2f6c:	61 f0       	breq	.+24     	; 0x2f86 <main+0xa28>
    2f6e:	ce 01       	movw	r24, r28
    2f70:	80 54       	subi	r24, 0x40	; 64
    2f72:	9f 4f       	sbci	r25, 0xFF	; 255
    2f74:	9e 01       	movw	r18, r28
    2f76:	2a 54       	subi	r18, 0x4A	; 74
    2f78:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7a:	b9 01       	movw	r22, r18
    2f7c:	0e 94 a2 08 	call	0x1144	; 0x1144 <APP_u8UserCheck>
    2f80:	88 23       	and	r24, r24
    2f82:	09 f0       	breq	.+2      	; 0x2f86 <main+0xa28>
    2f84:	ff c1       	rjmp	.+1022   	; 0x3384 <main+0xe26>
		    		 || !APP_u8UserCheck(Local_ArrUserIN,Local_ArrUser))
		     {
		    	 if (flag==2)              //three
    2f86:	fe 01       	movw	r30, r28
    2f88:	ed 54       	subi	r30, 0x4D	; 77
    2f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8c:	80 81       	ld	r24, Z
    2f8e:	82 30       	cpi	r24, 0x02	; 2
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <main+0xa36>
    2f92:	51 c1       	rjmp	.+674    	; 0x3236 <main+0xcd8>
		    	 {
		    		 USART_voidWriteData('T');
    2f94:	84 e5       	ldi	r24, 0x54	; 84
    2f96:	0e 94 83 12 	call	0x2506	; 0x2506 <USART_voidWriteData>
		    		 LCD_voidSendCommand(1);
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
		    		 LCD_voidWriteString("System Locked");
    2fa0:	86 e9       	ldi	r24, 0x96	; 150
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
    2fa8:	fe 01       	movw	r30, r28
    2faa:	ef 5a       	subi	r30, 0xAF	; 175
    2fac:	ff 4f       	sbci	r31, 0xFF	; 255
    2fae:	80 e0       	ldi	r24, 0x00	; 0
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	aa e7       	ldi	r26, 0x7A	; 122
    2fb4:	b3 e4       	ldi	r27, 0x43	; 67
    2fb6:	80 83       	st	Z, r24
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	a2 83       	std	Z+2, r26	; 0x02
    2fbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbe:	8e 01       	movw	r16, r28
    2fc0:	03 5b       	subi	r16, 0xB3	; 179
    2fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc4:	fe 01       	movw	r30, r28
    2fc6:	ef 5a       	subi	r30, 0xAF	; 175
    2fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fca:	60 81       	ld	r22, Z
    2fcc:	71 81       	ldd	r23, Z+1	; 0x01
    2fce:	82 81       	ldd	r24, Z+2	; 0x02
    2fd0:	93 81       	ldd	r25, Z+3	; 0x03
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	4a e7       	ldi	r20, 0x7A	; 122
    2fd8:	53 e4       	ldi	r21, 0x43	; 67
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	f8 01       	movw	r30, r16
    2fe4:	80 83       	st	Z, r24
    2fe6:	91 83       	std	Z+1, r25	; 0x01
    2fe8:	a2 83       	std	Z+2, r26	; 0x02
    2fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2fec:	fe 01       	movw	r30, r28
    2fee:	e3 5b       	subi	r30, 0xB3	; 179
    2ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff2:	60 81       	ld	r22, Z
    2ff4:	71 81       	ldd	r23, Z+1	; 0x01
    2ff6:	82 81       	ldd	r24, Z+2	; 0x02
    2ff8:	93 81       	ldd	r25, Z+3	; 0x03
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e8       	ldi	r20, 0x80	; 128
    3000:	5f e3       	ldi	r21, 0x3F	; 63
    3002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3006:	88 23       	and	r24, r24
    3008:	44 f4       	brge	.+16     	; 0x301a <main+0xabc>
		__ticks = 1;
    300a:	fe 01       	movw	r30, r28
    300c:	e5 5b       	subi	r30, 0xB5	; 181
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	91 83       	std	Z+1, r25	; 0x01
    3016:	80 83       	st	Z, r24
    3018:	64 c0       	rjmp	.+200    	; 0x30e2 <main+0xb84>
	else if (__tmp > 65535)
    301a:	fe 01       	movw	r30, r28
    301c:	e3 5b       	subi	r30, 0xB3	; 179
    301e:	ff 4f       	sbci	r31, 0xFF	; 255
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	82 81       	ldd	r24, Z+2	; 0x02
    3026:	93 81       	ldd	r25, Z+3	; 0x03
    3028:	20 e0       	ldi	r18, 0x00	; 0
    302a:	3f ef       	ldi	r19, 0xFF	; 255
    302c:	4f e7       	ldi	r20, 0x7F	; 127
    302e:	57 e4       	ldi	r21, 0x47	; 71
    3030:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3034:	18 16       	cp	r1, r24
    3036:	0c f0       	brlt	.+2      	; 0x303a <main+0xadc>
    3038:	43 c0       	rjmp	.+134    	; 0x30c0 <main+0xb62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303a:	fe 01       	movw	r30, r28
    303c:	ef 5a       	subi	r30, 0xAF	; 175
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	60 81       	ld	r22, Z
    3042:	71 81       	ldd	r23, Z+1	; 0x01
    3044:	82 81       	ldd	r24, Z+2	; 0x02
    3046:	93 81       	ldd	r25, Z+3	; 0x03
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	40 e2       	ldi	r20, 0x20	; 32
    304e:	51 e4       	ldi	r21, 0x41	; 65
    3050:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3054:	dc 01       	movw	r26, r24
    3056:	cb 01       	movw	r24, r22
    3058:	8e 01       	movw	r16, r28
    305a:	05 5b       	subi	r16, 0xB5	; 181
    305c:	1f 4f       	sbci	r17, 0xFF	; 255
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	f8 01       	movw	r30, r16
    306c:	91 83       	std	Z+1, r25	; 0x01
    306e:	80 83       	st	Z, r24
    3070:	1f c0       	rjmp	.+62     	; 0x30b0 <main+0xb52>
    3072:	fe 01       	movw	r30, r28
    3074:	e7 5b       	subi	r30, 0xB7	; 183
    3076:	ff 4f       	sbci	r31, 0xFF	; 255
    3078:	89 e1       	ldi	r24, 0x19	; 25
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	91 83       	std	Z+1, r25	; 0x01
    307e:	80 83       	st	Z, r24
    3080:	fe 01       	movw	r30, r28
    3082:	e7 5b       	subi	r30, 0xB7	; 183
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	80 81       	ld	r24, Z
    3088:	91 81       	ldd	r25, Z+1	; 0x01
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <main+0xb2c>
    308e:	fe 01       	movw	r30, r28
    3090:	e7 5b       	subi	r30, 0xB7	; 183
    3092:	ff 4f       	sbci	r31, 0xFF	; 255
    3094:	91 83       	std	Z+1, r25	; 0x01
    3096:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3098:	de 01       	movw	r26, r28
    309a:	a5 5b       	subi	r26, 0xB5	; 181
    309c:	bf 4f       	sbci	r27, 0xFF	; 255
    309e:	fe 01       	movw	r30, r28
    30a0:	e5 5b       	subi	r30, 0xB5	; 181
    30a2:	ff 4f       	sbci	r31, 0xFF	; 255
    30a4:	80 81       	ld	r24, Z
    30a6:	91 81       	ldd	r25, Z+1	; 0x01
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	11 96       	adiw	r26, 0x01	; 1
    30ac:	9c 93       	st	X, r25
    30ae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30b0:	fe 01       	movw	r30, r28
    30b2:	e5 5b       	subi	r30, 0xB5	; 181
    30b4:	ff 4f       	sbci	r31, 0xFF	; 255
    30b6:	80 81       	ld	r24, Z
    30b8:	91 81       	ldd	r25, Z+1	; 0x01
    30ba:	00 97       	sbiw	r24, 0x00	; 0
    30bc:	d1 f6       	brne	.-76     	; 0x3072 <main+0xb14>
    30be:	27 c0       	rjmp	.+78     	; 0x310e <main+0xbb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30c0:	8e 01       	movw	r16, r28
    30c2:	05 5b       	subi	r16, 0xB5	; 181
    30c4:	1f 4f       	sbci	r17, 0xFF	; 255
    30c6:	fe 01       	movw	r30, r28
    30c8:	e3 5b       	subi	r30, 0xB3	; 179
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	60 81       	ld	r22, Z
    30ce:	71 81       	ldd	r23, Z+1	; 0x01
    30d0:	82 81       	ldd	r24, Z+2	; 0x02
    30d2:	93 81       	ldd	r25, Z+3	; 0x03
    30d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	f8 01       	movw	r30, r16
    30de:	91 83       	std	Z+1, r25	; 0x01
    30e0:	80 83       	st	Z, r24
    30e2:	de 01       	movw	r26, r28
    30e4:	a9 5b       	subi	r26, 0xB9	; 185
    30e6:	bf 4f       	sbci	r27, 0xFF	; 255
    30e8:	fe 01       	movw	r30, r28
    30ea:	e5 5b       	subi	r30, 0xB5	; 181
    30ec:	ff 4f       	sbci	r31, 0xFF	; 255
    30ee:	80 81       	ld	r24, Z
    30f0:	91 81       	ldd	r25, Z+1	; 0x01
    30f2:	8d 93       	st	X+, r24
    30f4:	9c 93       	st	X, r25
    30f6:	fe 01       	movw	r30, r28
    30f8:	e9 5b       	subi	r30, 0xB9	; 185
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	80 81       	ld	r24, Z
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	01 97       	sbiw	r24, 0x01	; 1
    3102:	f1 f7       	brne	.-4      	; 0x3100 <main+0xba2>
    3104:	fe 01       	movw	r30, r28
    3106:	e9 5b       	subi	r30, 0xB9	; 185
    3108:	ff 4f       	sbci	r31, 0xFF	; 255
    310a:	91 83       	std	Z+1, r25	; 0x01
    310c:	80 83       	st	Z, r24
		    		 _delay_ms(250);
		    		 USART_voidWriteData('.');
    310e:	8e e2       	ldi	r24, 0x2E	; 46
    3110:	0e 94 83 12 	call	0x2506	; 0x2506 <USART_voidWriteData>
		    		 LCD_voidSendCommand(1);
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
		    		 flag=0;
    311a:	fe 01       	movw	r30, r28
    311c:	ed 54       	subi	r30, 0x4D	; 77
    311e:	ff 4f       	sbci	r31, 0xFF	; 255
    3120:	10 82       	st	Z, r1
		    		 Flag2=0;
    3122:	fe 01       	movw	r30, r28
    3124:	ee 54       	subi	r30, 0x4E	; 78
    3126:	ff 4f       	sbci	r31, 0xFF	; 255
    3128:	10 82       	st	Z, r1
    312a:	fe 01       	movw	r30, r28
    312c:	ed 5b       	subi	r30, 0xBD	; 189
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	aa e7       	ldi	r26, 0x7A	; 122
    3136:	b4 e4       	ldi	r27, 0x44	; 68
    3138:	80 83       	st	Z, r24
    313a:	91 83       	std	Z+1, r25	; 0x01
    313c:	a2 83       	std	Z+2, r26	; 0x02
    313e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3140:	8e 01       	movw	r16, r28
    3142:	01 5c       	subi	r16, 0xC1	; 193
    3144:	1f 4f       	sbci	r17, 0xFF	; 255
    3146:	fe 01       	movw	r30, r28
    3148:	ed 5b       	subi	r30, 0xBD	; 189
    314a:	ff 4f       	sbci	r31, 0xFF	; 255
    314c:	60 81       	ld	r22, Z
    314e:	71 81       	ldd	r23, Z+1	; 0x01
    3150:	82 81       	ldd	r24, Z+2	; 0x02
    3152:	93 81       	ldd	r25, Z+3	; 0x03
    3154:	20 e0       	ldi	r18, 0x00	; 0
    3156:	30 e0       	ldi	r19, 0x00	; 0
    3158:	4a e7       	ldi	r20, 0x7A	; 122
    315a:	53 e4       	ldi	r21, 0x43	; 67
    315c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	f8 01       	movw	r30, r16
    3166:	80 83       	st	Z, r24
    3168:	91 83       	std	Z+1, r25	; 0x01
    316a:	a2 83       	std	Z+2, r26	; 0x02
    316c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    316e:	fe 01       	movw	r30, r28
    3170:	ff 96       	adiw	r30, 0x3f	; 63
    3172:	60 81       	ld	r22, Z
    3174:	71 81       	ldd	r23, Z+1	; 0x01
    3176:	82 81       	ldd	r24, Z+2	; 0x02
    3178:	93 81       	ldd	r25, Z+3	; 0x03
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	2c f4       	brge	.+10     	; 0x3194 <main+0xc36>
		__ticks = 1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9e af       	std	Y+62, r25	; 0x3e
    3190:	8d af       	std	Y+61, r24	; 0x3d
    3192:	46 c0       	rjmp	.+140    	; 0x3220 <main+0xcc2>
	else if (__tmp > 65535)
    3194:	fe 01       	movw	r30, r28
    3196:	ff 96       	adiw	r30, 0x3f	; 63
    3198:	60 81       	ld	r22, Z
    319a:	71 81       	ldd	r23, Z+1	; 0x01
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	93 81       	ldd	r25, Z+3	; 0x03
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	3f ef       	ldi	r19, 0xFF	; 255
    31a4:	4f e7       	ldi	r20, 0x7F	; 127
    31a6:	57 e4       	ldi	r21, 0x47	; 71
    31a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31ac:	18 16       	cp	r1, r24
    31ae:	64 f5       	brge	.+88     	; 0x3208 <main+0xcaa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b0:	fe 01       	movw	r30, r28
    31b2:	ed 5b       	subi	r30, 0xBD	; 189
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	60 81       	ld	r22, Z
    31b8:	71 81       	ldd	r23, Z+1	; 0x01
    31ba:	82 81       	ldd	r24, Z+2	; 0x02
    31bc:	93 81       	ldd	r25, Z+3	; 0x03
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9e af       	std	Y+62, r25	; 0x3e
    31dc:	8d af       	std	Y+61, r24	; 0x3d
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <main+0xca0>
    31e0:	89 e1       	ldi	r24, 0x19	; 25
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9c af       	std	Y+60, r25	; 0x3c
    31e6:	8b af       	std	Y+59, r24	; 0x3b
    31e8:	8b ad       	ldd	r24, Y+59	; 0x3b
    31ea:	9c ad       	ldd	r25, Y+60	; 0x3c
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <main+0xc8e>
    31f0:	9c af       	std	Y+60, r25	; 0x3c
    31f2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    31f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9e af       	std	Y+62, r25	; 0x3e
    31fc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    3200:	9e ad       	ldd	r25, Y+62	; 0x3e
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <main+0xc82>
    3206:	c9 c0       	rjmp	.+402    	; 0x339a <main+0xe3c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	fe 01       	movw	r30, r28
    320a:	ff 96       	adiw	r30, 0x3f	; 63
    320c:	60 81       	ld	r22, Z
    320e:	71 81       	ldd	r23, Z+1	; 0x01
    3210:	82 81       	ldd	r24, Z+2	; 0x02
    3212:	93 81       	ldd	r25, Z+3	; 0x03
    3214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3218:	dc 01       	movw	r26, r24
    321a:	cb 01       	movw	r24, r22
    321c:	9e af       	std	Y+62, r25	; 0x3e
    321e:	8d af       	std	Y+61, r24	; 0x3d
    3220:	8d ad       	ldd	r24, Y+61	; 0x3d
    3222:	9e ad       	ldd	r25, Y+62	; 0x3e
    3224:	9a af       	std	Y+58, r25	; 0x3a
    3226:	89 af       	std	Y+57, r24	; 0x39
    3228:	89 ad       	ldd	r24, Y+57	; 0x39
    322a:	9a ad       	ldd	r25, Y+58	; 0x3a
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <main+0xcce>
    3230:	9a af       	std	Y+58, r25	; 0x3a
    3232:	89 af       	std	Y+57, r24	; 0x39
    3234:	b2 c0       	rjmp	.+356    	; 0x339a <main+0xe3c>
		    		 _delay_ms(1000);
		    		 break;
		    	 }
		    	 else
		    	 {
		    		 LCD_voidSendCommand(1);
    3236:	81 e0       	ldi	r24, 0x01	; 1
    3238:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
		    		 LCD_voidWriteString("Wrong Data");
    323c:	84 ea       	ldi	r24, 0xA4	; 164
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
		    		 LCD_voidGoToXY(0,1);
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	61 e0       	ldi	r22, 0x01	; 1
    3248:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
		    		 LCD_voidWriteString("Try Again");
    324c:	8f ea       	ldi	r24, 0xAF	; 175
    324e:	90 e0       	ldi	r25, 0x00	; 0
    3250:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
		    		 if (flag==0){
    3254:	fe 01       	movw	r30, r28
    3256:	ed 54       	subi	r30, 0x4D	; 77
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	80 81       	ld	r24, Z
    325c:	88 23       	and	r24, r24
    325e:	69 f4       	brne	.+26     	; 0x327a <main+0xd1c>
		    			 USART_voidWriteData('W');flag++;} // one time
    3260:	87 e5       	ldi	r24, 0x57	; 87
    3262:	0e 94 83 12 	call	0x2506	; 0x2506 <USART_voidWriteData>
    3266:	de 01       	movw	r26, r28
    3268:	ad 54       	subi	r26, 0x4D	; 77
    326a:	bf 4f       	sbci	r27, 0xFF	; 255
    326c:	fe 01       	movw	r30, r28
    326e:	ed 54       	subi	r30, 0x4D	; 77
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	80 81       	ld	r24, Z
    3274:	8f 5f       	subi	r24, 0xFF	; 255
    3276:	8c 93       	st	X, r24
    3278:	12 c0       	rjmp	.+36     	; 0x329e <main+0xd40>
		    		 else if (flag==1){USART_voidWriteData('N');flag++;}// two
    327a:	fe 01       	movw	r30, r28
    327c:	ed 54       	subi	r30, 0x4D	; 77
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
    3280:	80 81       	ld	r24, Z
    3282:	81 30       	cpi	r24, 0x01	; 1
    3284:	61 f4       	brne	.+24     	; 0x329e <main+0xd40>
    3286:	8e e4       	ldi	r24, 0x4E	; 78
    3288:	0e 94 83 12 	call	0x2506	; 0x2506 <USART_voidWriteData>
    328c:	de 01       	movw	r26, r28
    328e:	ad 54       	subi	r26, 0x4D	; 77
    3290:	bf 4f       	sbci	r27, 0xFF	; 255
    3292:	fe 01       	movw	r30, r28
    3294:	ed 54       	subi	r30, 0x4D	; 77
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	80 81       	ld	r24, Z
    329a:	8f 5f       	subi	r24, 0xFF	; 255
    329c:	8c 93       	st	X, r24
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	aa e7       	ldi	r26, 0x7A	; 122
    32a4:	b4 e4       	ldi	r27, 0x44	; 68
    32a6:	8d ab       	std	Y+53, r24	; 0x35
    32a8:	9e ab       	std	Y+54, r25	; 0x36
    32aa:	af ab       	std	Y+55, r26	; 0x37
    32ac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ae:	6d a9       	ldd	r22, Y+53	; 0x35
    32b0:	7e a9       	ldd	r23, Y+54	; 0x36
    32b2:	8f a9       	ldd	r24, Y+55	; 0x37
    32b4:	98 ad       	ldd	r25, Y+56	; 0x38
    32b6:	20 e0       	ldi	r18, 0x00	; 0
    32b8:	30 e0       	ldi	r19, 0x00	; 0
    32ba:	4a e7       	ldi	r20, 0x7A	; 122
    32bc:	53 e4       	ldi	r21, 0x43	; 67
    32be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c2:	dc 01       	movw	r26, r24
    32c4:	cb 01       	movw	r24, r22
    32c6:	89 ab       	std	Y+49, r24	; 0x31
    32c8:	9a ab       	std	Y+50, r25	; 0x32
    32ca:	ab ab       	std	Y+51, r26	; 0x33
    32cc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    32ce:	69 a9       	ldd	r22, Y+49	; 0x31
    32d0:	7a a9       	ldd	r23, Y+50	; 0x32
    32d2:	8b a9       	ldd	r24, Y+51	; 0x33
    32d4:	9c a9       	ldd	r25, Y+52	; 0x34
    32d6:	20 e0       	ldi	r18, 0x00	; 0
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	40 e8       	ldi	r20, 0x80	; 128
    32dc:	5f e3       	ldi	r21, 0x3F	; 63
    32de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e2:	88 23       	and	r24, r24
    32e4:	2c f4       	brge	.+10     	; 0x32f0 <main+0xd92>
		__ticks = 1;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	98 ab       	std	Y+48, r25	; 0x30
    32ec:	8f a7       	std	Y+47, r24	; 0x2f
    32ee:	3f c0       	rjmp	.+126    	; 0x336e <main+0xe10>
	else if (__tmp > 65535)
    32f0:	69 a9       	ldd	r22, Y+49	; 0x31
    32f2:	7a a9       	ldd	r23, Y+50	; 0x32
    32f4:	8b a9       	ldd	r24, Y+51	; 0x33
    32f6:	9c a9       	ldd	r25, Y+52	; 0x34
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	3f ef       	ldi	r19, 0xFF	; 255
    32fc:	4f e7       	ldi	r20, 0x7F	; 127
    32fe:	57 e4       	ldi	r21, 0x47	; 71
    3300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3304:	18 16       	cp	r1, r24
    3306:	4c f5       	brge	.+82     	; 0x335a <main+0xdfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3308:	6d a9       	ldd	r22, Y+53	; 0x35
    330a:	7e a9       	ldd	r23, Y+54	; 0x36
    330c:	8f a9       	ldd	r24, Y+55	; 0x37
    330e:	98 ad       	ldd	r25, Y+56	; 0x38
    3310:	20 e0       	ldi	r18, 0x00	; 0
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e2       	ldi	r20, 0x20	; 32
    3316:	51 e4       	ldi	r21, 0x41	; 65
    3318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	bc 01       	movw	r22, r24
    3322:	cd 01       	movw	r24, r26
    3324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	98 ab       	std	Y+48, r25	; 0x30
    332e:	8f a7       	std	Y+47, r24	; 0x2f
    3330:	0f c0       	rjmp	.+30     	; 0x3350 <main+0xdf2>
    3332:	89 e1       	ldi	r24, 0x19	; 25
    3334:	90 e0       	ldi	r25, 0x00	; 0
    3336:	9e a7       	std	Y+46, r25	; 0x2e
    3338:	8d a7       	std	Y+45, r24	; 0x2d
    333a:	8d a5       	ldd	r24, Y+45	; 0x2d
    333c:	9e a5       	ldd	r25, Y+46	; 0x2e
    333e:	01 97       	sbiw	r24, 0x01	; 1
    3340:	f1 f7       	brne	.-4      	; 0x333e <main+0xde0>
    3342:	9e a7       	std	Y+46, r25	; 0x2e
    3344:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3346:	8f a5       	ldd	r24, Y+47	; 0x2f
    3348:	98 a9       	ldd	r25, Y+48	; 0x30
    334a:	01 97       	sbiw	r24, 0x01	; 1
    334c:	98 ab       	std	Y+48, r25	; 0x30
    334e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3350:	8f a5       	ldd	r24, Y+47	; 0x2f
    3352:	98 a9       	ldd	r25, Y+48	; 0x30
    3354:	00 97       	sbiw	r24, 0x00	; 0
    3356:	69 f7       	brne	.-38     	; 0x3332 <main+0xdd4>
    3358:	19 c0       	rjmp	.+50     	; 0x338c <main+0xe2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335a:	69 a9       	ldd	r22, Y+49	; 0x31
    335c:	7a a9       	ldd	r23, Y+50	; 0x32
    335e:	8b a9       	ldd	r24, Y+51	; 0x33
    3360:	9c a9       	ldd	r25, Y+52	; 0x34
    3362:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	98 ab       	std	Y+48, r25	; 0x30
    336c:	8f a7       	std	Y+47, r24	; 0x2f
    336e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3370:	98 a9       	ldd	r25, Y+48	; 0x30
    3372:	9c a7       	std	Y+44, r25	; 0x2c
    3374:	8b a7       	std	Y+43, r24	; 0x2b
    3376:	8b a5       	ldd	r24, Y+43	; 0x2b
    3378:	9c a5       	ldd	r25, Y+44	; 0x2c
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	f1 f7       	brne	.-4      	; 0x337a <main+0xe1c>
    337e:	9c a7       	std	Y+44, r25	; 0x2c
    3380:	8b a7       	std	Y+43, r24	; 0x2b
    3382:	04 c0       	rjmp	.+8      	; 0x338c <main+0xe2e>
		    		 _delay_ms(1000);
		    	 }
		     }
		     else
		    	 Local_u8Flag=0;
    3384:	fe 01       	movw	r30, r28
    3386:	ec 54       	subi	r30, 0x4C	; 76
    3388:	ff 4f       	sbci	r31, 0xFF	; 255
    338a:	10 82       	st	Z, r1

		     }while (Local_u8Flag);
    338c:	fe 01       	movw	r30, r28
    338e:	ec 54       	subi	r30, 0x4C	; 76
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	80 81       	ld	r24, Z
    3394:	88 23       	and	r24, r24
    3396:	09 f0       	breq	.+2      	; 0x339a <main+0xe3c>
    3398:	00 cc       	rjmp	.-2048   	; 0x2b9a <main+0x63c>

		     if (Flag2==0)
    339a:	fe 01       	movw	r30, r28
    339c:	ee 54       	subi	r30, 0x4E	; 78
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 81       	ld	r24, Z
    33a2:	88 23       	and	r24, r24
    33a4:	09 f4       	brne	.+2      	; 0x33a8 <main+0xe4a>
    33a6:	bd c9       	rjmp	.-3206   	; 0x2722 <main+0x1c4>
		    	 continue;
		     else
		     {
		    	 USART_voidWriteData('D');
    33a8:	84 e4       	ldi	r24, 0x44	; 68
    33aa:	0e 94 83 12 	call	0x2506	; 0x2506 <USART_voidWriteData>
		    	 LCD_voidSendCommand(1);
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
		    	 LCD_voidWriteString("OPening Door...");
    33b4:	89 eb       	ldi	r24, 0xB9	; 185
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	a8 e4       	ldi	r26, 0x48	; 72
    33c2:	b3 e4       	ldi	r27, 0x43	; 67
    33c4:	8f a3       	std	Y+39, r24	; 0x27
    33c6:	98 a7       	std	Y+40, r25	; 0x28
    33c8:	a9 a7       	std	Y+41, r26	; 0x29
    33ca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33cc:	6f a1       	ldd	r22, Y+39	; 0x27
    33ce:	78 a5       	ldd	r23, Y+40	; 0x28
    33d0:	89 a5       	ldd	r24, Y+41	; 0x29
    33d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    33d4:	20 e0       	ldi	r18, 0x00	; 0
    33d6:	30 e0       	ldi	r19, 0x00	; 0
    33d8:	4a e7       	ldi	r20, 0x7A	; 122
    33da:	53 e4       	ldi	r21, 0x43	; 67
    33dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33e0:	dc 01       	movw	r26, r24
    33e2:	cb 01       	movw	r24, r22
    33e4:	8b a3       	std	Y+35, r24	; 0x23
    33e6:	9c a3       	std	Y+36, r25	; 0x24
    33e8:	ad a3       	std	Y+37, r26	; 0x25
    33ea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    33ec:	6b a1       	ldd	r22, Y+35	; 0x23
    33ee:	7c a1       	ldd	r23, Y+36	; 0x24
    33f0:	8d a1       	ldd	r24, Y+37	; 0x25
    33f2:	9e a1       	ldd	r25, Y+38	; 0x26
    33f4:	20 e0       	ldi	r18, 0x00	; 0
    33f6:	30 e0       	ldi	r19, 0x00	; 0
    33f8:	40 e8       	ldi	r20, 0x80	; 128
    33fa:	5f e3       	ldi	r21, 0x3F	; 63
    33fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3400:	88 23       	and	r24, r24
    3402:	2c f4       	brge	.+10     	; 0x340e <main+0xeb0>
		__ticks = 1;
    3404:	81 e0       	ldi	r24, 0x01	; 1
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	9a a3       	std	Y+34, r25	; 0x22
    340a:	89 a3       	std	Y+33, r24	; 0x21
    340c:	3f c0       	rjmp	.+126    	; 0x348c <main+0xf2e>
	else if (__tmp > 65535)
    340e:	6b a1       	ldd	r22, Y+35	; 0x23
    3410:	7c a1       	ldd	r23, Y+36	; 0x24
    3412:	8d a1       	ldd	r24, Y+37	; 0x25
    3414:	9e a1       	ldd	r25, Y+38	; 0x26
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	3f ef       	ldi	r19, 0xFF	; 255
    341a:	4f e7       	ldi	r20, 0x7F	; 127
    341c:	57 e4       	ldi	r21, 0x47	; 71
    341e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3422:	18 16       	cp	r1, r24
    3424:	4c f5       	brge	.+82     	; 0x3478 <main+0xf1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3426:	6f a1       	ldd	r22, Y+39	; 0x27
    3428:	78 a5       	ldd	r23, Y+40	; 0x28
    342a:	89 a5       	ldd	r24, Y+41	; 0x29
    342c:	9a a5       	ldd	r25, Y+42	; 0x2a
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	30 e0       	ldi	r19, 0x00	; 0
    3432:	40 e2       	ldi	r20, 0x20	; 32
    3434:	51 e4       	ldi	r21, 0x41	; 65
    3436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	9a a3       	std	Y+34, r25	; 0x22
    344c:	89 a3       	std	Y+33, r24	; 0x21
    344e:	0f c0       	rjmp	.+30     	; 0x346e <main+0xf10>
    3450:	89 e1       	ldi	r24, 0x19	; 25
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	98 a3       	std	Y+32, r25	; 0x20
    3456:	8f 8f       	std	Y+31, r24	; 0x1f
    3458:	8f 8d       	ldd	r24, Y+31	; 0x1f
    345a:	98 a1       	ldd	r25, Y+32	; 0x20
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <main+0xefe>
    3460:	98 a3       	std	Y+32, r25	; 0x20
    3462:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3464:	89 a1       	ldd	r24, Y+33	; 0x21
    3466:	9a a1       	ldd	r25, Y+34	; 0x22
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	9a a3       	std	Y+34, r25	; 0x22
    346c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    346e:	89 a1       	ldd	r24, Y+33	; 0x21
    3470:	9a a1       	ldd	r25, Y+34	; 0x22
    3472:	00 97       	sbiw	r24, 0x00	; 0
    3474:	69 f7       	brne	.-38     	; 0x3450 <main+0xef2>
    3476:	14 c0       	rjmp	.+40     	; 0x34a0 <main+0xf42>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3478:	6b a1       	ldd	r22, Y+35	; 0x23
    347a:	7c a1       	ldd	r23, Y+36	; 0x24
    347c:	8d a1       	ldd	r24, Y+37	; 0x25
    347e:	9e a1       	ldd	r25, Y+38	; 0x26
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	9a a3       	std	Y+34, r25	; 0x22
    348a:	89 a3       	std	Y+33, r24	; 0x21
    348c:	89 a1       	ldd	r24, Y+33	; 0x21
    348e:	9a a1       	ldd	r25, Y+34	; 0x22
    3490:	9e 8f       	std	Y+30, r25	; 0x1e
    3492:	8d 8f       	std	Y+29, r24	; 0x1d
    3494:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3496:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <main+0xf3a>
    349c:	9e 8f       	std	Y+30, r25	; 0x1e
    349e:	8d 8f       	std	Y+29, r24	; 0x1d
		    	 _delay_ms(200);
		    	 PWM_voidInitTimer1();
    34a0:	0e 94 08 12 	call	0x2410	; 0x2410 <PWM_voidInitTimer1>
		    	 for (u16 Local_u16Index=751;Local_u16Index<=1250;Local_u16Index++)
    34a4:	fe 01       	movw	r30, r28
    34a6:	e4 55       	subi	r30, 0x54	; 84
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	8f ee       	ldi	r24, 0xEF	; 239
    34ac:	92 e0       	ldi	r25, 0x02	; 2
    34ae:	91 83       	std	Z+1, r25	; 0x01
    34b0:	80 83       	st	Z, r24
    34b2:	85 c0       	rjmp	.+266    	; 0x35be <main+0x1060>
		    	 {
		    		 PWM_voidSetCompareMatchValue(Local_u16Index);
    34b4:	fe 01       	movw	r30, r28
    34b6:	e4 55       	subi	r30, 0x54	; 84
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	80 81       	ld	r24, Z
    34bc:	91 81       	ldd	r25, Z+1	; 0x01
    34be:	0e 94 4d 12 	call	0x249a	; 0x249a <PWM_voidSetCompareMatchValue>
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	a0 e8       	ldi	r26, 0x80	; 128
    34c8:	bf e3       	ldi	r27, 0x3F	; 63
    34ca:	89 8f       	std	Y+25, r24	; 0x19
    34cc:	9a 8f       	std	Y+26, r25	; 0x1a
    34ce:	ab 8f       	std	Y+27, r26	; 0x1b
    34d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d2:	69 8d       	ldd	r22, Y+25	; 0x19
    34d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	4a e7       	ldi	r20, 0x7A	; 122
    34e0:	53 e4       	ldi	r21, 0x43	; 67
    34e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	8d 8b       	std	Y+21, r24	; 0x15
    34ec:	9e 8b       	std	Y+22, r25	; 0x16
    34ee:	af 8b       	std	Y+23, r26	; 0x17
    34f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34f2:	6d 89       	ldd	r22, Y+21	; 0x15
    34f4:	7e 89       	ldd	r23, Y+22	; 0x16
    34f6:	8f 89       	ldd	r24, Y+23	; 0x17
    34f8:	98 8d       	ldd	r25, Y+24	; 0x18
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	40 e8       	ldi	r20, 0x80	; 128
    3500:	5f e3       	ldi	r21, 0x3F	; 63
    3502:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3506:	88 23       	and	r24, r24
    3508:	2c f4       	brge	.+10     	; 0x3514 <main+0xfb6>
		__ticks = 1;
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	9c 8b       	std	Y+20, r25	; 0x14
    3510:	8b 8b       	std	Y+19, r24	; 0x13
    3512:	3f c0       	rjmp	.+126    	; 0x3592 <main+0x1034>
	else if (__tmp > 65535)
    3514:	6d 89       	ldd	r22, Y+21	; 0x15
    3516:	7e 89       	ldd	r23, Y+22	; 0x16
    3518:	8f 89       	ldd	r24, Y+23	; 0x17
    351a:	98 8d       	ldd	r25, Y+24	; 0x18
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	3f ef       	ldi	r19, 0xFF	; 255
    3520:	4f e7       	ldi	r20, 0x7F	; 127
    3522:	57 e4       	ldi	r21, 0x47	; 71
    3524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3528:	18 16       	cp	r1, r24
    352a:	4c f5       	brge	.+82     	; 0x357e <main+0x1020>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352c:	69 8d       	ldd	r22, Y+25	; 0x19
    352e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3530:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3532:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e2       	ldi	r20, 0x20	; 32
    353a:	51 e4       	ldi	r21, 0x41	; 65
    353c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3540:	dc 01       	movw	r26, r24
    3542:	cb 01       	movw	r24, r22
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354c:	dc 01       	movw	r26, r24
    354e:	cb 01       	movw	r24, r22
    3550:	9c 8b       	std	Y+20, r25	; 0x14
    3552:	8b 8b       	std	Y+19, r24	; 0x13
    3554:	0f c0       	rjmp	.+30     	; 0x3574 <main+0x1016>
    3556:	89 e1       	ldi	r24, 0x19	; 25
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	9a 8b       	std	Y+18, r25	; 0x12
    355c:	89 8b       	std	Y+17, r24	; 0x11
    355e:	89 89       	ldd	r24, Y+17	; 0x11
    3560:	9a 89       	ldd	r25, Y+18	; 0x12
    3562:	01 97       	sbiw	r24, 0x01	; 1
    3564:	f1 f7       	brne	.-4      	; 0x3562 <main+0x1004>
    3566:	9a 8b       	std	Y+18, r25	; 0x12
    3568:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    356a:	8b 89       	ldd	r24, Y+19	; 0x13
    356c:	9c 89       	ldd	r25, Y+20	; 0x14
    356e:	01 97       	sbiw	r24, 0x01	; 1
    3570:	9c 8b       	std	Y+20, r25	; 0x14
    3572:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3574:	8b 89       	ldd	r24, Y+19	; 0x13
    3576:	9c 89       	ldd	r25, Y+20	; 0x14
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	69 f7       	brne	.-38     	; 0x3556 <main+0xff8>
    357c:	14 c0       	rjmp	.+40     	; 0x35a6 <main+0x1048>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357e:	6d 89       	ldd	r22, Y+21	; 0x15
    3580:	7e 89       	ldd	r23, Y+22	; 0x16
    3582:	8f 89       	ldd	r24, Y+23	; 0x17
    3584:	98 8d       	ldd	r25, Y+24	; 0x18
    3586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    358a:	dc 01       	movw	r26, r24
    358c:	cb 01       	movw	r24, r22
    358e:	9c 8b       	std	Y+20, r25	; 0x14
    3590:	8b 8b       	std	Y+19, r24	; 0x13
    3592:	8b 89       	ldd	r24, Y+19	; 0x13
    3594:	9c 89       	ldd	r25, Y+20	; 0x14
    3596:	98 8b       	std	Y+16, r25	; 0x10
    3598:	8f 87       	std	Y+15, r24	; 0x0f
    359a:	8f 85       	ldd	r24, Y+15	; 0x0f
    359c:	98 89       	ldd	r25, Y+16	; 0x10
    359e:	01 97       	sbiw	r24, 0x01	; 1
    35a0:	f1 f7       	brne	.-4      	; 0x359e <main+0x1040>
    35a2:	98 8b       	std	Y+16, r25	; 0x10
    35a4:	8f 87       	std	Y+15, r24	; 0x0f
		    	 USART_voidWriteData('D');
		    	 LCD_voidSendCommand(1);
		    	 LCD_voidWriteString("OPening Door...");
		    	 _delay_ms(200);
		    	 PWM_voidInitTimer1();
		    	 for (u16 Local_u16Index=751;Local_u16Index<=1250;Local_u16Index++)
    35a6:	de 01       	movw	r26, r28
    35a8:	a4 55       	subi	r26, 0x54	; 84
    35aa:	bf 4f       	sbci	r27, 0xFF	; 255
    35ac:	fe 01       	movw	r30, r28
    35ae:	e4 55       	subi	r30, 0x54	; 84
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	01 96       	adiw	r24, 0x01	; 1
    35b8:	11 96       	adiw	r26, 0x01	; 1
    35ba:	9c 93       	st	X, r25
    35bc:	8e 93       	st	-X, r24
    35be:	fe 01       	movw	r30, r28
    35c0:	e4 55       	subi	r30, 0x54	; 84
    35c2:	ff 4f       	sbci	r31, 0xFF	; 255
    35c4:	80 81       	ld	r24, Z
    35c6:	91 81       	ldd	r25, Z+1	; 0x01
    35c8:	f4 e0       	ldi	r31, 0x04	; 4
    35ca:	83 3e       	cpi	r24, 0xE3	; 227
    35cc:	9f 07       	cpc	r25, r31
    35ce:	08 f4       	brcc	.+2      	; 0x35d2 <main+0x1074>
    35d0:	71 cf       	rjmp	.-286    	; 0x34b4 <main+0xf56>
		    	 {
		    		 PWM_voidSetCompareMatchValue(Local_u16Index);
		    		 _delay_ms(1);
		    	 }
		    	 LCD_voidSendCommand(1);
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
		    	 LCD_voidWriteString("Door Opened");
    35d8:	89 ec       	ldi	r24, 0xC9	; 201
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	aa e7       	ldi	r26, 0x7A	; 122
    35e6:	b3 e4       	ldi	r27, 0x43	; 67
    35e8:	8b 87       	std	Y+11, r24	; 0x0b
    35ea:	9c 87       	std	Y+12, r25	; 0x0c
    35ec:	ad 87       	std	Y+13, r26	; 0x0d
    35ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	4a e7       	ldi	r20, 0x7A	; 122
    35fe:	53 e4       	ldi	r21, 0x43	; 67
    3600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3604:	dc 01       	movw	r26, r24
    3606:	cb 01       	movw	r24, r22
    3608:	8f 83       	std	Y+7, r24	; 0x07
    360a:	98 87       	std	Y+8, r25	; 0x08
    360c:	a9 87       	std	Y+9, r26	; 0x09
    360e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3610:	6f 81       	ldd	r22, Y+7	; 0x07
    3612:	78 85       	ldd	r23, Y+8	; 0x08
    3614:	89 85       	ldd	r24, Y+9	; 0x09
    3616:	9a 85       	ldd	r25, Y+10	; 0x0a
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e8       	ldi	r20, 0x80	; 128
    361e:	5f e3       	ldi	r21, 0x3F	; 63
    3620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3624:	88 23       	and	r24, r24
    3626:	2c f4       	brge	.+10     	; 0x3632 <main+0x10d4>
		__ticks = 1;
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	9e 83       	std	Y+6, r25	; 0x06
    362e:	8d 83       	std	Y+5, r24	; 0x05
    3630:	3f c0       	rjmp	.+126    	; 0x36b0 <main+0x1152>
	else if (__tmp > 65535)
    3632:	6f 81       	ldd	r22, Y+7	; 0x07
    3634:	78 85       	ldd	r23, Y+8	; 0x08
    3636:	89 85       	ldd	r24, Y+9	; 0x09
    3638:	9a 85       	ldd	r25, Y+10	; 0x0a
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	3f ef       	ldi	r19, 0xFF	; 255
    363e:	4f e7       	ldi	r20, 0x7F	; 127
    3640:	57 e4       	ldi	r21, 0x47	; 71
    3642:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3646:	18 16       	cp	r1, r24
    3648:	4c f5       	brge	.+82     	; 0x369c <main+0x113e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364a:	6b 85       	ldd	r22, Y+11	; 0x0b
    364c:	7c 85       	ldd	r23, Y+12	; 0x0c
    364e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3650:	9e 85       	ldd	r25, Y+14	; 0x0e
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e2       	ldi	r20, 0x20	; 32
    3658:	51 e4       	ldi	r21, 0x41	; 65
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	bc 01       	movw	r22, r24
    3664:	cd 01       	movw	r24, r26
    3666:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    366a:	dc 01       	movw	r26, r24
    366c:	cb 01       	movw	r24, r22
    366e:	9e 83       	std	Y+6, r25	; 0x06
    3670:	8d 83       	std	Y+5, r24	; 0x05
    3672:	0f c0       	rjmp	.+30     	; 0x3692 <main+0x1134>
    3674:	89 e1       	ldi	r24, 0x19	; 25
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	9c 83       	std	Y+4, r25	; 0x04
    367a:	8b 83       	std	Y+3, r24	; 0x03
    367c:	8b 81       	ldd	r24, Y+3	; 0x03
    367e:	9c 81       	ldd	r25, Y+4	; 0x04
    3680:	01 97       	sbiw	r24, 0x01	; 1
    3682:	f1 f7       	brne	.-4      	; 0x3680 <main+0x1122>
    3684:	9c 83       	std	Y+4, r25	; 0x04
    3686:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3688:	8d 81       	ldd	r24, Y+5	; 0x05
    368a:	9e 81       	ldd	r25, Y+6	; 0x06
    368c:	01 97       	sbiw	r24, 0x01	; 1
    368e:	9e 83       	std	Y+6, r25	; 0x06
    3690:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3692:	8d 81       	ldd	r24, Y+5	; 0x05
    3694:	9e 81       	ldd	r25, Y+6	; 0x06
    3696:	00 97       	sbiw	r24, 0x00	; 0
    3698:	69 f7       	brne	.-38     	; 0x3674 <main+0x1116>
    369a:	14 c0       	rjmp	.+40     	; 0x36c4 <main+0x1166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    369c:	6f 81       	ldd	r22, Y+7	; 0x07
    369e:	78 85       	ldd	r23, Y+8	; 0x08
    36a0:	89 85       	ldd	r24, Y+9	; 0x09
    36a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	9e 83       	std	Y+6, r25	; 0x06
    36ae:	8d 83       	std	Y+5, r24	; 0x05
    36b0:	8d 81       	ldd	r24, Y+5	; 0x05
    36b2:	9e 81       	ldd	r25, Y+6	; 0x06
    36b4:	9a 83       	std	Y+2, r25	; 0x02
    36b6:	89 83       	std	Y+1, r24	; 0x01
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	9a 81       	ldd	r25, Y+2	; 0x02
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <main+0x115e>
    36c0:	9a 83       	std	Y+2, r25	; 0x02
    36c2:	89 83       	std	Y+1, r24	; 0x01
		    	 _delay_ms(250);
		    	 LCD_voidSendCommand(1);
    36c4:	81 e0       	ldi	r24, 0x01	; 1
    36c6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <LCD_voidSendCommand>
		    	 while (1)
		    	 {
		    		 u8 LEDS;
		    		 u16 Local_u16ADC1Val = ADC_u16Read(ADC1);
    36ca:	81 e0       	ldi	r24, 0x01	; 1
    36cc:	0e 94 73 07 	call	0xee6	; 0xee6 <ADC_u16Read>
    36d0:	fe 01       	movw	r30, r28
    36d2:	e7 55       	subi	r30, 0x57	; 87
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	91 83       	std	Z+1, r25	; 0x01
    36d8:	80 83       	st	Z, r24

		    		 f32 Local_f32ADC1Val=ADC_f32ADCtoVolt (Local_u16ADC1Val);
    36da:	fe 01       	movw	r30, r28
    36dc:	e7 55       	subi	r30, 0x57	; 87
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	80 81       	ld	r24, Z
    36e2:	91 81       	ldd	r25, Z+1	; 0x01
    36e4:	0e 94 a9 07 	call	0xf52	; 0xf52 <ADC_f32ADCtoVolt>
    36e8:	dc 01       	movw	r26, r24
    36ea:	cb 01       	movw	r24, r22
    36ec:	fe 01       	movw	r30, r28
    36ee:	eb 55       	subi	r30, 0x5B	; 91
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	80 83       	st	Z, r24
    36f4:	91 83       	std	Z+1, r25	; 0x01
    36f6:	a2 83       	std	Z+2, r26	; 0x02
    36f8:	b3 83       	std	Z+3, r27	; 0x03

		    		 LCD_voidGoToXY(0,0);
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
		    		 LCD_voidWriteString("TemP: ");
    3702:	85 ed       	ldi	r24, 0xD5	; 213
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
		    		 f32 TemP=LM35_voidVoltToTemperature(Local_f32ADC1Val);
    370a:	fe 01       	movw	r30, r28
    370c:	eb 55       	subi	r30, 0x5B	; 91
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	80 81       	ld	r24, Z
    3712:	91 81       	ldd	r25, Z+1	; 0x01
    3714:	a2 81       	ldd	r26, Z+2	; 0x02
    3716:	b3 81       	ldd	r27, Z+3	; 0x03
    3718:	bc 01       	movw	r22, r24
    371a:	cd 01       	movw	r24, r26
    371c:	0e 94 cd 11 	call	0x239a	; 0x239a <LM35_voidVoltToTemperature>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	fe 01       	movw	r30, r28
    3726:	ef 55       	subi	r30, 0x5F	; 95
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	80 83       	st	Z, r24
    372c:	91 83       	std	Z+1, r25	; 0x01
    372e:	a2 83       	std	Z+2, r26	; 0x02
    3730:	b3 83       	std	Z+3, r27	; 0x03
		    		 if (TemP>=26.00)
    3732:	fe 01       	movw	r30, r28
    3734:	ef 55       	subi	r30, 0x5F	; 95
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	60 81       	ld	r22, Z
    373a:	71 81       	ldd	r23, Z+1	; 0x01
    373c:	82 81       	ldd	r24, Z+2	; 0x02
    373e:	93 81       	ldd	r25, Z+3	; 0x03
    3740:	20 e0       	ldi	r18, 0x00	; 0
    3742:	30 e0       	ldi	r19, 0x00	; 0
    3744:	40 ed       	ldi	r20, 0xD0	; 208
    3746:	51 e4       	ldi	r21, 0x41	; 65
    3748:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    374c:	88 23       	and	r24, r24
    374e:	6c f0       	brlt	.+26     	; 0x376a <main+0x120c>
		    		 {
		    			 DIO_voidSetPinValue(DIO_PORTA,PIN3,HIGH);
    3750:	80 e0       	ldi	r24, 0x00	; 0
    3752:	63 e0       	ldi	r22, 0x03	; 3
    3754:	41 e0       	ldi	r20, 0x01	; 1
    3756:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
		    			 //LCD_voidGoToXY(15,0);
		    			 LCD_voidWriteSpecialChar(Global_u8Motor,15,0,PATTERN_0);
    375a:	8c ef       	ldi	r24, 0xFC	; 252
    375c:	91 e0       	ldi	r25, 0x01	; 1
    375e:	6f e0       	ldi	r22, 0x0F	; 15
    3760:	40 e0       	ldi	r20, 0x00	; 0
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	0e 94 db 10 	call	0x21b6	; 0x21b6 <LCD_voidWriteSpecialChar>
    3768:	0c c0       	rjmp	.+24     	; 0x3782 <main+0x1224>
		    		 }
		    		 else
		    		 {
		    			 DIO_voidSetPinValue(DIO_PORTA,PIN3,LOW);
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	63 e0       	ldi	r22, 0x03	; 3
    376e:	40 e0       	ldi	r20, 0x00	; 0
    3770:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_voidSetPinValue>
		    			 LCD_voidGoToXY(15,0);
    3774:	8f e0       	ldi	r24, 0x0F	; 15
    3776:	60 e0       	ldi	r22, 0x00	; 0
    3778:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
		    			 LCD_voidSendData(0b00010000);
    377c:	80 e1       	ldi	r24, 0x10	; 16
    377e:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_voidSendData>
		    		 }

		    		 u16 Local_u16ADC0Val = ADC_u16Read(ADC0);
    3782:	80 e0       	ldi	r24, 0x00	; 0
    3784:	0e 94 73 07 	call	0xee6	; 0xee6 <ADC_u16Read>
    3788:	fe 01       	movw	r30, r28
    378a:	e1 56       	subi	r30, 0x61	; 97
    378c:	ff 4f       	sbci	r31, 0xFF	; 255
    378e:	91 83       	std	Z+1, r25	; 0x01
    3790:	80 83       	st	Z, r24

		    		 f32 Local_f32ADC0Val= ADC_f32ADCtoVolt (Local_u16ADC0Val);
    3792:	fe 01       	movw	r30, r28
    3794:	e1 56       	subi	r30, 0x61	; 97
    3796:	ff 4f       	sbci	r31, 0xFF	; 255
    3798:	80 81       	ld	r24, Z
    379a:	91 81       	ldd	r25, Z+1	; 0x01
    379c:	0e 94 a9 07 	call	0xf52	; 0xf52 <ADC_f32ADCtoVolt>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	fe 01       	movw	r30, r28
    37a6:	e5 56       	subi	r30, 0x65	; 101
    37a8:	ff 4f       	sbci	r31, 0xFF	; 255
    37aa:	80 83       	st	Z, r24
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	a2 83       	std	Z+2, r26	; 0x02
    37b0:	b3 83       	std	Z+3, r27	; 0x03
		    		 LCD_voidGoToXY(0,1);
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	61 e0       	ldi	r22, 0x01	; 1
    37b6:	0e 94 bb 10 	call	0x2176	; 0x2176 <LCD_voidGoToXY>
		    		LCD_voidWriteString("LEDS: ");
    37ba:	8c ed       	ldi	r24, 0xDC	; 220
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	0e 94 14 10 	call	0x2028	; 0x2028 <LCD_voidWriteString>
		    			 if (Local_f32ADC0Val>=4.6)
    37c2:	fe 01       	movw	r30, r28
    37c4:	e5 56       	subi	r30, 0x65	; 101
    37c6:	ff 4f       	sbci	r31, 0xFF	; 255
    37c8:	60 81       	ld	r22, Z
    37ca:	71 81       	ldd	r23, Z+1	; 0x01
    37cc:	82 81       	ldd	r24, Z+2	; 0x02
    37ce:	93 81       	ldd	r25, Z+3	; 0x03
    37d0:	23 e3       	ldi	r18, 0x33	; 51
    37d2:	33 e3       	ldi	r19, 0x33	; 51
    37d4:	43 e9       	ldi	r20, 0x93	; 147
    37d6:	50 e4       	ldi	r21, 0x40	; 64
    37d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    37dc:	88 23       	and	r24, r24
    37de:	54 f0       	brlt	.+20     	; 0x37f4 <main+0x1296>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B11111111);
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	6f ef       	ldi	r22, 0xFF	; 255
    37e4:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=8;}
    37e8:	fe 01       	movw	r30, r28
    37ea:	e5 55       	subi	r30, 0x55	; 85
    37ec:	ff 4f       	sbci	r31, 0xFF	; 255
    37ee:	88 e0       	ldi	r24, 0x08	; 8
    37f0:	80 83       	st	Z, r24
    37f2:	1f c2       	rjmp	.+1086   	; 0x3c32 <main+0x16d4>
		    			 else if (Local_f32ADC0Val<=0.3)
    37f4:	fe 01       	movw	r30, r28
    37f6:	e5 56       	subi	r30, 0x65	; 101
    37f8:	ff 4f       	sbci	r31, 0xFF	; 255
    37fa:	60 81       	ld	r22, Z
    37fc:	71 81       	ldd	r23, Z+1	; 0x01
    37fe:	82 81       	ldd	r24, Z+2	; 0x02
    3800:	93 81       	ldd	r25, Z+3	; 0x03
    3802:	2a e9       	ldi	r18, 0x9A	; 154
    3804:	39 e9       	ldi	r19, 0x99	; 153
    3806:	49 e9       	ldi	r20, 0x99	; 153
    3808:	5e e3       	ldi	r21, 0x3E	; 62
    380a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    380e:	18 16       	cp	r1, r24
    3810:	4c f0       	brlt	.+18     	; 0x3824 <main+0x12c6>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B0);
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=0;
    381a:	fe 01       	movw	r30, r28
    381c:	e5 55       	subi	r30, 0x55	; 85
    381e:	ff 4f       	sbci	r31, 0xFF	; 255
    3820:	10 82       	st	Z, r1
    3822:	07 c2       	rjmp	.+1038   	; 0x3c32 <main+0x16d4>
		    			 }
		    			 else if (Local_f32ADC0Val>=0.31 && Local_f32ADC0Val<=0.5)
    3824:	cb 52       	subi	r28, 0x2B	; 43
    3826:	df 4f       	sbci	r29, 0xFF	; 255
    3828:	18 82       	st	Y, r1
    382a:	c5 5d       	subi	r28, 0xD5	; 213
    382c:	d0 40       	sbci	r29, 0x00	; 0
    382e:	fe 01       	movw	r30, r28
    3830:	e5 56       	subi	r30, 0x65	; 101
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	60 81       	ld	r22, Z
    3836:	71 81       	ldd	r23, Z+1	; 0x01
    3838:	82 81       	ldd	r24, Z+2	; 0x02
    383a:	93 81       	ldd	r25, Z+3	; 0x03
    383c:	22 e5       	ldi	r18, 0x52	; 82
    383e:	38 eb       	ldi	r19, 0xB8	; 184
    3840:	4e e9       	ldi	r20, 0x9E	; 158
    3842:	5e e3       	ldi	r21, 0x3E	; 62
    3844:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3848:	88 23       	and	r24, r24
    384a:	34 f0       	brlt	.+12     	; 0x3858 <main+0x12fa>
    384c:	21 e0       	ldi	r18, 0x01	; 1
    384e:	cb 52       	subi	r28, 0x2B	; 43
    3850:	df 4f       	sbci	r29, 0xFF	; 255
    3852:	28 83       	st	Y, r18
    3854:	c5 5d       	subi	r28, 0xD5	; 213
    3856:	d0 40       	sbci	r29, 0x00	; 0
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	cb 52       	subi	r28, 0x2B	; 43
    385c:	df 4f       	sbci	r29, 0xFF	; 255
    385e:	98 81       	ld	r25, Y
    3860:	c5 5d       	subi	r28, 0xD5	; 213
    3862:	d0 40       	sbci	r29, 0x00	; 0
    3864:	89 27       	eor	r24, r25
    3866:	88 23       	and	r24, r24
    3868:	69 f5       	brne	.+90     	; 0x38c4 <main+0x1366>
    386a:	cc 52       	subi	r28, 0x2C	; 44
    386c:	df 4f       	sbci	r29, 0xFF	; 255
    386e:	18 82       	st	Y, r1
    3870:	c4 5d       	subi	r28, 0xD4	; 212
    3872:	d0 40       	sbci	r29, 0x00	; 0
    3874:	fe 01       	movw	r30, r28
    3876:	e5 56       	subi	r30, 0x65	; 101
    3878:	ff 4f       	sbci	r31, 0xFF	; 255
    387a:	60 81       	ld	r22, Z
    387c:	71 81       	ldd	r23, Z+1	; 0x01
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	93 81       	ldd	r25, Z+3	; 0x03
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e0       	ldi	r20, 0x00	; 0
    3888:	5f e3       	ldi	r21, 0x3F	; 63
    388a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    388e:	18 16       	cp	r1, r24
    3890:	34 f0       	brlt	.+12     	; 0x389e <main+0x1340>
    3892:	e1 e0       	ldi	r30, 0x01	; 1
    3894:	cc 52       	subi	r28, 0x2C	; 44
    3896:	df 4f       	sbci	r29, 0xFF	; 255
    3898:	e8 83       	st	Y, r30
    389a:	c4 5d       	subi	r28, 0xD4	; 212
    389c:	d0 40       	sbci	r29, 0x00	; 0
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	cc 52       	subi	r28, 0x2C	; 44
    38a2:	df 4f       	sbci	r29, 0xFF	; 255
    38a4:	f8 81       	ld	r31, Y
    38a6:	c4 5d       	subi	r28, 0xD4	; 212
    38a8:	d0 40       	sbci	r29, 0x00	; 0
    38aa:	8f 27       	eor	r24, r31
    38ac:	88 23       	and	r24, r24
    38ae:	51 f4       	brne	.+20     	; 0x38c4 <main+0x1366>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B00000001);
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	61 e0       	ldi	r22, 0x01	; 1
    38b4:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=1;
    38b8:	fe 01       	movw	r30, r28
    38ba:	e5 55       	subi	r30, 0x55	; 85
    38bc:	ff 4f       	sbci	r31, 0xFF	; 255
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	80 83       	st	Z, r24
    38c2:	b7 c1       	rjmp	.+878    	; 0x3c32 <main+0x16d4>
		    			 }
		    			 else if (Local_f32ADC0Val>=0.51 && Local_f32ADC0Val<=0.9)
    38c4:	cd 52       	subi	r28, 0x2D	; 45
    38c6:	df 4f       	sbci	r29, 0xFF	; 255
    38c8:	18 82       	st	Y, r1
    38ca:	c3 5d       	subi	r28, 0xD3	; 211
    38cc:	d0 40       	sbci	r29, 0x00	; 0
    38ce:	fe 01       	movw	r30, r28
    38d0:	e5 56       	subi	r30, 0x65	; 101
    38d2:	ff 4f       	sbci	r31, 0xFF	; 255
    38d4:	60 81       	ld	r22, Z
    38d6:	71 81       	ldd	r23, Z+1	; 0x01
    38d8:	82 81       	ldd	r24, Z+2	; 0x02
    38da:	93 81       	ldd	r25, Z+3	; 0x03
    38dc:	2c e5       	ldi	r18, 0x5C	; 92
    38de:	3f e8       	ldi	r19, 0x8F	; 143
    38e0:	42 e0       	ldi	r20, 0x02	; 2
    38e2:	5f e3       	ldi	r21, 0x3F	; 63
    38e4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    38e8:	88 23       	and	r24, r24
    38ea:	34 f0       	brlt	.+12     	; 0x38f8 <main+0x139a>
    38ec:	21 e0       	ldi	r18, 0x01	; 1
    38ee:	cd 52       	subi	r28, 0x2D	; 45
    38f0:	df 4f       	sbci	r29, 0xFF	; 255
    38f2:	28 83       	st	Y, r18
    38f4:	c3 5d       	subi	r28, 0xD3	; 211
    38f6:	d0 40       	sbci	r29, 0x00	; 0
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	cd 52       	subi	r28, 0x2D	; 45
    38fc:	df 4f       	sbci	r29, 0xFF	; 255
    38fe:	98 81       	ld	r25, Y
    3900:	c3 5d       	subi	r28, 0xD3	; 211
    3902:	d0 40       	sbci	r29, 0x00	; 0
    3904:	89 27       	eor	r24, r25
    3906:	88 23       	and	r24, r24
    3908:	69 f5       	brne	.+90     	; 0x3964 <main+0x1406>
    390a:	ce 52       	subi	r28, 0x2E	; 46
    390c:	df 4f       	sbci	r29, 0xFF	; 255
    390e:	18 82       	st	Y, r1
    3910:	c2 5d       	subi	r28, 0xD2	; 210
    3912:	d0 40       	sbci	r29, 0x00	; 0
    3914:	fe 01       	movw	r30, r28
    3916:	e5 56       	subi	r30, 0x65	; 101
    3918:	ff 4f       	sbci	r31, 0xFF	; 255
    391a:	60 81       	ld	r22, Z
    391c:	71 81       	ldd	r23, Z+1	; 0x01
    391e:	82 81       	ldd	r24, Z+2	; 0x02
    3920:	93 81       	ldd	r25, Z+3	; 0x03
    3922:	26 e6       	ldi	r18, 0x66	; 102
    3924:	36 e6       	ldi	r19, 0x66	; 102
    3926:	46 e6       	ldi	r20, 0x66	; 102
    3928:	5f e3       	ldi	r21, 0x3F	; 63
    392a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    392e:	18 16       	cp	r1, r24
    3930:	34 f0       	brlt	.+12     	; 0x393e <main+0x13e0>
    3932:	e1 e0       	ldi	r30, 0x01	; 1
    3934:	ce 52       	subi	r28, 0x2E	; 46
    3936:	df 4f       	sbci	r29, 0xFF	; 255
    3938:	e8 83       	st	Y, r30
    393a:	c2 5d       	subi	r28, 0xD2	; 210
    393c:	d0 40       	sbci	r29, 0x00	; 0
    393e:	81 e0       	ldi	r24, 0x01	; 1
    3940:	ce 52       	subi	r28, 0x2E	; 46
    3942:	df 4f       	sbci	r29, 0xFF	; 255
    3944:	f8 81       	ld	r31, Y
    3946:	c2 5d       	subi	r28, 0xD2	; 210
    3948:	d0 40       	sbci	r29, 0x00	; 0
    394a:	8f 27       	eor	r24, r31
    394c:	88 23       	and	r24, r24
    394e:	51 f4       	brne	.+20     	; 0x3964 <main+0x1406>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B00000011);
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	63 e0       	ldi	r22, 0x03	; 3
    3954:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=2;
    3958:	fe 01       	movw	r30, r28
    395a:	e5 55       	subi	r30, 0x55	; 85
    395c:	ff 4f       	sbci	r31, 0xFF	; 255
    395e:	82 e0       	ldi	r24, 0x02	; 2
    3960:	80 83       	st	Z, r24
    3962:	67 c1       	rjmp	.+718    	; 0x3c32 <main+0x16d4>
		    			 }
		    			 else if (Local_f32ADC0Val>=0.91 && Local_f32ADC0Val<=1.7)
    3964:	cf 52       	subi	r28, 0x2F	; 47
    3966:	df 4f       	sbci	r29, 0xFF	; 255
    3968:	18 82       	st	Y, r1
    396a:	c1 5d       	subi	r28, 0xD1	; 209
    396c:	d0 40       	sbci	r29, 0x00	; 0
    396e:	fe 01       	movw	r30, r28
    3970:	e5 56       	subi	r30, 0x65	; 101
    3972:	ff 4f       	sbci	r31, 0xFF	; 255
    3974:	60 81       	ld	r22, Z
    3976:	71 81       	ldd	r23, Z+1	; 0x01
    3978:	82 81       	ldd	r24, Z+2	; 0x02
    397a:	93 81       	ldd	r25, Z+3	; 0x03
    397c:	23 ec       	ldi	r18, 0xC3	; 195
    397e:	35 ef       	ldi	r19, 0xF5	; 245
    3980:	48 e6       	ldi	r20, 0x68	; 104
    3982:	5f e3       	ldi	r21, 0x3F	; 63
    3984:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3988:	88 23       	and	r24, r24
    398a:	34 f0       	brlt	.+12     	; 0x3998 <main+0x143a>
    398c:	21 e0       	ldi	r18, 0x01	; 1
    398e:	cf 52       	subi	r28, 0x2F	; 47
    3990:	df 4f       	sbci	r29, 0xFF	; 255
    3992:	28 83       	st	Y, r18
    3994:	c1 5d       	subi	r28, 0xD1	; 209
    3996:	d0 40       	sbci	r29, 0x00	; 0
    3998:	81 e0       	ldi	r24, 0x01	; 1
    399a:	cf 52       	subi	r28, 0x2F	; 47
    399c:	df 4f       	sbci	r29, 0xFF	; 255
    399e:	98 81       	ld	r25, Y
    39a0:	c1 5d       	subi	r28, 0xD1	; 209
    39a2:	d0 40       	sbci	r29, 0x00	; 0
    39a4:	89 27       	eor	r24, r25
    39a6:	88 23       	and	r24, r24
    39a8:	69 f5       	brne	.+90     	; 0x3a04 <main+0x14a6>
    39aa:	c0 53       	subi	r28, 0x30	; 48
    39ac:	df 4f       	sbci	r29, 0xFF	; 255
    39ae:	18 82       	st	Y, r1
    39b0:	c0 5d       	subi	r28, 0xD0	; 208
    39b2:	d0 40       	sbci	r29, 0x00	; 0
    39b4:	fe 01       	movw	r30, r28
    39b6:	e5 56       	subi	r30, 0x65	; 101
    39b8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ba:	60 81       	ld	r22, Z
    39bc:	71 81       	ldd	r23, Z+1	; 0x01
    39be:	82 81       	ldd	r24, Z+2	; 0x02
    39c0:	93 81       	ldd	r25, Z+3	; 0x03
    39c2:	2a e9       	ldi	r18, 0x9A	; 154
    39c4:	39 e9       	ldi	r19, 0x99	; 153
    39c6:	49 ed       	ldi	r20, 0xD9	; 217
    39c8:	5f e3       	ldi	r21, 0x3F	; 63
    39ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    39ce:	18 16       	cp	r1, r24
    39d0:	34 f0       	brlt	.+12     	; 0x39de <main+0x1480>
    39d2:	e1 e0       	ldi	r30, 0x01	; 1
    39d4:	c0 53       	subi	r28, 0x30	; 48
    39d6:	df 4f       	sbci	r29, 0xFF	; 255
    39d8:	e8 83       	st	Y, r30
    39da:	c0 5d       	subi	r28, 0xD0	; 208
    39dc:	d0 40       	sbci	r29, 0x00	; 0
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	c0 53       	subi	r28, 0x30	; 48
    39e2:	df 4f       	sbci	r29, 0xFF	; 255
    39e4:	f8 81       	ld	r31, Y
    39e6:	c0 5d       	subi	r28, 0xD0	; 208
    39e8:	d0 40       	sbci	r29, 0x00	; 0
    39ea:	8f 27       	eor	r24, r31
    39ec:	88 23       	and	r24, r24
    39ee:	51 f4       	brne	.+20     	; 0x3a04 <main+0x14a6>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B00000111);
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	67 e0       	ldi	r22, 0x07	; 7
    39f4:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=3;
    39f8:	fe 01       	movw	r30, r28
    39fa:	e5 55       	subi	r30, 0x55	; 85
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	83 e0       	ldi	r24, 0x03	; 3
    3a00:	80 83       	st	Z, r24
    3a02:	17 c1       	rjmp	.+558    	; 0x3c32 <main+0x16d4>
		    			 }
		    			 else if (Local_f32ADC0Val>=1.71 && Local_f32ADC0Val<=2.6)
    3a04:	c1 53       	subi	r28, 0x31	; 49
    3a06:	df 4f       	sbci	r29, 0xFF	; 255
    3a08:	18 82       	st	Y, r1
    3a0a:	cf 5c       	subi	r28, 0xCF	; 207
    3a0c:	d0 40       	sbci	r29, 0x00	; 0
    3a0e:	fe 01       	movw	r30, r28
    3a10:	e5 56       	subi	r30, 0x65	; 101
    3a12:	ff 4f       	sbci	r31, 0xFF	; 255
    3a14:	60 81       	ld	r22, Z
    3a16:	71 81       	ldd	r23, Z+1	; 0x01
    3a18:	82 81       	ldd	r24, Z+2	; 0x02
    3a1a:	93 81       	ldd	r25, Z+3	; 0x03
    3a1c:	28 e4       	ldi	r18, 0x48	; 72
    3a1e:	31 ee       	ldi	r19, 0xE1	; 225
    3a20:	4a ed       	ldi	r20, 0xDA	; 218
    3a22:	5f e3       	ldi	r21, 0x3F	; 63
    3a24:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3a28:	88 23       	and	r24, r24
    3a2a:	34 f0       	brlt	.+12     	; 0x3a38 <main+0x14da>
    3a2c:	21 e0       	ldi	r18, 0x01	; 1
    3a2e:	c1 53       	subi	r28, 0x31	; 49
    3a30:	df 4f       	sbci	r29, 0xFF	; 255
    3a32:	28 83       	st	Y, r18
    3a34:	cf 5c       	subi	r28, 0xCF	; 207
    3a36:	d0 40       	sbci	r29, 0x00	; 0
    3a38:	81 e0       	ldi	r24, 0x01	; 1
    3a3a:	c1 53       	subi	r28, 0x31	; 49
    3a3c:	df 4f       	sbci	r29, 0xFF	; 255
    3a3e:	98 81       	ld	r25, Y
    3a40:	cf 5c       	subi	r28, 0xCF	; 207
    3a42:	d0 40       	sbci	r29, 0x00	; 0
    3a44:	89 27       	eor	r24, r25
    3a46:	88 23       	and	r24, r24
    3a48:	69 f5       	brne	.+90     	; 0x3aa4 <main+0x1546>
    3a4a:	c2 53       	subi	r28, 0x32	; 50
    3a4c:	df 4f       	sbci	r29, 0xFF	; 255
    3a4e:	18 82       	st	Y, r1
    3a50:	ce 5c       	subi	r28, 0xCE	; 206
    3a52:	d0 40       	sbci	r29, 0x00	; 0
    3a54:	fe 01       	movw	r30, r28
    3a56:	e5 56       	subi	r30, 0x65	; 101
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	60 81       	ld	r22, Z
    3a5c:	71 81       	ldd	r23, Z+1	; 0x01
    3a5e:	82 81       	ldd	r24, Z+2	; 0x02
    3a60:	93 81       	ldd	r25, Z+3	; 0x03
    3a62:	26 e6       	ldi	r18, 0x66	; 102
    3a64:	36 e6       	ldi	r19, 0x66	; 102
    3a66:	46 e2       	ldi	r20, 0x26	; 38
    3a68:	50 e4       	ldi	r21, 0x40	; 64
    3a6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3a6e:	18 16       	cp	r1, r24
    3a70:	34 f0       	brlt	.+12     	; 0x3a7e <main+0x1520>
    3a72:	e1 e0       	ldi	r30, 0x01	; 1
    3a74:	c2 53       	subi	r28, 0x32	; 50
    3a76:	df 4f       	sbci	r29, 0xFF	; 255
    3a78:	e8 83       	st	Y, r30
    3a7a:	ce 5c       	subi	r28, 0xCE	; 206
    3a7c:	d0 40       	sbci	r29, 0x00	; 0
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	c2 53       	subi	r28, 0x32	; 50
    3a82:	df 4f       	sbci	r29, 0xFF	; 255
    3a84:	f8 81       	ld	r31, Y
    3a86:	ce 5c       	subi	r28, 0xCE	; 206
    3a88:	d0 40       	sbci	r29, 0x00	; 0
    3a8a:	8f 27       	eor	r24, r31
    3a8c:	88 23       	and	r24, r24
    3a8e:	51 f4       	brne	.+20     	; 0x3aa4 <main+0x1546>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B00001111);
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	6f e0       	ldi	r22, 0x0F	; 15
    3a94:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=4;
    3a98:	fe 01       	movw	r30, r28
    3a9a:	e5 55       	subi	r30, 0x55	; 85
    3a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a9e:	84 e0       	ldi	r24, 0x04	; 4
    3aa0:	80 83       	st	Z, r24
    3aa2:	c7 c0       	rjmp	.+398    	; 0x3c32 <main+0x16d4>
		    			 }
		    			 else if (Local_f32ADC0Val>=2.61 && Local_f32ADC0Val<=3.4)
    3aa4:	c3 53       	subi	r28, 0x33	; 51
    3aa6:	df 4f       	sbci	r29, 0xFF	; 255
    3aa8:	18 82       	st	Y, r1
    3aaa:	cd 5c       	subi	r28, 0xCD	; 205
    3aac:	d0 40       	sbci	r29, 0x00	; 0
    3aae:	fe 01       	movw	r30, r28
    3ab0:	e5 56       	subi	r30, 0x65	; 101
    3ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab4:	60 81       	ld	r22, Z
    3ab6:	71 81       	ldd	r23, Z+1	; 0x01
    3ab8:	82 81       	ldd	r24, Z+2	; 0x02
    3aba:	93 81       	ldd	r25, Z+3	; 0x03
    3abc:	2d e3       	ldi	r18, 0x3D	; 61
    3abe:	3a e0       	ldi	r19, 0x0A	; 10
    3ac0:	47 e2       	ldi	r20, 0x27	; 39
    3ac2:	50 e4       	ldi	r21, 0x40	; 64
    3ac4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3ac8:	88 23       	and	r24, r24
    3aca:	34 f0       	brlt	.+12     	; 0x3ad8 <main+0x157a>
    3acc:	21 e0       	ldi	r18, 0x01	; 1
    3ace:	c3 53       	subi	r28, 0x33	; 51
    3ad0:	df 4f       	sbci	r29, 0xFF	; 255
    3ad2:	28 83       	st	Y, r18
    3ad4:	cd 5c       	subi	r28, 0xCD	; 205
    3ad6:	d0 40       	sbci	r29, 0x00	; 0
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	c3 53       	subi	r28, 0x33	; 51
    3adc:	df 4f       	sbci	r29, 0xFF	; 255
    3ade:	98 81       	ld	r25, Y
    3ae0:	cd 5c       	subi	r28, 0xCD	; 205
    3ae2:	d0 40       	sbci	r29, 0x00	; 0
    3ae4:	89 27       	eor	r24, r25
    3ae6:	88 23       	and	r24, r24
    3ae8:	69 f5       	brne	.+90     	; 0x3b44 <main+0x15e6>
    3aea:	c4 53       	subi	r28, 0x34	; 52
    3aec:	df 4f       	sbci	r29, 0xFF	; 255
    3aee:	18 82       	st	Y, r1
    3af0:	cc 5c       	subi	r28, 0xCC	; 204
    3af2:	d0 40       	sbci	r29, 0x00	; 0
    3af4:	fe 01       	movw	r30, r28
    3af6:	e5 56       	subi	r30, 0x65	; 101
    3af8:	ff 4f       	sbci	r31, 0xFF	; 255
    3afa:	60 81       	ld	r22, Z
    3afc:	71 81       	ldd	r23, Z+1	; 0x01
    3afe:	82 81       	ldd	r24, Z+2	; 0x02
    3b00:	93 81       	ldd	r25, Z+3	; 0x03
    3b02:	2a e9       	ldi	r18, 0x9A	; 154
    3b04:	39 e9       	ldi	r19, 0x99	; 153
    3b06:	49 e5       	ldi	r20, 0x59	; 89
    3b08:	50 e4       	ldi	r21, 0x40	; 64
    3b0a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3b0e:	18 16       	cp	r1, r24
    3b10:	34 f0       	brlt	.+12     	; 0x3b1e <main+0x15c0>
    3b12:	e1 e0       	ldi	r30, 0x01	; 1
    3b14:	c4 53       	subi	r28, 0x34	; 52
    3b16:	df 4f       	sbci	r29, 0xFF	; 255
    3b18:	e8 83       	st	Y, r30
    3b1a:	cc 5c       	subi	r28, 0xCC	; 204
    3b1c:	d0 40       	sbci	r29, 0x00	; 0
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	c4 53       	subi	r28, 0x34	; 52
    3b22:	df 4f       	sbci	r29, 0xFF	; 255
    3b24:	f8 81       	ld	r31, Y
    3b26:	cc 5c       	subi	r28, 0xCC	; 204
    3b28:	d0 40       	sbci	r29, 0x00	; 0
    3b2a:	8f 27       	eor	r24, r31
    3b2c:	88 23       	and	r24, r24
    3b2e:	51 f4       	brne	.+20     	; 0x3b44 <main+0x15e6>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B00011111);
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	6f e1       	ldi	r22, 0x1F	; 31
    3b34:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=5;
    3b38:	fe 01       	movw	r30, r28
    3b3a:	e5 55       	subi	r30, 0x55	; 85
    3b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3e:	85 e0       	ldi	r24, 0x05	; 5
    3b40:	80 83       	st	Z, r24
    3b42:	77 c0       	rjmp	.+238    	; 0x3c32 <main+0x16d4>
		    			 }
		    			 else if (Local_f32ADC0Val>=3.41 && Local_f32ADC0Val<=4.2)
    3b44:	c5 53       	subi	r28, 0x35	; 53
    3b46:	df 4f       	sbci	r29, 0xFF	; 255
    3b48:	18 82       	st	Y, r1
    3b4a:	cb 5c       	subi	r28, 0xCB	; 203
    3b4c:	d0 40       	sbci	r29, 0x00	; 0
    3b4e:	fe 01       	movw	r30, r28
    3b50:	e5 56       	subi	r30, 0x65	; 101
    3b52:	ff 4f       	sbci	r31, 0xFF	; 255
    3b54:	60 81       	ld	r22, Z
    3b56:	71 81       	ldd	r23, Z+1	; 0x01
    3b58:	82 81       	ldd	r24, Z+2	; 0x02
    3b5a:	93 81       	ldd	r25, Z+3	; 0x03
    3b5c:	21 e7       	ldi	r18, 0x71	; 113
    3b5e:	3d e3       	ldi	r19, 0x3D	; 61
    3b60:	4a e5       	ldi	r20, 0x5A	; 90
    3b62:	50 e4       	ldi	r21, 0x40	; 64
    3b64:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3b68:	88 23       	and	r24, r24
    3b6a:	34 f0       	brlt	.+12     	; 0x3b78 <main+0x161a>
    3b6c:	21 e0       	ldi	r18, 0x01	; 1
    3b6e:	c5 53       	subi	r28, 0x35	; 53
    3b70:	df 4f       	sbci	r29, 0xFF	; 255
    3b72:	28 83       	st	Y, r18
    3b74:	cb 5c       	subi	r28, 0xCB	; 203
    3b76:	d0 40       	sbci	r29, 0x00	; 0
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	c5 53       	subi	r28, 0x35	; 53
    3b7c:	df 4f       	sbci	r29, 0xFF	; 255
    3b7e:	98 81       	ld	r25, Y
    3b80:	cb 5c       	subi	r28, 0xCB	; 203
    3b82:	d0 40       	sbci	r29, 0x00	; 0
    3b84:	89 27       	eor	r24, r25
    3b86:	88 23       	and	r24, r24
    3b88:	69 f5       	brne	.+90     	; 0x3be4 <main+0x1686>
    3b8a:	c6 53       	subi	r28, 0x36	; 54
    3b8c:	df 4f       	sbci	r29, 0xFF	; 255
    3b8e:	18 82       	st	Y, r1
    3b90:	ca 5c       	subi	r28, 0xCA	; 202
    3b92:	d0 40       	sbci	r29, 0x00	; 0
    3b94:	fe 01       	movw	r30, r28
    3b96:	e5 56       	subi	r30, 0x65	; 101
    3b98:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9a:	60 81       	ld	r22, Z
    3b9c:	71 81       	ldd	r23, Z+1	; 0x01
    3b9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ba0:	93 81       	ldd	r25, Z+3	; 0x03
    3ba2:	26 e6       	ldi	r18, 0x66	; 102
    3ba4:	36 e6       	ldi	r19, 0x66	; 102
    3ba6:	46 e8       	ldi	r20, 0x86	; 134
    3ba8:	50 e4       	ldi	r21, 0x40	; 64
    3baa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    3bae:	18 16       	cp	r1, r24
    3bb0:	34 f0       	brlt	.+12     	; 0x3bbe <main+0x1660>
    3bb2:	e1 e0       	ldi	r30, 0x01	; 1
    3bb4:	c6 53       	subi	r28, 0x36	; 54
    3bb6:	df 4f       	sbci	r29, 0xFF	; 255
    3bb8:	e8 83       	st	Y, r30
    3bba:	ca 5c       	subi	r28, 0xCA	; 202
    3bbc:	d0 40       	sbci	r29, 0x00	; 0
    3bbe:	81 e0       	ldi	r24, 0x01	; 1
    3bc0:	c6 53       	subi	r28, 0x36	; 54
    3bc2:	df 4f       	sbci	r29, 0xFF	; 255
    3bc4:	f8 81       	ld	r31, Y
    3bc6:	ca 5c       	subi	r28, 0xCA	; 202
    3bc8:	d0 40       	sbci	r29, 0x00	; 0
    3bca:	8f 27       	eor	r24, r31
    3bcc:	88 23       	and	r24, r24
    3bce:	51 f4       	brne	.+20     	; 0x3be4 <main+0x1686>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B00111111);
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	6f e3       	ldi	r22, 0x3F	; 63
    3bd4:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=6;
    3bd8:	fe 01       	movw	r30, r28
    3bda:	e5 55       	subi	r30, 0x55	; 85
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	86 e0       	ldi	r24, 0x06	; 6
    3be0:	80 83       	st	Z, r24
    3be2:	27 c0       	rjmp	.+78     	; 0x3c32 <main+0x16d4>
		    			 }
		    			 else if (Local_f32ADC0Val>=4.21 && Local_f32ADC0Val<4.6)
    3be4:	fe 01       	movw	r30, r28
    3be6:	e5 56       	subi	r30, 0x65	; 101
    3be8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bea:	60 81       	ld	r22, Z
    3bec:	71 81       	ldd	r23, Z+1	; 0x01
    3bee:	82 81       	ldd	r24, Z+2	; 0x02
    3bf0:	93 81       	ldd	r25, Z+3	; 0x03
    3bf2:	22 e5       	ldi	r18, 0x52	; 82
    3bf4:	38 eb       	ldi	r19, 0xB8	; 184
    3bf6:	46 e8       	ldi	r20, 0x86	; 134
    3bf8:	50 e4       	ldi	r21, 0x40	; 64
    3bfa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    3bfe:	88 23       	and	r24, r24
    3c00:	c4 f0       	brlt	.+48     	; 0x3c32 <main+0x16d4>
    3c02:	fe 01       	movw	r30, r28
    3c04:	e5 56       	subi	r30, 0x65	; 101
    3c06:	ff 4f       	sbci	r31, 0xFF	; 255
    3c08:	60 81       	ld	r22, Z
    3c0a:	71 81       	ldd	r23, Z+1	; 0x01
    3c0c:	82 81       	ldd	r24, Z+2	; 0x02
    3c0e:	93 81       	ldd	r25, Z+3	; 0x03
    3c10:	23 e3       	ldi	r18, 0x33	; 51
    3c12:	33 e3       	ldi	r19, 0x33	; 51
    3c14:	43 e9       	ldi	r20, 0x93	; 147
    3c16:	50 e4       	ldi	r21, 0x40	; 64
    3c18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1c:	88 23       	and	r24, r24
    3c1e:	4c f4       	brge	.+18     	; 0x3c32 <main+0x16d4>
		    			 {
		    				 DIO_voidSetPortValue(DIO_PORTB,0B01111111);
    3c20:	81 e0       	ldi	r24, 0x01	; 1
    3c22:	6f e7       	ldi	r22, 0x7F	; 127
    3c24:	0e 94 4d 0a 	call	0x149a	; 0x149a <DIO_voidSetPortValue>
		    				 LEDS=7;
    3c28:	fe 01       	movw	r30, r28
    3c2a:	e5 55       	subi	r30, 0x55	; 85
    3c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2e:	87 e0       	ldi	r24, 0x07	; 7
    3c30:	80 83       	st	Z, r24
		    			 }
		    			 LCD_voidWriteNumber(LEDS);
    3c32:	fe 01       	movw	r30, r28
    3c34:	e5 55       	subi	r30, 0x55	; 85
    3c36:	ff 4f       	sbci	r31, 0xFF	; 255
    3c38:	80 81       	ld	r24, Z
    3c3a:	0e 94 3d 10 	call	0x207a	; 0x207a <LCD_voidWriteNumber>
    3c3e:	45 cd       	rjmp	.-1398   	; 0x36ca <main+0x116c>

00003c40 <__udivmodhi4>:
    3c40:	aa 1b       	sub	r26, r26
    3c42:	bb 1b       	sub	r27, r27
    3c44:	51 e1       	ldi	r21, 0x11	; 17
    3c46:	07 c0       	rjmp	.+14     	; 0x3c56 <__udivmodhi4_ep>

00003c48 <__udivmodhi4_loop>:
    3c48:	aa 1f       	adc	r26, r26
    3c4a:	bb 1f       	adc	r27, r27
    3c4c:	a6 17       	cp	r26, r22
    3c4e:	b7 07       	cpc	r27, r23
    3c50:	10 f0       	brcs	.+4      	; 0x3c56 <__udivmodhi4_ep>
    3c52:	a6 1b       	sub	r26, r22
    3c54:	b7 0b       	sbc	r27, r23

00003c56 <__udivmodhi4_ep>:
    3c56:	88 1f       	adc	r24, r24
    3c58:	99 1f       	adc	r25, r25
    3c5a:	5a 95       	dec	r21
    3c5c:	a9 f7       	brne	.-22     	; 0x3c48 <__udivmodhi4_loop>
    3c5e:	80 95       	com	r24
    3c60:	90 95       	com	r25
    3c62:	bc 01       	movw	r22, r24
    3c64:	cd 01       	movw	r24, r26
    3c66:	08 95       	ret

00003c68 <__prologue_saves__>:
    3c68:	2f 92       	push	r2
    3c6a:	3f 92       	push	r3
    3c6c:	4f 92       	push	r4
    3c6e:	5f 92       	push	r5
    3c70:	6f 92       	push	r6
    3c72:	7f 92       	push	r7
    3c74:	8f 92       	push	r8
    3c76:	9f 92       	push	r9
    3c78:	af 92       	push	r10
    3c7a:	bf 92       	push	r11
    3c7c:	cf 92       	push	r12
    3c7e:	df 92       	push	r13
    3c80:	ef 92       	push	r14
    3c82:	ff 92       	push	r15
    3c84:	0f 93       	push	r16
    3c86:	1f 93       	push	r17
    3c88:	cf 93       	push	r28
    3c8a:	df 93       	push	r29
    3c8c:	cd b7       	in	r28, 0x3d	; 61
    3c8e:	de b7       	in	r29, 0x3e	; 62
    3c90:	ca 1b       	sub	r28, r26
    3c92:	db 0b       	sbc	r29, r27
    3c94:	0f b6       	in	r0, 0x3f	; 63
    3c96:	f8 94       	cli
    3c98:	de bf       	out	0x3e, r29	; 62
    3c9a:	0f be       	out	0x3f, r0	; 63
    3c9c:	cd bf       	out	0x3d, r28	; 61
    3c9e:	09 94       	ijmp

00003ca0 <__epilogue_restores__>:
    3ca0:	2a 88       	ldd	r2, Y+18	; 0x12
    3ca2:	39 88       	ldd	r3, Y+17	; 0x11
    3ca4:	48 88       	ldd	r4, Y+16	; 0x10
    3ca6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ca8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3caa:	7d 84       	ldd	r7, Y+13	; 0x0d
    3cac:	8c 84       	ldd	r8, Y+12	; 0x0c
    3cae:	9b 84       	ldd	r9, Y+11	; 0x0b
    3cb0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3cb2:	b9 84       	ldd	r11, Y+9	; 0x09
    3cb4:	c8 84       	ldd	r12, Y+8	; 0x08
    3cb6:	df 80       	ldd	r13, Y+7	; 0x07
    3cb8:	ee 80       	ldd	r14, Y+6	; 0x06
    3cba:	fd 80       	ldd	r15, Y+5	; 0x05
    3cbc:	0c 81       	ldd	r16, Y+4	; 0x04
    3cbe:	1b 81       	ldd	r17, Y+3	; 0x03
    3cc0:	aa 81       	ldd	r26, Y+2	; 0x02
    3cc2:	b9 81       	ldd	r27, Y+1	; 0x01
    3cc4:	ce 0f       	add	r28, r30
    3cc6:	d1 1d       	adc	r29, r1
    3cc8:	0f b6       	in	r0, 0x3f	; 63
    3cca:	f8 94       	cli
    3ccc:	de bf       	out	0x3e, r29	; 62
    3cce:	0f be       	out	0x3f, r0	; 63
    3cd0:	cd bf       	out	0x3d, r28	; 61
    3cd2:	ed 01       	movw	r28, r26
    3cd4:	08 95       	ret

00003cd6 <_exit>:
    3cd6:	f8 94       	cli

00003cd8 <__stop_program>:
    3cd8:	ff cf       	rjmp	.-2      	; 0x3cd8 <__stop_program>
